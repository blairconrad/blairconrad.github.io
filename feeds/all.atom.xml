<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blair Conrad</title><link href="https://blairconrad.com/" rel="alternate"></link><link href="https://blairconrad.com/feeds/all.atom.xml" rel="self"></link><id>https://blairconrad.com/</id><updated>2020-06-25T00:00:00-04:00</updated><entry><title>LibraryHippo 2020 - Unit Tests</title><link href="https://blairconrad.com/2020/06/25/libraryhippo-2020-unit-tests/" rel="alternate"></link><published>2020-06-25T00:00:00-04:00</published><updated>2020-06-25T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-06-25:/2020/06/25/libraryhippo-2020-unit-tests/</id><summary type="html">&lt;p&gt;Now that I've completed all my
&lt;a href="http://www.extremeprogramming.org/rules/spike.html"&gt;spikes&lt;/a&gt; and decided to
move forward, I'd like to add a little more rigour to the project. Original
LibraryHippo had a comprehensive suite of unit tests and I'll port them over
(and perhaps augment them with integration tests). Today I'll add the first unit …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Now that I've completed all my
&lt;a href="http://www.extremeprogramming.org/rules/spike.html"&gt;spikes&lt;/a&gt; and decided to
move forward, I'd like to add a little more rigour to the project. Original
LibraryHippo had a comprehensive suite of unit tests and I'll port them over
(and perhaps augment them with integration tests). Today I'll add the first unit
test to the project, then port over a bunch more when you're not looking!&lt;/p&gt;
&lt;section id="prerequisites"&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;The first thing we need is a test-running package. My favourite is
&lt;a href="https://docs.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt;
&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Now I need a place to put the tests. I'll broadly be following the structure
from Patrick Kennedy's
&lt;a href="https://www.patricksoftwareblog.com/testing-a-flask-application-using-pytest/"&gt;Testing a Flask Application using pytest&lt;/a&gt;,
although most of it won't be needed today, so I'll just make the &lt;code&gt;tests\unit&lt;/code&gt;
structure, including empty &lt;code&gt;__init__.py&lt;/code&gt; files so my imports work.&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tests\unit&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;ForEach&lt;/span&gt;&lt;span class="n"&gt;-Object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;New-Item&lt;/span&gt; &lt;span class="n"&gt;-Type&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;-Force&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="first-test"&gt;
&lt;h2&gt;First test&lt;/h2&gt;
&lt;p&gt;Next, I write a simple unit test for the &lt;code&gt;WPL&lt;/code&gt; class, to make sure it correctly reads the items I have on hold.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.libraries.wpl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WPL&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_check_card_finds_holds&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_card&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WPL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;check_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;holds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_card&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patron_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Blair Conrad&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123456789&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;9876&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;tests/unit/test_wpl.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Run it using &lt;code&gt;pytest&lt;/code&gt;, and success!&lt;/p&gt;
&lt;pre class="m-console"&gt;&lt;span class="g g-AnsiBrightDefault"&gt;============================= test session starts =============================&lt;/span&gt;
platform win32 -- Python 3.8.1, pytest-5.4.2, py-1.8.1, pluggy-0.13.1
rootdir: D:\Sandbox\LibraryHippo
collected 1 item

tests\unit\test_wpl.py &lt;span class="g g-AnsiGreen"&gt;.                                                 [100%]&lt;/span&gt;

&lt;span class="g g-AnsiGreen"&gt;============================== &lt;/span&gt;&lt;span class="g g-AnsiBrightGreen"&gt;1 passed&lt;/span&gt;&lt;span class="g g-AnsiGreen"&gt; in 2.20s ==============================&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="isolate-tests-from-the-library-website"&gt;
&lt;h2&gt;Isolate tests from the library website&lt;/h2&gt;
&lt;p&gt;That test shows that the code is doing something, but it's dependent on
responses from the Waterloo Public Library website. If I don't have any holds,
or the site is down, my test will fail. I'll use
&lt;a href="https://requests-mock.readthedocs.io/en/latest/"&gt;requests-mock&lt;/a&gt; to fake out
interactions with the library system.&lt;/p&gt;
&lt;pre class="m-code"&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;requests-mock&lt;/span&gt;
&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;I'd never used requests-mock before, and it was incredibly easy. It provides a
pytest fixture on which I can set expectations for the requests module. Within
minutes, I'd used the &lt;code&gt;mock_requests&lt;/code&gt; fixture to configure fake results for&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;getting the login page&lt;/li&gt;
&lt;li&gt;posting the login page&lt;/li&gt;
&lt;li&gt;getting the holds page&lt;/li&gt;
&lt;li&gt;getting the checkouts page&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_check_card_finds_holds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requests_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;login_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;https://books.kpl.org/iii/cas/login?service=&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://books.kpl.org/patroninfo~S3/&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;j_acegi_cas_security_check&amp;amp;lang=eng&amp;amp;scope=3&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;requests_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;requests_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;a href=&amp;#39;/holds&amp;#39;&amp;gt;holds&amp;lt;/a&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;requests_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;/holds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;table class=&amp;quot;patFunc&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;tr class=&amp;quot;patFuncHeaders&amp;quot;&amp;gt;&amp;lt;th&amp;gt; TITLE &amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;STATUS&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;tr class=&amp;quot;patFuncEntry&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;td class=&amp;quot;patFuncTitle&amp;quot;&amp;gt;Blood heir / Amélie Wen Zhao&amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;                &amp;lt;td class=&amp;quot;patFuncStatus&amp;quot;&amp;gt; 9 of 83 holds &amp;lt;/td&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;            &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_card&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WPL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;check_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check_result&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;holds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;check_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;holds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; 9 of 83 holds &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Blood heir / Amélie Wen Zhao&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;tests/unit/test_wpl.ca&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This passes just as in its previous iteration, even after I made the test more
specific. Since I control the &amp;quot;response from the library&amp;quot;, I can expect a
particular held item to be present. In the future, this will allow me to easily
verify that holds with different statuses, such as &amp;quot;in transit&amp;quot; or &amp;quot;missing&amp;quot; are
reported properly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-note-on-mocking-styles"&gt;
&lt;h2&gt;A note on mocking styles&lt;/h2&gt;
&lt;p&gt;As a maintainer of the
&lt;a href="https://fakeiteasy.github.io/"&gt;third most popular and first best .NET mocking framework&lt;/a&gt;,
I have opinions on mocking practices. For one, I generally advise against
&lt;a href="https://www.geeksforgeeks.org/monkey-patching-in-python-dynamic-behavior/"&gt;monkey patching&lt;/a&gt;
or anything else that seems like magic. I've worked in environments where these
effects were abused, and tests became very difficult to debug.&lt;/p&gt;
&lt;p&gt;The new test relies on a magically-provided &lt;code&gt;requests_mock&lt;/code&gt; object, and
actions on that object affect the functioning of the &lt;code&gt;requests&lt;/code&gt; module. This
gave me pause. Ultimately, I decided to go with it, for two reasons. First, the
&lt;a href="https://docs.pytest.org/en/latest/fixture.html"&gt;pytest fixtures&lt;/a&gt; have
well-known behaviour and should undo the &lt;code&gt;requests_mock&lt;/code&gt;'s changes after every
test function. Second, the actual monkey patching is too convenient to not try.
I toyed with the idea of adding a fixture that created a new session, had
requests-mock intercept only that, and then pass both those objects to each
test, and it just seemed like too much work for the benefit. Hopefully, as sole
maintainer on LibraryHippo, I'll be able to keep a handle on the magic mocking.
If not, I can always fall back to a more explicit style.&lt;/p&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="LibraryHippo"></category><category term="requests-mock"></category><category term="testing"></category></entry><entry><title>Why I Teach Git Using Only the Command Line</title><link href="https://blairconrad.com/2020/06/04/why-i-teach-git-using-only-the-command-line/" rel="alternate"></link><published>2020-06-04T00:00:00-04:00</published><updated>2020-06-04T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-06-04:/2020/06/04/why-i-teach-git-using-only-the-command-line/</id><summary type="html">&lt;p&gt;At the Day Job, we're about to transition something like 150 Subversion repos to
a single git monorepo. Part of my contribution will be training several tens of
git-unaware developers in my office on the basics of working with git.&lt;/p&gt;
&lt;p&gt;I was chatting about training approaches with my counterpart in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the Day Job, we're about to transition something like 150 Subversion repos to
a single git monorepo. Part of my contribution will be training several tens of
git-unaware developers in my office on the basics of working with git.&lt;/p&gt;
&lt;p&gt;I was chatting about training approaches with my counterpart in another office
(which already has a higher level of git experience) and he mentioned that his
local colleagues are committed (sorry) to using Tortoise SVN and similar tools,
and he wondered how I was going to handle GUI vs. CLI training.&lt;/p&gt;
&lt;p&gt;I figured I'd have to address that question a few times in the coming weeks, so
I decided to write it down here.&lt;/p&gt;
&lt;section id="all-command-line"&gt;
&lt;h2&gt;All Command Line&lt;/h2&gt;
&lt;p&gt;As the title of this article hints, the answer to my colleague's question is
that I plan on handling GUI training by not doing any at all. I anticipate this
will be less than popular with my trainees, many of whom I know love their File
Explorer extensions for interfacing with Subversion. However, I have three
reasons for potentially disappointing them.&lt;/p&gt;
&lt;section id="too-many-guis-to-choose-from"&gt;
&lt;h3&gt;Too many GUIs to choose from&lt;/h3&gt;
&lt;p&gt;First, if I did use a GUI tool to train the users, which one? Off the top of my
head, I can think of &lt;a href="https://tortoisegit.org/"&gt;TortoiseGit&lt;/a&gt;,
&lt;a href="https://www.sourcetreeapp.com/"&gt;SourceTree&lt;/a&gt;,
&lt;a href="https://www.gitkraken.com/"&gt;GitKraken&lt;/a&gt;, &lt;a href="https://git-fork.com/"&gt;fork&lt;/a&gt;, and
systems embedded into the three popular editors in the office: Visual Studio
Code, Eclipse, and IntelliJ. The time required to develop and execute a plan for
even half of these is prohibitive, and picking just one isn't going to
appease near everyone.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="lack-of-tool-knowledge"&gt;
&lt;h3&gt;Lack of tool knowledge&lt;/h3&gt;
&lt;p&gt;Even if I did choose one or two GUI tools to focus on, hoping that I'd cover an
overlapping subset that would make most people happy, I'd have to learn how to
use the tools. It's been quite a while since I used a GUI tool (I enjoyed
GitKraken for a while, mostly because it's so pretty), and I'd need at least a
refresher, and potentially to completely retrain myself. I've never touched the
source control integration in Visual Studio Code, for example, despite using
that editor &lt;em&gt;right now&lt;/em&gt;, with an intent to add this file to git.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="guis-lack-transparency"&gt;
&lt;h3&gt;GUIs lack transparency&lt;/h3&gt;
&lt;p&gt;Finally, I've seen people use GUI git tools when they get started working with
git. I watched me do it. I don't think it helps. Having a pretty graphical view
of the commits is enjoyable, and being able to pick a few popular actions from a
menu helps the novice accomplish simple tasks, but after that the GUI becomes a
barrier to learning.&lt;/p&gt;
&lt;p&gt;A number of the GUI tools handle housekeeping tasks, such as fetching from
remotes, for users. Or they perform so many background operations per explicit
action that the user takes, that they introduce confusion. I've several times
been called to my (smaller, informally introduced to git) team members' desks
and been asked what happened to their commit graph. Poring over the
incomprehensible snarl, I ask &amp;quot;what did you do?&amp;quot;. They either point at some
confusingly-named action in a menu or say they picked some option from the menu,
they don't remember which.&lt;/p&gt;
&lt;p&gt;By having developers actually type commands to fetch updates, switch branches,
commit, and rebase (and to constantly &lt;code&gt;git log --graph --decorate --all&lt;/code&gt; after
each repository-modifying command), I'm hoping it will force them to think about
their actions and to develop a sense of how the git graphs change. Ideally they
will know what commands to execute to perform a particular task, or be able to
determine compensating actions to repair mistakes.&lt;/p&gt;
&lt;p&gt;Or if things go horribly wrong, at least I'll be able to have them scroll up
through their command history to answer &amp;quot;what did you &lt;em&gt;do&lt;/em&gt;?&amp;quot;.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="git"></category></entry><entry><title>LibraryHippo 2020 - Recap and decision</title><link href="https://blairconrad.com/2020/05/21/libraryhippo-2020-recap-and-decision/" rel="alternate"></link><published>2020-05-21T00:00:00-04:00</published><updated>2020-05-21T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-05-21:/2020/05/21/libraryhippo-2020-recap-and-decision/</id><summary type="html">&lt;p&gt;In each of last six articles I've satisfied one of the high-risk requirements I
had for moving LibraryHippo to the Flask framework, with the goal of hosting it
on Heroku. This leaves three &amp;quot;softer&amp;quot; requirements open, which I'll address
here.&lt;/p&gt;
&lt;p&gt;(Aside: It feels a little weird working on this conversion …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In each of last six articles I've satisfied one of the high-risk requirements I
had for moving LibraryHippo to the Flask framework, with the goal of hosting it
on Heroku. This leaves three &amp;quot;softer&amp;quot; requirements open, which I'll address
here.&lt;/p&gt;
&lt;p&gt;(Aside: It feels a little weird working on this conversion while my local
libraries (and many others across the world) are closed due to the 2019–2020
coronavirus pandemic. I'm unable to take books out or put them on hold for
testing purposes, and it's not clear when the libraries will reopen. And maybe
I'll be reluctant to borrow library materials for a while after they do open.
Still, I'm hopeful that the libraries will return to normal, and in the meantime
this is a fun project, so I might as well continue the series.)&lt;/p&gt;
&lt;section id="remaining-requirements"&gt;
&lt;h2&gt;Remaining requirements&lt;/h2&gt;
&lt;section id="custom-domains"&gt;
&lt;h3&gt;Custom domains&lt;/h3&gt;
&lt;p&gt;All levels of Heroku plans support custom domain names. They don't offer free
SSL , but LibraryHippo's been getting along well enough without SSL to this
point, so I might as well continue. And it looks like
&lt;a href="https://www.cloudflare.com/en-ca/ssl/"&gt;Cloudflare&lt;/a&gt; offers SSL for free, so
that may be an option in the future.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="job-queues"&gt;
&lt;h3&gt;Job queues&lt;/h3&gt;
&lt;p&gt;I'd used job queues on Google App Engine because each job's execution time was
capped at 30 seconds or so. It wasn't always possible to check even all the
cards for a single family in that time, so each card check was queued
separately. I've simulated a long-running job on Heroku with no problem, so the
job queue probably isn't necessary.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="cheap-hosting"&gt;
&lt;h3&gt;Cheap hosting&lt;/h3&gt;
&lt;p&gt;I don't intend to make any money with LibraryHippo, and while I enjoy it, I
don't want to pour hundreds (or even several tens) of dollars into it every
year. Everything I've tried so far has been done on a Heroku free dyno, and it
looks like it'll continue to meet my needs.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="next-steps"&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;
&lt;p&gt;I feel good about meeting my requirements, so I'm going to continue converting the
application. Part of this will be fleshing out the skeleton that's there now;
for example, the library site scraping is nowhere near as robust as the current
LibraryHippo, and the site looks &lt;em&gt;terrible&lt;/em&gt;. The remaining work will be adding
the features and underpinnings that are missing, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;family management&lt;/li&gt;
&lt;li&gt;card management&lt;/li&gt;
&lt;li&gt;automated tests on the backend&lt;/li&gt;
&lt;li&gt;migrating users from the old application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these steps may warrant a blog post, and some might not. We'll see how
it goes.&lt;/p&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="LibraryHippo"></category><category term="flask"></category></entry><entry><title>LibraryHippo 2020 - Social Login</title><link href="https://blairconrad.com/2020/05/07/libraryhippo-2020-social-login/" rel="alternate"></link><published>2020-05-07T00:00:00-04:00</published><updated>2020-05-07T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-05-07:/2020/05/07/libraryhippo-2020-social-login/</id><summary type="html">&lt;p&gt;I now have a functioning skeleton of a shadow LibraryHippo site. The last gaping
hole is that it treats every visitor the same. We need to be able to distinguish
one user from the next and to retain information about them between visits, such
as which family they belong to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I now have a functioning skeleton of a shadow LibraryHippo site. The last gaping
hole is that it treats every visitor the same. We need to be able to distinguish
one user from the next and to retain information about them between visits, such
as which family they belong to.&lt;/p&gt;
&lt;p&gt;Rather than have users create new login identities and passwords (and worry
about securely storing those passwords), I'm going to use social logins. The old
LibraryHippo application supported login via a Google account, and I'll do the
same here, while leaving the door open to add other vectors in the future.&lt;/p&gt;
&lt;section id="new-requirements"&gt;
&lt;h2&gt;New Requirements&lt;/h2&gt;
&lt;p&gt;We'll need new software to perform the authentication and user management. The
&lt;a href="https://flask-login.readthedocs.io/en/latest/"&gt;Flask-Login&lt;/a&gt; package adds
support for storing user objects and managing their sessions, and
&lt;a href="https://authomatic.github.io/authomatic/"&gt;Authomatic&lt;/a&gt; simplifies
authentication via OAuth2 providers such as Google (and many more). Install them
both:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Flask-Login&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Authomatic&lt;/span&gt;
&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="register-with-google"&gt;
&lt;h2&gt;Register with Google&lt;/h2&gt;
&lt;p&gt;Google requires applications using it as an OAuth provider to register and
obtain credentials which must be presented when authenticating users. I visit
the
&lt;a href="https://console.developers.google.com/apis/dashboard"&gt;APIs &amp;amp; Services Dashboard&lt;/a&gt;,
create a new project, and add a new Web application OAuth Client ID. I added 3
Authorised redirect URIs, which are the URIs that lead to the Flask route that
will handle login. Authomatic sends its current URI to Google when
authenticating, and Google redirects back to the URI (with an additional token)
after authenticating the user. As a security measure, Google will only redirect
back to known URIs.&lt;/p&gt;
&lt;p&gt;I added&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="m-link-wrap" href="http://localhost:5000/login/google/"&gt;http://localhost:5000/login/google/&lt;/a&gt; (for testing locally)&lt;/li&gt;
&lt;li&gt;&lt;a class="m-link-wrap" href="https://libraryhippo.herokuapp.com/login/google/"&gt;https://libraryhippo.herokuapp.com/login/google/&lt;/a&gt; (for when I deploy to Heroku), and&lt;/li&gt;
&lt;li&gt;&lt;a class="m-link-wrap" href="http://libraryhippo.com/login/google/"&gt;http://libraryhippo.com/login/google/&lt;/a&gt; (for when I eventually point the domain name to Heroku)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and was rewarded with a &lt;em&gt;Client ID&lt;/em&gt; and a &lt;em&gt;Client secret&lt;/em&gt;, which are needed by Authomatic.&lt;/p&gt;
&lt;p&gt;I also configured the OAuth consent screen, which controls what users see when
they are redirected to Google. I added an application name and Application logo.
Since we only need to identify a user, I left the scopes limited to the minimum:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;profile, and&lt;/li&gt;
&lt;li&gt;openid&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't have an Application Privacy Policy link, so left it blank. This seems to
prevent me from &amp;quot;verifying&amp;quot; the application. So far it hasn't been an issue for
testing, but I'll keep an eye on it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="new-configuration"&gt;
&lt;h2&gt;New Configuration&lt;/h2&gt;
&lt;p&gt;Authomatic knows a lot about its underlying providers, but still needs to be
told about the Client ID and Client secret obtained above. I'll add those to the
&lt;code&gt;secrets&lt;/code&gt; file.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;OAUTH_GOOGLE_CLIENT_ID&lt;/span&gt;&lt;span class="o"&gt;=********.&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;googleusercontent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;OAUTH_GOOGLE_CLIENT_SECRET&lt;/span&gt;&lt;span class="o"&gt;=********&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;secrets&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Of course these need to be provided to the application through the &lt;code&gt;Config&lt;/code&gt; class:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;authomatic.providers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;oauth2&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="n"&gt;OAUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;google&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;class_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;oauth2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Google&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;consumer_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OAUTH_GOOGLE_CLIENT_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;consumer_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OAUTH_GOOGLE_CLIENT_SECRET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;MeF+3?N&amp;#39;,Nmsn39v]&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;config.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This will tell Authomatic that there's a provider named &amp;quot;google&amp;quot; that is a
Google provider, and what the consumer ID and secret are. The &amp;quot;scope&amp;quot; entry in
the dictionary controls what Authomatic asks for from Google. If I don't specify
this, it won't load the user's email.&lt;/p&gt;
&lt;p&gt;The other new entry, &lt;code&gt;SECRET_KEY&lt;/code&gt;, is a
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/config/#SECRET_KEY"&gt;Flask concept&lt;/a&gt;
that's used to sign its session cookie. It should be treated as a secret; the
default value is just supplied to make local testing easier.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-user-model"&gt;
&lt;h2&gt;The User Model&lt;/h2&gt;
&lt;p&gt;Flask-Login will persist to any backing store, but the database makes the most
sense for LibraryHippo. The new &lt;code&gt;User&lt;/code&gt; model will store the details of the
users that have been registered (by logging in):&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="n"&gt;login_manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LoginManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;__init__.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;login_manager&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserMixin&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserMixin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;social_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nickname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@login_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loader&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/models.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;load_user&lt;/code&gt; function is registered as the Flask-Login &amp;quot;user_loader&amp;quot;.
Flask-Login will ensure that there's information in the session that can
identify the active user and will use the function to load the rest of the user
information from the database.&lt;/p&gt;
&lt;p&gt;Of course the new model has to be added via SQLAlchemy:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="n"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Add User model&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="the-main-event-log-a-user-in"&gt;
&lt;h2&gt;The main event - log a user in&lt;/h2&gt;
&lt;p&gt;The above has been prepatory work to allow LibraryHippo to authenticate a user
via Google, log them into Flask, and save a user record to the database.&lt;/p&gt;
&lt;p&gt;First, I add an &lt;code&gt;Authomatic&lt;/code&gt; instance to &lt;cite&gt;app&lt;/cite&gt;, initializing it with the OAuth
configuration and secret key I set up earlier:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dictConfig&lt;/span&gt;
&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="n"&gt;authomatic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Authomatic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/__init__.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now add the login route, which will contain a segment for the Google provider:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;login_user&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;authomatic.adapters&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WerkzeugAdapter&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;authomatic&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;

&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/login/&amp;lt;provider&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_anonymous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authomatic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;WerkzeugAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;provider_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;session_saver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authentication failed.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Authentication failed: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;social_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;social_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;social_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;social_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;social_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nickname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;login_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/routes.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There's a lot going on here. The gist is that if the current user is logged in,
the &lt;code&gt;login&lt;/code&gt; route just redirects to the main page; there's no need to login if
someone's already logged in.&lt;/p&gt;
&lt;p&gt;Otherwise, Authomatic attempts to log the user in, via the &lt;code&gt;WerkzeugAdapter&lt;/code&gt;,
which lets it manipulate the HTTP request and response to direct the flow of the
application. It's given the current Flask session as well as a callback it can
use to save the session. Once that succeeds, the user is &amp;quot;updated&amp;quot; to fill in
extra information such as their name and e-mail address.&lt;/p&gt;
&lt;p&gt;Then the method attempts to load the user from the database, looking them up by
combining the provider name and the ID assigned by the provider. If no record
exists, one is created and saved back to the database for the future. Finally,
the user is logged into Flask.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="logging-out"&gt;
&lt;h2&gt;Logging out&lt;/h2&gt;
&lt;p&gt;Once users are logged in, they might want to log out, maybe so another user can
check their library cards. This is much easier than the login process. Again, I
add a new route:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_login&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;logout_user&lt;/span&gt;

&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;current_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_anonymous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;logout_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/routes.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It just calls Flask's &lt;code&gt;logout_user&lt;/code&gt; if the user isn't logged in. Then they're
redirected to the main page.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="add-login-logout-links"&gt;
&lt;h2&gt;Add login/logout links&lt;/h2&gt;
&lt;p&gt;Users will need a way to initiate the login process, or to log out if they're
already logged in, and these links should be available from every page, so I'll
replace my ad hoc page generation with templates that will centralize those
functions.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="x"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;title&amp;gt;LibraryHippo&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;nav&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;current_user.is_anonymous&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;login&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;provider&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;google&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;Login&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;url_for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logout&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&amp;gt;Logout &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;current_user.nickname&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/templates/base.jinja&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;base.jinja&lt;/code&gt; template sets up common elements to all the pages of the
application. Here it checks to see if the user is logged in. If not, it includes
a link to the login route, and if so, a link to the logout route. The logout
link includes the user's nickname, mostly to make it easier for me to test.
The main page has not much to add, so its template is very plain for now:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;base.jinja&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;h1&amp;gt;LibraryHippo 2020&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/templates/index.jinja&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then the index route is updated to use the template:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;

&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.jinja&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/routes.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="how-s-it-look"&gt;
&lt;h2&gt;How's it look?&lt;/h2&gt;
&lt;p&gt;From a not-logged-in account, I visit my local LibraryHippo instance:&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of LibraryHippo when the user is not logged in" src="https://blairconrad.com/2020/05/07/libraryhippo-2020-social-login/lh-not-logged-in.png" /&gt;
&lt;figcaption&gt;LibraryHippo when the user is not logged in&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The new &amp;quot;Login&amp;quot; navigation link appears. When I click it, I'm taken to a
Google-hosted page where I can select the account I want to use. This screen
will vary depending on whether I'm already logged into Google, and with how many
accounts. Note that it indicates what Google account-specific information will
be shared with LibraryHippo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;email address&lt;/li&gt;
&lt;li&gt;language preference (which LibraryHippo doesn't use), and&lt;/li&gt;
&lt;li&gt;profile picture (which LibraryHippo doesn't use)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of Google asking the user to choose an account to use for login" src="https://blairconrad.com/2020/05/07/libraryhippo-2020-social-login/lh-google-choose-account.png" /&gt;
&lt;figcaption&gt;Google asking the user to choose an account to use for login&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And finally once I'm logged in, the &amp;quot;Login&amp;quot; link becomes a &amp;quot;Logout&amp;quot; link,
including my name, which was harvested from Google.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of LibraryHippo when the user is logged in" src="https://blairconrad.com/2020/05/07/libraryhippo-2020-social-login/lh-logged-in.png" /&gt;
&lt;figcaption&gt;LibraryHippo when the user is logged in&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="deploying-to-heroku"&gt;
&lt;h2&gt;Deploying to Heroku&lt;/h2&gt;
&lt;p&gt;There almost nothing to this. I already added the Heroku-specific URL to the
Google configuration, so I just have to generate a &lt;code&gt;SECRET_KEY&lt;/code&gt; and set
it and the &lt;code&gt;OAUTH_GOOGLE_CLIENT_*&lt;/code&gt; values from earlier.&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;OAUTH_GOOGLE_CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;OAUTH_GOOGLE_CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="progress"&gt;
&lt;h2&gt;Progress&lt;/h2&gt;
&lt;p&gt;Six of nine requirements have been met!&lt;/p&gt;
&lt;table class="m-table"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;web app hosting&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scheduled jobs (run in UTC)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scraping library websites on users' behalf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;small persistent datastore&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;social authentication&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;sending e-mail&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;nearly free&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;job queues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;custom domain name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="LibraryHippo"></category><category term="flask"></category><category term="login"></category><category term="authomatic"></category></entry><entry><title>LibraryHippo 2020 - A Small Heroku Datastore</title><link href="https://blairconrad.com/2020/04/23/libraryhippo-2020-a-small-heroku-datastore/" rel="alternate"></link><published>2020-04-23T00:00:00-04:00</published><updated>2020-04-23T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-04-23:/2020/04/23/libraryhippo-2020-a-small-heroku-datastore/</id><summary type="html">&lt;p&gt;Now the Heroku-hosted LibraryHippo can perform periodic tasks, send e-mails, and
scrape the Waterloo Public Library's website. All it needs is a datastore to tie
these concepts together into a decoupled &amp;quot;push card status to patrons&amp;quot; pipeline.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Now the Heroku-hosted LibraryHippo can perform periodic tasks, send e-mails, and
scrape the Waterloo Public Library's website. All it needs is a datastore to tie
these concepts together into a decoupled &amp;quot;push card status to patrons&amp;quot; pipeline.&lt;/p&gt;
&lt;section id="move-rendering-out-of-library"&gt;
&lt;h2&gt;Move rendering out of library&lt;/h2&gt;
&lt;p&gt;Last time, the &lt;code&gt;WPL.check_card&lt;/code&gt; method scraped a patron's holds and checkouts,
and rendered them as HTML for display to the user. It would be better to have
the library build a data structure, which can be stored for later use or
rendered by the web app.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;summary_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;holds_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;summary_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/holds$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;checkouts_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;summary_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/items$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;holds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_holds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holds_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;checkouts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_checkouts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkouts_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;holds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;holds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;checkouts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;checkouts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/libraries/wpl.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&amp;quot;Data structure&amp;quot; is maybe too fancy a term for &amp;quot;dictionary with two values&amp;quot;, but
it's a start.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/check&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;card_check_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WPL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PATRON_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CARD_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIN&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Holds&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;card_check_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;holds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;dl&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{k}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{v}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dd&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/dl&amp;gt;&amp;lt;hr&amp;gt;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Checkouts&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;card_check_result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkouts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;dl&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{k}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{v}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dd&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/dl&amp;gt;&amp;lt;hr&amp;gt;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/routes.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="create-a-local-database"&gt;
&lt;h2&gt;Create a local database&lt;/h2&gt;
&lt;p&gt;Flask doesn't come with a database of its own, like some web frameworks, but
there's an extension,
&lt;a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/"&gt;Flask-SQLAlchemy&lt;/a&gt;, that
helps it work with the &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; Object
Relational Mapper. These will let LibraryHippo interact with databases both
locally and on Heroku. It's good practice to track changes to the database
schema using &lt;a href="https://github.com/miguelgrinberg/flask-migrate"&gt;Flask-Migrate&lt;/a&gt;,
so I'll install that as well.&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Flask-SQLAlchemy&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Flask-Migrate&lt;/span&gt;
&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Flask needs some configuration settings to access the database.
&lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; describes how the application can contact the
database. In this case, there's a reasonable default, a local SQLite instance.
The &lt;code&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/code&gt; setting will keep the database from
signalling the application whenever the database content changes.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# …&lt;/span&gt;
    &lt;span class="c1"&gt;# Remove PATRON_NAME, CARD_NUMBER, and PIN, as they&amp;#39;ll move to the database&lt;/span&gt;

    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;DATABASE_URL&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sqlite:///&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app.db&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;config.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then the application needs to be taught about the database and migration facilities:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;# …&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_migrate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="c1"&gt;# …&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/__init__.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="add-a-card"&gt;
&lt;h2&gt;Add a Card&lt;/h2&gt;
&lt;p&gt;The application now has the ability to talk to the database, but there's no
schema defined. Let's add a model and insert a record.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;patron_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;pin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;last_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;Patron &lt;/span&gt;&lt;span class="si"&gt;{self.patron_name}&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/__init__.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Every model gets an &lt;code&gt;id&lt;/code&gt;, for convenience, and the next 3 fields will be
familiar from the previous article—they identify the card and control access to
the library card state. The last field, &lt;code&gt;last_state&lt;/code&gt;, will be used to record
the last-checked card state. It'll hold a JSON-formatted version of the
dictionary that appears above.&lt;/p&gt;
&lt;section id="initialize-the-database"&gt;
&lt;h3&gt;Initialize the database&lt;/h3&gt;
&lt;p&gt;Now initialize a schemaless database, add the first migration script for the
&lt;code&gt;Card&lt;/code&gt; model, and actually upgrade the database schema:&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="n"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Add Card model&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;Creating directory D:\Sandbox\LibraryHippo\migrations ...  done
Creating directory D:\Sandbox\LibraryHippo\migrations\versions ...  done
Generating D:\Sandbox\LibraryHippo\migrations\alembic.ini ...  done
Generating D:\Sandbox\LibraryHippo\migrations\env.py ...  done
Generating D:\Sandbox\LibraryHippo\migrations\README ...  done
Generating D:\Sandbox\LibraryHippo\migrations\script.py.mako ...  done
Please edit configuration/connection/logging settings in &amp;#39;D:\\Sandbox\\LibraryHippo\\migrations\\alembic.ini&amp;#39; before proceeding.

Generating D:\Sandbox\LibraryHippo\migrations\versions\b2fc8df2f32f_add_card_model.py ...  done&lt;/pre&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="insert-a-card-into-the-database"&gt;
&lt;h3&gt;Insert a card into the database&lt;/h3&gt;
&lt;p&gt;Normally cards would be added to the database by the users, via a fancy form. For now, the &lt;code&gt;flask shell&lt;/code&gt; will do.&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b293b6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dec&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MSC&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1916&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Intel&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;win32&lt;/span&gt;
&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Sandbox&lt;/span&gt;\&lt;span class="n"&gt;LibraryHippo&lt;/span&gt;\&lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patron_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Blair Conrad&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123456789&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;9876&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Patron&lt;/span&gt; &lt;span class="n"&gt;Blair&lt;/span&gt; &lt;span class="n"&gt;Conrad&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="load-the-card-from-the-database-and-store-the-check-results"&gt;
&lt;h2&gt;Load the card from the database and store the check results&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Config&lt;/code&gt; class no longer has the hard-coded patron name, card number, and
PIN values added last time, so the &lt;code&gt;check&lt;/code&gt; route must load them from the
database and save the result back onto the card:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;# …&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;

&lt;span class="c1"&gt;# …&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/check&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# a hack - we know there&amp;#39;s only 1 card for now&lt;/span&gt;
    &lt;span class="n"&gt;card_check_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WPL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card_check_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# rendering code…&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/routes.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The stored result can be seen by querying the database via &lt;code&gt;flask shell&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;8.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;b293b6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dec&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;39&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MSC&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1916&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="n"&gt;bit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Intel&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;win32&lt;/span&gt;
&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;\&lt;span class="n"&gt;Sandbox&lt;/span&gt;\&lt;span class="n"&gt;LibraryHippo&lt;/span&gt;\&lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_state&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;holds&amp;quot;: [{&amp;quot;Title&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;nBlood heir / Am&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;u00e9lie Wen Zhao&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&amp;quot;, &amp;quot;Status&amp;quot;: &amp;quot; 2 of 2 holds &amp;quot;, &amp;quot;Pickup&amp;quot;: &amp;quot;WPL McCormick Branch&amp;quot;, &amp;quot;Cancel&amp;quot;: &amp;quot;09-17-20&amp;quot;, &amp;quot;Freeze&amp;quot;: true}, {&amp;quot;Title&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;nEducated : a memoir / Tara Westover&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&amp;quot;, &amp;quot;Status&amp;quot;: &amp;quot; 1 of 2 holds &amp;quot;, &amp;quot;Pickup&amp;quot;: &amp;quot;WPL McCormick Branch&amp;quot;, &amp;quot;Cancel&amp;quot;: &amp;quot;09-28-20&amp;quot;, &amp;quot;Freeze&amp;quot;: true}, {&amp;quot;Title&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;nCoders : the making of a new tribe and the remaking of the world / Clive Thompson&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&amp;quot;, &amp;quot;Status&amp;quot;: &amp;quot; 1 of 1 holds &amp;quot;, &amp;quot;Pickup&amp;quot;: &amp;quot;WPL McCormick Branch&amp;quot;, &amp;quot;Cancel&amp;quot;: &amp;quot;10-16-20&amp;quot;, &amp;quot;Freeze&amp;quot;: true}, {&amp;quot;Title&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;nBecoming Superman : my journey from poverty to Hollywood : with stops along the way at murder, mayhem, movie stars, cults, slums, sociopaths, and war crimes / J. Michael Straczynski ; introduction by Neil Gaiman&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&amp;quot;, &amp;quot;Status&amp;quot;: &amp;quot; 1 of 1 holds &amp;quot;, &amp;quot;Pickup&amp;quot;: &amp;quot;WPL McCormick Branch&amp;quot;, &amp;quot;Cancel&amp;quot;: &amp;quot;11-02-20&amp;quot;, &amp;quot;Freeze&amp;quot;: true}, {&amp;quot;Title&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;nBatman : Creature of the Night / illustrated by John Paul Leon.&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;n&amp;quot;, &amp;quot;Status&amp;quot;: &amp;quot; 4 of 6 holds &amp;quot;, &amp;quot;Pickup&amp;quot;: &amp;quot;WPL McCormick Branch&amp;quot;, &amp;quot;Cancel&amp;quot;: &amp;quot;11-06-2&lt;/span&gt;&lt;/pre&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="use-the-stored-card-check-result-to-send-e-mail"&gt;
&lt;h2&gt;Use the stored card check result to send e-mail&lt;/h2&gt;
&lt;p&gt;Now that the database contains the result of the last card status check, it's
relatively straightforward to include that text in the notification e-mails. All
that's required is to load the card record, deserialize the saved state using
&lt;code&gt;json.loads&lt;/code&gt;, and build the HTML:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;# …&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="c1"&gt;# …&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;notify-all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notify_all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# a hack - we know there&amp;#39;s only 1 card for now&lt;/span&gt;
        &lt;span class="n"&gt;last_card_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Holds&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;last_card_state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;holds&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;dl&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{k}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{v}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dd&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/dl&amp;gt;&amp;lt;hr&amp;gt;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Checkouts&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;last_card_state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;checkouts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;dl&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{k}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{v}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dd&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;html_body&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/dl&amp;gt;&amp;lt;hr&amp;gt;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;LibraryHippo starting notifications&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blair@blairconrad.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;starting notifications at &lt;/span&gt;&lt;span class="si"&gt;{now}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html_body&lt;/span&gt;

        &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# …&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/cli.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="deploy-to-heroku"&gt;
&lt;h2&gt;Deploy to Heroku&lt;/h2&gt;
&lt;p&gt;There's nothing left to do but try this out on Heroku. It shouldn't be too much work.&lt;/p&gt;
&lt;section id="add-and-configure-a-database-plugin"&gt;
&lt;h3&gt;Add and configure a database plugin&lt;/h3&gt;
&lt;p&gt;Heroku has a free hobby-tier PostgreSQL addon that you can add on right from the command line:&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;addons&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;heroku-postgresql&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hobby-dev&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;Creating heroku-postgresql:hobby-dev on ⬢ libraryhippo... free
Database has been created and is available
! This database is empty. If upgrading, you can transfer
! data from another database with pg:copy
Created ·················· as DATABASE_URL
Use heroku addons:docs heroku-postgresql to view documentation&lt;/pre&gt;
&lt;/figure&gt;
&lt;p&gt;The addon sets the &lt;code&gt;DATABASE_URL&lt;/code&gt; environment variable, which
is the one that the &lt;code&gt;Config.SQLALCHEMY_TRACK_MODIFICATIONS&lt;/code&gt; attribute is
populated from.&lt;/p&gt;
&lt;p&gt;SQLAlchemy needs a bonus &lt;code&gt;psycopg2&lt;/code&gt; package to connect to the database, and
there's no harm in having it installed when I'm testing locally, so I'll just
add it to &lt;code&gt;requirements.txt&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;
&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Finally, the application startup should perform the database migration, to react
to any new model changes. This requires an extra command before starting gunicorn:&lt;/p&gt;
&lt;pre class="m-code"&gt;web: flask db upgrade; gunicorn libraryhippo:app&lt;/pre&gt;
&lt;p&gt;And the only thing left to do is deploy.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="store-a-library-card"&gt;
&lt;h3&gt;Store a library card&lt;/h3&gt;
&lt;p&gt;I'll store the library card to the PostgreSQL database just as with the local
sqlite instance. The only difference is that instead of running &lt;code&gt;flask shell&lt;/code&gt;
directly, I use Heroku's facility to run a one-off command via &lt;code&gt;heroku run&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="err"&gt;❯&lt;/span&gt; &lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="n"&gt;Running&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="err"&gt;⬢&lt;/span&gt; &lt;span class="n"&gt;libraryhippo&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;4950&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Free&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mf"&gt;3.8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Dec&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;04&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GCC&lt;/span&gt; &lt;span class="mf"&gt;7.4&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;linux&lt;/span&gt;
&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;production&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patron_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Blair Conrad&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;123456789&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;9876&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Patron&lt;/span&gt; &lt;span class="n"&gt;Blair&lt;/span&gt; &lt;span class="n"&gt;Conrad&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;With that done, there was no need to keep the old environment variables that encoded my library credentials, so I removed them:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;unset&lt;/span&gt; &lt;span class="n"&gt;PATRON_NAME&lt;/span&gt; &lt;span class="n"&gt;CARD_NUMBER&lt;/span&gt; &lt;span class="n"&gt;PIN&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="wait-for-the-e-mail"&gt;
&lt;h3&gt;Wait for the e-mail&lt;/h3&gt;
&lt;p&gt;And that's it. I did visit &lt;code&gt;/check&lt;/code&gt; on the website to ensure there was a
cached card status, and there was nothing else to do but wait until 18:30 local
time to see everything work together. Sure enough, the task woke up, read the
stored data, and used it in the e-mail:&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of notification e-mail sent from Heroku using stored card status" src="https://blairconrad.com/2020/04/23/libraryhippo-2020-a-small-heroku-datastore/heroku-notification-using-stored-status.png" /&gt;
&lt;figcaption&gt;Notification e-mail sent from Heroku using stored card status&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="progress"&gt;
&lt;h2&gt;Progress&lt;/h2&gt;
&lt;p&gt;Five of nine requirements have been met!&lt;/p&gt;
&lt;table class="m-table"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;web app hosting&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scheduled jobs (run in UTC)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scraping library websites on users' behalf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;small persistent datastore&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-primary"&gt;next&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;social authentication&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;sending e-mail&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;nearly free&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;job queues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;custom domain name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="LibraryHippo"></category><category term="flask"></category><category term="heroku"></category><category term="database"></category></entry><entry><title>LibraryHippo 2020 - Scraping Library Websites</title><link href="https://blairconrad.com/2020/04/09/libraryhippo-2020-scraping-library-websites/" rel="alternate"></link><published>2020-04-09T00:00:00-04:00</published><updated>2020-04-09T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-04-09:/2020/04/09/libraryhippo-2020-scraping-library-websites/</id><summary type="html">&lt;p&gt;Now that the toy LibraryHippo on Heroku is sending periodic e-mails, it's time
to provide it with meaningful content to send, by having it scrape a library's
website. This should be relatively straightforward, but there's some risk as
it's not an operation covered in
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The production application …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Now that the toy LibraryHippo on Heroku is sending periodic e-mails, it's time
to provide it with meaningful content to send, by having it scrape a library's
website. This should be relatively straightforward, but there's some risk as
it's not an operation covered in
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The production application gathers information from libraries using a
combination of App Engine's custom
&lt;a href="https://cloud.google.com/appengine/docs/standard/python/issue-requests"&gt;URL Fetch service&lt;/a&gt;,
an older version of the
&lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt; HTML parser
(which had to be copied into the application source), and some glue that I
wrote. Today I'll try to replicate that using modern, commodity components.&lt;/p&gt;
&lt;section id="gathering-requirements"&gt;
&lt;h2&gt;Gathering requirements&lt;/h2&gt;
&lt;p&gt;I've heard that the &lt;a href="https://requests.readthedocs.io/en/master/"&gt;Requests&lt;/a&gt;
library is a feature-rich and popular library for sending HTTP requests. Knowing
no more than that, I'll try it. Beautiful Soup has worked very well for me in
the past, but has had a number of significant releases since the version I've
used, so I'll try the latest, 4.8.2 as I write.&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup4&lt;/span&gt;
&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="library-credential-management"&gt;
&lt;h2&gt;Library Credential Management&lt;/h2&gt;
&lt;p&gt;Library websites don't allow unfettered access to their patrons' records, thank
goodness, so it'll be necessary to use at least one patron's credentials during
the &amp;quot;scraping&amp;quot; test. I don't want to embed my credentials in the application
source code, so they have to be stored somewhere else. Had I already integrated
a permanent datastore and implement user management, the credentials would be
tied to the LibraryHippo user's account, but for now I'll read them from
environment variables that I'll save in the &lt;code&gt;secrets&lt;/code&gt; file established in
&lt;a href="https://blairconrad.com/2020/03/05/libraryhippo-2020-sending-email-from-heroku/"&gt;Sending Email from Heroku&lt;/a&gt;.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;# …&lt;/span&gt;
&lt;span class="n"&gt;PATRON_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;Blair&lt;/span&gt; &lt;span class="n"&gt;Conrad&lt;/span&gt;
&lt;span class="n"&gt;CARD_NUMBER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;123456789&lt;/span&gt;
&lt;span class="n"&gt;PIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9876&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;secrets&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;with the corresponding change to the &lt;code&gt;Config&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;When a patron wants to check their library card status at the Waterloo Public
Library, they have to visit the login page and provide their credentials, after
which they are taken to a summary page that basically just show the number of
checkouts and held items, with links to complete lists of their checkouts and
holds. That's 4 pages visited, and possibly some hidden redirects, plus one if
they manually logout. I planned to have the automated components follow the same
path.&lt;/p&gt;
&lt;section id="login"&gt;
&lt;h3&gt;Login&lt;/h3&gt;
&lt;p&gt;My initial thought was that LibraryHippo could login directly, just by posting
credentials to the website, but it failed miserably. The reason: hidden fields.
The login page looks like it has 4 inputs, counting the &amp;quot;Submit&amp;quot; button as an
input:&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of Waterloo Public Library patron login form showing 3 text fields and a submit button" src="https://blairconrad.com/2020/04/09/libraryhippo-2020-scraping-library-websites/wpl-login-form.png" /&gt;
&lt;figcaption&gt;Waterloo Public Library patron login form&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But there are actually 6. The four we see and two hidden ones, called &lt;code&gt;lt&lt;/code&gt; and &lt;code&gt;_eventId&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxlength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;15&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;code&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxlength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;50&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;20&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;25&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxlength&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;64&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Log In&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;loginSubmit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;tabindex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;35&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lt&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_cB2859561-37E4-542A-1165-9B73858A095A_k57C7CE2E-6774-24D9-E8F6-3A54E706F248&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_eventId&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;input fields for the WPL login form&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When I submit the form without them, the login fails. The &lt;code&gt;lt&lt;/code&gt; field's value
is different every time I visit the login page, so I assume the server is using
it as a session identifier or some such. The only way to have a successful login
is to harvest that value from the login page. So the card-checking flow must be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;request the login page&lt;/li&gt;
&lt;li&gt;find the hidden form fields&lt;/li&gt;
&lt;li&gt;submit the login form, including the configured credentials as well as the
hidden field values&lt;/li&gt;
&lt;li&gt;read the response and find the links to the checkouts and holds pages&lt;/li&gt;
&lt;li&gt;request the checkouts page and read the results&lt;/li&gt;
&lt;li&gt;request the holds page and read the results&lt;/li&gt;
&lt;li&gt;request the logout page, to logout&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first 3 steps are covered by the &lt;code&gt;login&lt;/code&gt; method on my new &lt;code&gt;WPL&lt;/code&gt; class:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WPL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;https://books.kpl.org/iii/cas/login?service=&amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://books.kpl.org/patroninfo~S3/j_acegi_cas_security_check&amp;amp;lang=eng&amp;amp;scope=3&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;summary_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# …&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;initial_login_page_view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="n"&gt;login_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial_login_page_view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;form_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_form_fields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;form_fields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;code&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="n"&gt;login_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;form_fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;login_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_fields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;form_fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;input_field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;input_field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;form_fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;form_fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_field&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input_field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_fields&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/libraries/wpl.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Starting from the top, there are a few things to note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I import key classes from Beautiful soup (&lt;code&gt;bs4&lt;/code&gt;) and the Requests library&lt;/li&gt;
&lt;li&gt;The login URL is hard-coded here. You have to start somewhere.&lt;/li&gt;
&lt;li&gt;I'm passing &lt;code&gt;patron&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, and &lt;code&gt;pin&lt;/code&gt; into the &lt;code&gt;check_card&lt;/code&gt;
method, which is the principal entry point into this class&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check_card&lt;/code&gt; immediately creates a &lt;code&gt;requests.Session&lt;/code&gt; object to
communicate with the outside world. It's possible to call methods like
&lt;code&gt;get&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; directly on the &lt;code&gt;requests&lt;/code&gt; module, but the &lt;a href="https://requests.readthedocs.io/en/master/user/advanced/#session-objects"&gt;Session
class&lt;/a&gt;
provides session management by tracking cookies, pools connections, and can
persist parameters across requests. Use of the &lt;code&gt;Session&lt;/code&gt; class is the key
to having the library website grant access on subsequent requests. Under
Google App Engine, I had to write request decorators to handle the cookies
and session management&lt;/li&gt;
&lt;li&gt;&lt;code&gt;login&lt;/code&gt; first requests the login page as discussed, and parses it using
Beautiful Soup before passing to &lt;code&gt;get_form_fields&lt;/code&gt; to find all
the hidden and special (e.g. &amp;quot;submit&amp;quot;) fields to ensure the right values are
posted. Not how easy the &lt;code&gt;find_all&lt;/code&gt; method makes it to locate all the input fields.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;login&lt;/code&gt; then fills in values specific to this card: patron name, card
number (&amp;quot;code&amp;quot;) and PIN, before &lt;code&gt;post&lt;/code&gt;ing the result and returning it to
&lt;code&gt;check_card&lt;/code&gt; for future processing&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="finding-the-checkouts-and-holds-pages"&gt;
&lt;h3&gt;Finding the checkouts and holds pages&lt;/h3&gt;
&lt;p&gt;Once a user logs into the WPL, they see a summary page that contains rather a
lot of personal information that they probably don't care to see every day, as
well as some links that would allow them to update their account and, most
importantly, a link to their holds and one to their checkouts, right at the
bottom of the box above the &amp;quot;Log Out&amp;quot; button.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of Waterloo Public Library patron summary" src="https://blairconrad.com/2020/04/09/libraryhippo-2020-scraping-library-websites/wpl-patron-summary.png" /&gt;
&lt;figcaption&gt;Waterloo Public Library patron summary&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It's those last two that we'll be going after. Unfortunately, the links aren't
clearly marked with an ID or even a class:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patNameAddress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;CONRAD, BLAIR&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  123 FAKE STREET&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  WATERLOO ON&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  132-456-7890&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  EXP DATE:10-11-2020&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/patroninfo~S3/12345678/holds&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_self&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;22 requests (holds).&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/patroninfo~S3/12345678/items&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_self&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;5 Items currently checked out&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;input fields for the WPL login form&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The URLs vary from patron to patron, so we can't hard-code them. I'll cheat a
little and look for links that end in &amp;quot;/holds&amp;quot; or &amp;quot;/items&amp;quot;:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt;

&lt;span class="c1"&gt;# …&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WPL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;summary_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;holds_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;summary_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/holds$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;items_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login_url&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;summary_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/items$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# …&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/libraries/wpl.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Beautiful Soup looks on the summary page for &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags whose &lt;code&gt;href&lt;/code&gt; match
the supplied regular expressions (&amp;quot;ends with /holds&amp;quot; or &amp;quot;ends with /items&amp;quot;) and
returns the results. Indexing by &lt;code&gt;&amp;quot;href&amp;quot;&lt;/code&gt; returns that attribute's value.
Since the URLs were relative, I join them to the original login URL to getd
absolute URLs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="loading-the-holds"&gt;
&lt;h3&gt;Loading the Holds&lt;/h3&gt;
&lt;p&gt;The hold page repeats the same personal information from the summary page, and then lists all the patron's holds in a table.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of the holds page, showing several held items" src="https://blairconrad.com/2020/04/09/libraryhippo-2020-scraping-library-websites/wpl_holds.png" /&gt;
&lt;figcaption&gt;The holds page&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And the HTML behind the table starts like this:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFunc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;colspan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;items_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;22 HOLDS&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; CANCEL &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; TITLE &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; STATUS &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;PICKUP LOCATION&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; CANCEL IF NOT FILLED BY &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; FREEZE &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncEntry on_ice&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncMark&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cancelb2677337x00&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cancelb2677337x00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cancelb2677337x00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/record=b2677337~S3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitleMain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Blood heir / Amélie Wen Zhao&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncStatus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 2 of 2 holds &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncPickup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncPickupLabel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;locb2677337x00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pickup Location&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;locb2677337x00&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;locb2677337x00&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mn+++&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Central Library-KPL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ch+++&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Country Hills Library-KPL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fh+++&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Forest Heights Library-KPL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;gr+++&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Grand River Stanley Pk Lib-KPL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pp+++&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pioneer Park Library-KPL&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;w++++&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;WPL Main Library&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wm   &amp;quot;&lt;/span&gt; &lt;span class="na"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;WPL McCormick Branch&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ww+++&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;WPL John M. Harper Branch&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;option&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncCancel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;09-17-20&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncFreeze&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncFreezeLabel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;freezeb2677337x00&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Freeze&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;freezeb2677337x00&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;checked&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/figure&gt;
&lt;p&gt;Each significant cell in the table has a &lt;code&gt;class&lt;/code&gt; indicator that can be used to
interpret the contents. Note that since the table is actually part of a form,
where the patron can choose to cancel, freeze, or change the pickup location of
an item, some &lt;code&gt;td&lt;/code&gt; elements contain input controls, slightly complicating the
parsing. Still, it's not that difficult to extract the information:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_holds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holds_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;holds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;holds_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holds_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html.parser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;holds_table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;holds_page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;table&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;patFunc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hold_row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;holds_table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hold_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;patFuncEntry&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hold_row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;

        &lt;span class="n"&gt;hold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hold_cell&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hold_row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hold_cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;td&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;cell_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hold_cell&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;cell_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cell_class&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;patFunc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cell_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cell_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Pickup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cell_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hold_cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;&amp;quot;option&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;selected&amp;quot;&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;cell_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Freeze&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cell_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;checked&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hold_cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c1"&gt;# logger.info(&amp;quot;cell &amp;quot; + cell_name)&lt;/span&gt;
                &lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cell_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hold_cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;holds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;holds&lt;/span&gt;

&lt;span class="c1"&gt;# …&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;patron&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# …&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Holds&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_holds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;holds_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;dl&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;hold&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;dt&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{k}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{v}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/dd&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/dl&amp;gt;&amp;lt;hr&amp;gt;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/libraries/wpl.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I load the page, find the table, and iterate over rows with the &lt;code&gt;patFunEntry&lt;/code&gt;
class, extracting values to shove in a hold object, which is just a dictionary.
the default action is to store the contents of the &lt;code&gt;td&lt;/code&gt;, but the &amp;quot;Mark&amp;quot; column
is just used to cancel holds, and conveys no information, so I drop it. The
&amp;quot;Pickup&amp;quot; column always contains a number of selections, so I'm carful to grab
the &lt;code&gt;option&lt;/code&gt; element that is &amp;quot;selected&amp;quot;. Finally the &amp;quot;Freeze&amp;quot; column is
effectively a boolean: if the &lt;code&gt;input&lt;/code&gt; has a &amp;quot;checked&amp;quot; attribute, the hold is
frozen.&lt;/p&gt;
&lt;p&gt;Back in &lt;code&gt;check_card&lt;/code&gt;, I just loop over the holds, printing a &lt;code&gt;dl&lt;/code&gt; for each
one, listing the attributes. It's not pretty, and would be better as a Jinja
template, but it's good enough for a proof of concept.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of checked holds at Waterloo Public LibraryHippo" src="https://blairconrad.com/2020/04/09/libraryhippo-2020-scraping-library-websites/check-card-holds-local.png" /&gt;
&lt;figcaption&gt;Checked holds at Waterloo Public Library&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="loading-the-checkouts"&gt;
&lt;h3&gt;Loading the Checkouts&lt;/h3&gt;
&lt;p&gt;Parsing the Checkouts was to have been the same as parsing the holds, so I was
going to omit it, but that plan fell through when I found that the checkouts
page's HTML is malformed in a way that defeated the &lt;code&gt;html.parser&lt;/code&gt; library.
Some &lt;code&gt;tr&lt;/code&gt; tags aren't closed in the table:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFunc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;colspan&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;5 ITEMS CHECKED OUT&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; RENEW &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; TITLE &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; BARCODE &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; STATUS &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncHeaders&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; CALL NUMBER &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- NO CLOSING TR --&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncEntry&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncMark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;renew0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;renew0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i3879884&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;renew0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/record=b2529260~S3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncTitleMain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Banff, Jasper &lt;span class="err"&gt;&amp;amp;&lt;/span&gt; Glacier National Parks&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncBarcode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 33420013067559 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncStatus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; DUE 03-02-20  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncRenewCount&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Renewed 1 time&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text-align:left&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;patFuncCallNo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 917.1233204 Ban  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;Checkouts table at Waterloo Public Library&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As a result, Beautiful Soupo saw only the &amp;quot;patFuncTitle&amp;quot; and &amp;quot;patFuncHeaders&amp;quot;
rows. The workaround is to install the &lt;a href="https://lxml.de/"&gt;lxml&lt;/a&gt; XML and HTML
parser and have BeautifulSoup use it:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lxml&lt;/span&gt;
&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_checkouts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;checkouts_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;checkouts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;checkouts_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;checkouts_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lxml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# fairly boring parsing hereafter&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/libraries/wpl.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="deploying-to-heroku"&gt;
&lt;h2&gt;Deploying to Heroku&lt;/h2&gt;
&lt;p&gt;Deploying is straightforward. I use my fancy &lt;code&gt;inv deploy&lt;/code&gt; command and set the new secret environment variables:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PATRON_NAME=Blair Conrad&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;CARD_NUMBER&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;123456789&lt;/span&gt;
&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="n"&gt;PIN&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="n"&gt;9876&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;And voila:&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of card check results on Heroku" src="https://blairconrad.com/2020/04/09/libraryhippo-2020-scraping-library-websites/wpl-hold-and-checkout-heroku.png" /&gt;
&lt;figcaption&gt;Card check results on Heroku&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="progress"&gt;
&lt;h2&gt;Progress&lt;/h2&gt;
&lt;p&gt;Four of nine requirements have been met!&lt;/p&gt;
&lt;table class="m-table"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;web app hosting&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scheduled jobs (run in UTC)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scraping library websites on users' behalf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-primary"&gt;next&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;small persistent datastore&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;social authentication&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;sending e-mail&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;nearly free&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;job queues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;custom domain name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="LibraryHippo"></category><category term="flask"></category><category term="heroku"></category><category term="requests"></category></entry><entry><title>LibraryHippo 2020 - Running Scheduled Tasks on Heroku</title><link href="https://blairconrad.com/2020/03/19/libraryhippo-2020-running-scheduled-tasks-on-heroku/" rel="alternate"></link><published>2020-03-19T00:00:00-04:00</published><updated>2020-03-19T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-03-19:/2020/03/19/libraryhippo-2020-running-scheduled-tasks-on-heroku/</id><summary type="html">&lt;p&gt;Having established that a Flask app running on Heroku can send e-mail, I turn my
attention to having LibraryHippo do so periodically. The approach will be to
change the e-mail-sending to be something that can more easily be triggered from
the outside, and then triggering it from from time to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Having established that a Flask app running on Heroku can send e-mail, I turn my
attention to having LibraryHippo do so periodically. The approach will be to
change the e-mail-sending to be something that can more easily be triggered from
the outside, and then triggering it from from time to time.&lt;/p&gt;
&lt;section id="making-a-custom-flask-command"&gt;
&lt;h2&gt;Making a Custom Flask command&lt;/h2&gt;
&lt;p&gt;On Google App Engine, every action had to be run via the web interface, so they
had to be secured by special credentials, which &lt;a href="https://blairconrad.com/2015/01/05/app-engine-external-authentication-exposing-handlers-to-cron-tasks-and-admins/"&gt;could be a little tricky&lt;/a&gt;.
Being able to write the tasks essentially as scripts under Flask/Heroku removes
a lot of complexity. These scripts are what Flask calls
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/cli/#custom-commands"&gt;custom commands&lt;/a&gt;;
they can be invoked from outside the web application, but with all the context
(such as the e-mail configuration set up last time) of the the full application.&lt;/p&gt;
&lt;p&gt;First, I created new &lt;code&gt;app/cli.py&lt;/code&gt; file to hold the command:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;notify-all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notify_all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;LibraryHippo starting notifications&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blair@blairconrad.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;starting notifications at &lt;/span&gt;&lt;span class="si"&gt;{now}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Test mail from LibraryHippo&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{msg.body}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;LibraryHippo ending notifications&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blair@blairconrad.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ending notifications at &lt;/span&gt;&lt;span class="si"&gt;{now}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Test mail from LibraryHippo&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{msg.body}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/cli.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This was taken from the old &lt;code&gt;sendmail&lt;/code&gt; web route, which I removed completely, and then updated to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;send two e-mails, just to make sure we could, and&lt;/li&gt;
&lt;li&gt;sleep for 5 minutes between e-mails, to verify that Heroku won't kill a longer-running task&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I called the task &lt;code&gt;notify-all&lt;/code&gt;, since I'm simulating that action in the
existing LibaryHippo: notifying all families of their library card status. The
command can be invoked by running&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;notify-all&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;and it performs exactly how you'd hope.&lt;/p&gt;
&lt;p&gt;Once the new version of the application is deployed using &lt;code&gt;inv deploy&lt;/code&gt;, it's
even possible to run the task &lt;em&gt;on a Heroku dyno&lt;/em&gt; via&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;notify-all&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;Running flask notify-all on ⬢ libraryhippo... up, run.2562 (Free)
starting notifications at 2020-02-10T11:56:25.840194
ending notifications at 2020-02-10T12:01:26.234036&lt;/pre&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="scheduling-the-task"&gt;
&lt;h2&gt;Scheduling the Task&lt;/h2&gt;
&lt;p&gt;There are a number of options for scheduling repeated tasks on Heroku, but a
very simple (and free!) one is the
&lt;a href="https://devcenter.heroku.com/articles/scheduler"&gt;Heroku Scheduler&lt;/a&gt; add-on. It
hasn't the flexibility of other schedulers, supporting only daily, hourly, or
10-minutely schedules. Still, LibraryHippo just needs to send e-mails once per
day and check users' cards about that often, so it should do.&lt;/p&gt;
&lt;p&gt;Adding the scheduler is very easy:&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;addons&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;standard&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;Creating scheduler:standard on ⬢ libraryhippo... free
To manage scheduled jobs run:
heroku addons:open scheduler

Created scheduler-curved-17868
Use heroku addons:docs scheduler to view documentation&lt;/pre&gt;
&lt;/figure&gt;
&lt;p&gt;A short search didn't reveal a way to affect the schedule from the console, but
it was easy enough to open the web-based configuration.&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;addons&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;/pre&gt;
&lt;img alt="Screenshot of empty Heroku Scheduler configuration page" class="m-image" src="https://blairconrad.com/2020/03/19/libraryhippo-2020-running-scheduled-tasks-on-heroku/empty-scheduler-config.png" /&gt;
&lt;/figure&gt;
&lt;p&gt;Adding a job is as simple as choosing &amp;quot;Create job&amp;quot;, selecting a time to run, and
typing the command to execute, which in this case was &lt;code&gt;flask notify-all&lt;/code&gt;.
I chose to execute daily at 11:30 PM because as I typed, it was 11:26 PM UTC.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="Screenshot of configuring a job to run daily at 11:30 PM" src="https://blairconrad.com/2020/03/19/libraryhippo-2020-running-scheduled-tasks-on-heroku/configure-job-for-2330.png" /&gt;
&lt;figcaption&gt;Configuring a job to run daily at 11:30 PM&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now there's nothing to do but wait. In the meantime I opened up the LibraryHippo
application's log view (at &lt;a class="m-link-wrap" href="https://dashboard.heroku.com/apps/libraryhippo/logs"&gt;https://dashboard.heroku.com/apps/libraryhippo/logs&lt;/a&gt;)
and watched.&lt;/p&gt;
&lt;p&gt;Shortly after 6:30 PM local time, the log started updating, and I received my
first e-mail, with further updates and a second e-mail about 5 minutes later.
The log looked like this:&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="Screenshot of Heroku log of scheduled e-mail task run" src="https://blairconrad.com/2020/03/19/libraryhippo-2020-running-scheduled-tasks-on-heroku/heroku-log.png" /&gt;
&lt;figcaption&gt;Heroku log of scheduled e-mail task run&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note that there are some earlier entries from the manually-invoked test run I'd
done at 2020-02-10T12:01:29, and also from the web worker that had been active
from some earlier time and was shut down due to inactivity at 12:26:17.&lt;/p&gt;
&lt;p&gt;At 23:30:25, the &lt;code&gt;flask notify-all&lt;/code&gt; worker starts up, running achieving an
&amp;quot;up&amp;quot; state before logging (via the &lt;code&gt;print&lt;/code&gt; statements in the code) the two
e-mail messages that it sent, and finally transitioning to a &amp;quot;complete&amp;quot; state
and shutting down at 23:35:28.&lt;/p&gt;
&lt;p&gt;And the e-mails arrived right on schedule:&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="Screenshot of scheduled e-mails" src="https://blairconrad.com/2020/03/19/libraryhippo-2020-running-scheduled-tasks-on-heroku/e-mails-sent-from-scheduled-job.png" /&gt;
&lt;figcaption&gt;Scheduled e-mails arriving over 5 minutes&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="a-note-on-time-zones"&gt;
&lt;h2&gt;A Note on Time Zones&lt;/h2&gt;
&lt;p&gt;As the documentation states, Heroku Scheduler jobs use a clock in the
&lt;a href="https://en.wikipedia.org/wiki/Coordinated_Universal_Time"&gt;UTC time zone&lt;/a&gt;, but
LibrayHippo's customers live in the
&lt;a href="https://en.wikipedia.org/wiki/Eastern_Time_Zone"&gt;Eastern Time Zone&lt;/a&gt; (of the
Americas), which is either 5 or 4 hours behind UTC, depending on whether
daylight saving time is in effect. When I ran my test, I wanted the e-mails to
be sent near 18:30 in my local time zone, and daylight saving time was not in
effect, so I scheduled the job for 23:30 UTC.&lt;/p&gt;
&lt;p&gt;Configuring the jobs with an offset is not particularly onerous, but it does
mean that once daylight saving time takes effect, users will see their e-mails
start arriving an hour later in the day. This is annoying, but can be worked
around in a variety of ways. I'll probably just configure the notification job
to run at 10:00 UTC, so e-mails arrive near 5:00 local time in the winter and
6:00 in the summer.&lt;/p&gt;
&lt;p&gt;Some alternatives to having the e-mail delivery time shift with the seasons are
to pay for a more expensive and sophisticated scheduler, or to further
workaround by having 2 scheduled jobs. One could run at 10:00 UTC and one at
11:00 UTC. They could each check whether daylight saving time were active in the
Eastern Time Zone, ensuring that only the proper job ran. But I'll leave that
for later. Or never.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="progress"&gt;
&lt;h2&gt;Progress&lt;/h2&gt;
&lt;p&gt;Three of nine requirements have been met.&lt;/p&gt;
&lt;table class="m-table"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;web app hosting&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scheduled jobs&lt;/td&gt;
&lt;td&gt;run in UTC, requiring job start times be offset from local time&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-primary"&gt;next&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scraping library websites on users' behalf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;small persistent datastore&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;social authentication&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;sending e-mail&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;nearly free&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;job queues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;custom domain name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="LibraryHippo"></category><category term="flask"></category><category term="heroku"></category><category term="cron"></category></entry><entry><title>LibraryHippo 2020 - Sending Email from Heroku</title><link href="https://blairconrad.com/2020/03/05/libraryhippo-2020-sending-email-from-heroku/" rel="alternate"></link><published>2020-03-05T00:00:00-05:00</published><updated>2020-03-05T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-03-05:/2020/03/05/libraryhippo-2020-sending-email-from-heroku/</id><summary type="html">&lt;p&gt;After getting a do-nothing web app running on Heroku, I think the riskiest
requirement is having a scheduled job for LibraryHippo to check families' status
and notify them. However rather than trying to satisfy that requirement, this
time I'm going to try to set up email sending, mostly because it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After getting a do-nothing web app running on Heroku, I think the riskiest
requirement is having a scheduled job for LibraryHippo to check families' status
and notify them. However rather than trying to satisfy that requirement, this
time I'm going to try to set up email sending, mostly because it can be used as
the triggered action, making it easier to test the scheduled jobs.&lt;/p&gt;
&lt;section id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Flask has a plugin to make sending mail easier,
&lt;a href="https://pythonhosted.org/Flask-Mail/"&gt;Flask-Mail&lt;/a&gt;; I'll install it, but first
I'll add a task to freeze the &lt;code&gt;requirements.txt&lt;/code&gt; file, since I'm tired of
using the Powershell syntax to do that.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;freeze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Freeze pip&amp;#39;s requirements.txt. Does not commit the file.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pip&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pip freeze&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requirements.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;tasks.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now to install the package:&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Flask-Mail&lt;/span&gt;
&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;Collecting Flask-Mail
Using cached Flask-Mail-0.9.1.tar.gz (45 kB)
Requirement already satisfied: Flask in d:\sandbox\libraryhippo\venv\lib\site-packages (from Flask-Mail) (1.1.1)
Collecting blinker
Using cached blinker-1.4.tar.gz (111 kB)
Requirement already satisfied: itsdangerous&amp;gt;=0.24 in d:\sandbox\libraryhippo\venv\lib\site-packages (from Flask-&amp;gt;Flask-Mail) (1.1.0)
Requirement already satisfied: Werkzeug&amp;gt;=0.15 in d:\sandbox\libraryhippo\venv\lib\site-packages (from Flask-&amp;gt;Flask-Mail) (0.16.1)
Requirement already satisfied: Jinja2&amp;gt;=2.10.1 in d:\sandbox\libraryhippo\venv\lib\site-packages (from Flask-&amp;gt;Flask-Mail) (2.11.1)
Requirement already satisfied: click&amp;gt;=5.1 in d:\sandbox\libraryhippo\venv\lib\site-packages (from Flask-&amp;gt;Flask-Mail) (7.0)
Requirement already satisfied: MarkupSafe&amp;gt;=0.23 in d:\sandbox\libraryhippo\venv\lib\site-packages (from Jinja2&amp;gt;=2.10.1-&amp;gt;Flask-&amp;gt;Flask-Mail) (1.1.1)
Installing collected packages: blinker, Flask-Mail
    Running setup.py install for blinker ... done
    Running setup.py install for Flask-Mail ... done
Successfully installed Flask-Mail-0.9.1 blinker-1.4

blinker==1.4
Click==7.0
Flask==1.1.1
Flask-Mail==0.9.1
gunicorn==20.0.4
invoke==1.4.1
itsdangerous==1.1.0
Jinja2==2.11.1
MarkupSafe==1.1.1
python-dotenv==0.10.5
Werkzeug==0.16.1&lt;/pre&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="flask-mail-configuration"&gt;
&lt;h2&gt;Flask-Mail Configuration&lt;/h2&gt;
&lt;p&gt;The production LibraryHippo application uses &lt;a href="https://sendgrid.com/"&gt;Sendgrid&lt;/a&gt;
as an email server, and I see no reason to deviate now. Flask-Mail must be
configured to use this server. Some of the configuration should remain a secret
(the password), and some &lt;em&gt;could&lt;/em&gt; be hard-coded right in the app, but I prefer to
separate the configuration from the code. I'll put the public settings in a file
called &lt;code&gt;configuration&lt;/code&gt;, which will be committed, and the sensitive ones in
&lt;code&gt;secrets&lt;/code&gt;, which I won't commit.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="n"&gt;MAIL_DEFAULT_SENDER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;librarianhippo&lt;/span&gt;&lt;span class="nd"&gt;@gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;MAIL_PORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;587&lt;/span&gt;
&lt;span class="n"&gt;MAIL_SERVER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendgrid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;
&lt;span class="n"&gt;MAIL_USE_TLS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;MAIL_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;apikey&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;configuration&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="c1"&gt;# Do not commit this file. It must not be shared.&lt;/span&gt;

&lt;span class="n"&gt;MAIL_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AN_API_KEY_THAT_I_WONT_SHARE_WITH_YOU&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;secrets&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;Now to make Flask aware of the configuration from above and to add Flask-Mail to
the application so it can send email.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Config&lt;/code&gt; class is a bridge that gives Flask access to the environment variables. It&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;provides a central location to view all configuration settings&lt;/li&gt;
&lt;li&gt;supplies sensible defaults for settings that might have some, and&lt;/li&gt;
&lt;li&gt;converts some settings from strings to their proper types, simplifying usage
in the code.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="n"&gt;basedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;secrets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;configuration&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_DEFAULT_SENDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAIL_DEFAULT_SENDER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAIL_PASSWORD&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAIL_PORT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAIL_SERVER&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_USE_TLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAIL_USE_TLS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;False&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;MAIL_USERNAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAIL_USERNAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;config.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then 4 lines are added to the application initialization to hook the
configuration class and Flask-Mail into the application:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="hll"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;
&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="n"&gt;mail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/__init__.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, a new route is added to the application to trigger the email. Note that
this is completely unprotected and a horrible, horrible idea for a production
environment, as someone could just visit the page and spam me. But it makes for
an easy test.&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mail&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sendmail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%c&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Mail from LibraryHippo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recipients&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blair@blairconrad.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test mail from LibraryHippo at &lt;/span&gt;&lt;span class="si"&gt;{now}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Test mail from LibraryHippo&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;It&amp;#39;s now &lt;/span&gt;&lt;span class="si"&gt;{now}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sent mail at &lt;/span&gt;&lt;span class="si"&gt;{now}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;routes.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And it works! I can trigger the route and get a success message. Nearly
instantaneously, I receive the email in my inbox.&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;* Serving Flask app &amp;quot;libraryhippo.py&amp;quot;
* Environment: production
WARNING: This is a development server. Do not use it in a production deployment.
Use a production WSGI server instead.
* Debug mode: off
* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
127.0.0.1 - - [07/Feb/2020 06:08:38] &amp;quot;GET /sendmail HTTP/1.1&amp;quot; 200 -&lt;/pre&gt;
&lt;/figure&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of LibraryHippo having sent mail locally" src="https://blairconrad.com/2020/03/05/libraryhippo-2020-sending-email-from-heroku/local-sendmail.png" /&gt;
&lt;figcaption&gt;LibraryHippo having sent mail locally&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of email received from local LibraryHippo" src="https://blairconrad.com/2020/03/05/libraryhippo-2020-sending-email-from-heroku/local-received-mail.png" /&gt;
&lt;figcaption&gt;Email received from local LibraryHippo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="deploying-to-heroku"&gt;
&lt;h2&gt;Deploying to Heroku&lt;/h2&gt;
&lt;p&gt;There's very little work to do to deploy to Heroku. All the new configuration
settings are in the &lt;code&gt;configuration&lt;/code&gt; file except for &lt;code&gt;MAIL_PASSWORD&lt;/code&gt;. The
Heroku web interface provides a way to set the value, but it's easier to use the
Heroku command line interface:&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MAIL_PASSWORD=AN_API_KEY_THAT_I_WONT_SHARE_WITH_YOU&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;Setting MAIL_PASSWORD and restarting ⬢ libraryhippo... done, v4
MAIL_PASSWORD: AN_API_KEY_THAT_I_WONT_SHARE_WITH_YOU&lt;/pre&gt;
&lt;/figure&gt;
&lt;p&gt;And now to deploy and test&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;remote: Compressing source files... done.
remote: Building source:
remote:
remote: -----&amp;gt; Python app detected
remote: -----&amp;gt; Need to update SQLite3, clearing cache
remote: -----&amp;gt; Installing python-3.8.1
remote: -----&amp;gt; Installing pip
remote: -----&amp;gt; Installing SQLite3
remote: Sqlite3 successfully installed.
remote: -----&amp;gt; Installing requirements with pip
#
# a lot of boring pip stuff
#
remote:        Successfully installed Click-7.0 Flask-1.1.1 Flask-Mail-0.9.1 Jinja2-2.11.1 MarkupSafe-1.1.1 Werkzeug-0.16.1 blinker-1.4 gunicorn-20.0.4 invoke-1.4.1 itsdangerous-1.1.0 python-dotenv-0.10.5
remote:
remote: -----&amp;gt; Discovering process types
remote:        Procfile declares types -&amp;gt; web
remote:
remote: -----&amp;gt; Compressing...
remote:        Done: 47.9M
remote: -----&amp;gt; Launching...
remote:        Released v5
remote:        https://libraryhippo.herokuapp.com/ deployed to Heroku
remote:
remote: Verifying deploy... done.
To https://git.heroku.com/libraryhippo.git
3f0598d..ddf4728  lh2020 -&amp;gt; master&lt;/pre&gt;
&lt;/figure&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of LibraryHippo having sent mail from Heroku" src="https://blairconrad.com/2020/03/05/libraryhippo-2020-sending-email-from-heroku/heroku-sendmail.png" /&gt;
&lt;figcaption&gt;LibraryHippo having sent mail from Heroku&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of email received from LibraryHippo on Heroku" src="https://blairconrad.com/2020/03/05/libraryhippo-2020-sending-email-from-heroku/heroku-received-mail.png" /&gt;
&lt;figcaption&gt;Email received from LibraryHippo on Heroku&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note the time discrepancy between the time that LibraryHippo reported and the
time that GMail said it receive the message. I'm sending from UTC-5, and the
Heroku server appears to be in UTC. It's not a problem for now, but may become a
factor when scheduling jobs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="progress"&gt;
&lt;h2&gt;Progress&lt;/h2&gt;
&lt;p&gt;Two of nine requirements have been met.&lt;/p&gt;
&lt;table class="m-table"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;web app hosting&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-primary"&gt;next&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;scheduled jobs&lt;/td&gt;
&lt;td&gt;&lt;span class="m-label m-warning"&gt;may only run in UTC&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;scraping library websites on users' behalf&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;small persistent datastore&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;social authentication&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="m-label m-success"&gt;done&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;sending e-mail&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;nearly free&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;job queues&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;/td&gt;
&lt;td&gt;custom domain name&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="LibraryHippo"></category><category term="flask"></category><category term="heroku"></category><category term="email"></category></entry><entry><title>LibraryHippo 2020 - A Bare-bones Flask App</title><link href="https://blairconrad.com/2020/02/20/libraryhippo-2020-a-bare-bones-flask-app/" rel="alternate"></link><published>2020-02-20T00:00:00-05:00</published><updated>2020-02-20T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-02-20:/2020/02/20/libraryhippo-2020-a-bare-bones-flask-app/</id><summary type="html">&lt;p&gt;Last time I laid out the uncertainties that have to be explore before I want to
try hosting LibraryHippo on Heroku. Here they are again, roughly in descending
order of importance and risk:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;web app hosting&lt;/li&gt;
&lt;li&gt;scheduled jobs&lt;/li&gt;
&lt;li&gt;scraping library websites on users' behalf&lt;/li&gt;
&lt;li&gt;a small (perhaps a few MB …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Last time I laid out the uncertainties that have to be explore before I want to
try hosting LibraryHippo on Heroku. Here they are again, roughly in descending
order of importance and risk:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;web app hosting&lt;/li&gt;
&lt;li&gt;scheduled jobs&lt;/li&gt;
&lt;li&gt;scraping library websites on users' behalf&lt;/li&gt;
&lt;li&gt;a small (perhaps a few MB) persistent datastore&lt;/li&gt;
&lt;li&gt;authentication via social accounts&lt;/li&gt;
&lt;li&gt;sending e-mail&lt;/li&gt;
&lt;li&gt;free, or nearly so; as I said, this is a hobby project, and I'm not willing to dump several tens of dollars into it every month&lt;/li&gt;
&lt;li&gt;job queues&lt;/li&gt;
&lt;li&gt;custom domain name&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Today I'll address the first of those: web app hosting. It's not particularly
risky, but it's very important. I'll start with an essentially empty repository:
just a license file, readme, and a &lt;code&gt;.gitattributes&lt;/code&gt; file.&lt;/p&gt;
&lt;section id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;As I type, Heroku
&lt;a href="https://devcenter.heroku.com/changelog-items/1722"&gt;supports the Python 3.8.1 runtime&lt;/a&gt;,
so I upgraded from 3.8.0 and then I created a virtual environment to work in,
upgraded pip, and installed Flask.&lt;/p&gt;
&lt;p&gt;Typically Flask will read some some values, such as the application file,
secrets, or other configuration, from environment variables. I prefer to use
&lt;a href="https://saurabh-kumar.com/python-dotenv/"&gt;python-dotenv&lt;/a&gt; and to save them in
files (some committed, some not) for local use.&lt;/p&gt;
&lt;p&gt;Finally, I install &lt;a href="https://www.pyinvoke.org/"&gt;Invoke&lt;/a&gt;, since I can never
remember the syntax for the various tasks I have to do and tools I need to use
to them, and I think it's a nicer system than &amp;quot;a dozen batch files&amp;quot; that
accreted in the old LibraryHippo. Those should be all the dependencies I need
for now, so I freeze a &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;8&lt;/span&gt; &lt;span class="n"&gt;-m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;-m&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-upgrade&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python-dotenv&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;invoke&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-File&lt;/span&gt; &lt;span class="n"&gt;-encoding&lt;/span&gt; &lt;span class="n"&gt;ascii&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="create-a-flask-application"&gt;
&lt;h2&gt;Create a Flask application&lt;/h2&gt;
&lt;p&gt;Now I'm ready to create an application! We need three files:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/__init__.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;LibraryHippo 2020&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;app/routes.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;libraryhippo.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Typically, one would then set the &lt;code&gt;FLASK_APP&lt;/code&gt; environment variable to
&lt;code&gt;libraryhippo.py&lt;/code&gt;, but I find that inelegant, and I don't really enjoy making
sure it's set when I need it. Instead I'll set it in a &lt;code&gt;.flaskenv.py&lt;/code&gt; file:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;libraryhippo.py&lt;/pre&gt;
&lt;figcaption&gt;.flaskenv.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I'll create a &lt;code&gt;run&lt;/code&gt; task in &lt;code&gt;tasks.py&lt;/code&gt; so I remember how to run the
application, and then invoke it:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Run local version of the application&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flask run&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;tasks.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;* Serving Flask app &amp;quot;libraryhippo.py&amp;quot;
* Environment: production
WARNING: This is a development server. Do not use it in a production deployment.
Use a production WSGI server instead.
* Debug mode: off
* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)&lt;/pre&gt;
&lt;/figure&gt;
&lt;p&gt;And voilà:&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of LibraryHippo running locally" src="https://blairconrad.com/2020/02/20/libraryhippo-2020-a-bare-bones-flask-app/local-libraryhippo.png" /&gt;
&lt;figcaption&gt;LibraryHippo running locally&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It's not especially pretty, and it doesn't do a thing, but it's a running app.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="deploy-to-heroku"&gt;
&lt;h2&gt;Deploy to Heroku&lt;/h2&gt;
&lt;p&gt;Before deploying I needed&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a Heroku account and&lt;/li&gt;
&lt;li&gt;the Heroku &lt;abbr&gt;CLI&lt;/abbr&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'd already signed up for a free account and installed the Heroku CLI while
going through
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial&lt;/a&gt;,
so I can move right ahead with the work necessary for this application.&lt;/p&gt;
&lt;section id="create-a-heroku-application"&gt;
&lt;h3&gt;Create a Heroku Application&lt;/h3&gt;
&lt;p&gt;Heroku needs an application to associate with your code. Use the CLI to add an
application with a unique name:&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;heroku&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;libraryhippo&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;Creating ⬢ libraryhippo... done
https://libraryhippo.herokuapp.com/ | https://git.heroku.com/libraryhippo.git&lt;/pre&gt;
&lt;/figure&gt;
&lt;p&gt;Success! The last line of the output indicates the URL of the deployed
application (it's boring right now, since it doesn't have the LibraryHippo code)
and the URL of the git repository to push versions of LibraryHippo to.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="satisfy-heroku-s-requirements"&gt;
&lt;h3&gt;Satisfy Heroku's Requirements&lt;/h3&gt;
&lt;p&gt;Heroku needs a &lt;code&gt;Procfile&lt;/code&gt; to understand how to run an application. So far
LibraryHippo's is simple:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;web: gunicorn libraryhippo:app&lt;/pre&gt;
&lt;figcaption&gt;Procfile&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This tells Heroku to use a web dyno to run the
&lt;a href="https://gunicorn.org/"&gt;Gunicorn&lt;/a&gt; web server, which will host the LibraryHippo
application. Gunicorn is required because the native Flask web server is not
production-ready.&lt;/p&gt;
&lt;p&gt;Of course, a Heroku web dyno doesn't come with Gunicorn installed, so it needs
to be added to the requirements and frozen:&lt;/p&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Out-File&lt;/span&gt; &lt;span class="n"&gt;-encoding&lt;/span&gt; &lt;span class="n"&gt;ascii&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;Finally, Heroku needs to know which version of Python to use. It has its own
defaults, but I prefer to know that my local environment is in sync with
Heroku's, so add a &lt;code&gt;runtime.txt&lt;/code&gt; file to tell Heroku what I expect:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;python-3.8.1&lt;/pre&gt;
&lt;figcaption&gt;runtime.txt&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;section id="push-the-code-to-heroku"&gt;
&lt;h3&gt;Push the code to Heroku&lt;/h3&gt;
&lt;p&gt;I'd been committing my code to a local git repository as I went, so
&lt;code&gt;heroku apps:create&lt;/code&gt; automatcially added a new remote called &amp;quot;heroku&amp;quot; for me;&lt;/p&gt;
&lt;figure class="m-console-figure"&gt;
&lt;pre class="m-console m-code"&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;-v&lt;/span&gt;&lt;/pre&gt;
&lt;pre class="m-nopad m-code"&gt;heroku  https://git.heroku.com/libraryhippo.git (fetch)
heroku  https://git.heroku.com/libraryhippo.git (push)
origin  git@github.com:blairconrad/LibraryHippo.git (fetch)
origin  git@github.com:blairconrad/LibraryHippo.git (push)&lt;/pre&gt;
&lt;/figure&gt;
&lt;p&gt;If I hadn't had git set up already, I could do so now and add the remote
manually.&lt;/p&gt;
&lt;p&gt;Pushing to Heroku was to have been anticlimactic, but I kept messing up the
syntax of the git command. Heroku serves apps from the &lt;code&gt;master&lt;/code&gt; branch, and
I'm working in &lt;code&gt;lh2020&lt;/code&gt;. The command that I thought meant &amp;quot;push lh2020 to
heroku as master&amp;quot; actually just pushed lh2020 &lt;em&gt;and&lt;/em&gt; master, but the latter has
the code for the existing application, not the new Flask one. To save myself
from making this mistake again, I added a task:&lt;/p&gt;
&lt;figure class="m-code-figure"&gt;
&lt;pre class="m-code"&gt;&lt;span class="err"&gt;…&lt;/span&gt;

&lt;span class="nd"&gt;@task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Deploy the application to Heroku&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git push heroku lh2020:master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;
&lt;figcaption&gt;tasks.py&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And now the new LibraryHippo is running on Heroku.&lt;/p&gt;
&lt;figure class="m-figure"&gt;
&lt;img alt="screenshot of LibraryHippo running on Heroku" src="https://blairconrad.com/2020/02/20/libraryhippo-2020-a-bare-bones-flask-app/heroku-libraryhippo.png" /&gt;
&lt;figcaption&gt;LibraryHippo running on Heroku&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/section&gt;
&lt;/section&gt;
</content><category term="Development"></category><category term="flask"></category><category term="LibraryHippo"></category><category term="heroku"></category></entry><entry><title>LibraryHippo 2020 - Motivation and Plan</title><link href="https://blairconrad.com/2020/02/06/libraryhippo-2020-motivation-and-plan/" rel="alternate"></link><published>2020-02-06T00:00:00-05:00</published><updated>2020-02-06T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2020-02-06:/2020/02/06/libraryhippo-2020-motivation-and-plan/</id><summary type="html">&lt;p&gt;For some years, I've run a hobby project, open to all, but mostly used by a few
of my friends and family, called &lt;a href="http://libraryhippo.com/"&gt;LibraryHippo&lt;/a&gt;. I
find it useful, and for a long time, it was a joy to work on.&lt;/p&gt;
&lt;p&gt;Lately, the project's not much fun. I've had the urge …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For some years, I've run a hobby project, open to all, but mostly used by a few
of my friends and family, called &lt;a href="http://libraryhippo.com/"&gt;LibraryHippo&lt;/a&gt;. I
find it useful, and for a long time, it was a joy to work on.&lt;/p&gt;
&lt;p&gt;Lately, the project's not much fun. I've had the urge to make small tweaks or
add the odd feature, but I haven't bothered. Whenever I'm tempted to, there've
been a few speedbumps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it's written in Python 2.7, which I'm trying to leave behind, and&lt;/li&gt;
&lt;li&gt;it's running on Google App Engine&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm grateful to Google for providing a free tier of App Engine for projects such
as mine to run on, and I've benefitted a lot from it, but it's not without its
downsides:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;many of the services have custom interfaces, that I only use there, so they
   fade from my memory, and&lt;/li&gt;
&lt;li&gt;it seems every time I come back to the project, I have to update my SDK to
   even work with LibraryHippo, and sometimes learn new commands to deploy or
   monitor the service&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since Python 2.7 is now unsupported, I'm looking to upgrade to 3.7. App Engine
documentation now suggests writing the application in
&lt;a href="https://palletsprojects.com/p/flask/"&gt;Flask&lt;/a&gt;, rather than the older framework.
The project seems well-regarded, so I read some documentation and looked at
Miguel Grinberg's amazing
&lt;a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world"&gt;The Flask Mega-Tutorial&lt;/a&gt;,
(which I highly recommend: it's eminently readable, obviously well-researched,
and espouses good overall development practices), and decided to give that a
try.&lt;/p&gt;
&lt;p&gt;I figured that since I'm doing a near-complete rewrite anyhow (some of the core
code should survive), it might be time to explore different hosting options,
making use of commodity databases, authentication, queuing, etc.&lt;/p&gt;
&lt;p&gt;After a little searching, it looks as if &lt;a href="https://heroku.com"&gt;Heroku&lt;/a&gt; might be
the platform that meets my needs, which are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;web app hosting&lt;/li&gt;
&lt;li&gt;a small (perhaps a few MB) persistent datastore&lt;/li&gt;
&lt;li&gt;scheduled jobs&lt;/li&gt;
&lt;li&gt;authentication via social accounts&lt;/li&gt;
&lt;li&gt;sending e-mail&lt;/li&gt;
&lt;li&gt;free, or nearly so; as I said, this is a hobby project, and I'm not willing
   to dump several tens of dollars into it every month&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update 2020-02-11:&lt;/strong&gt; scraping library websites on users' behalf&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I've other requirements, but these aren't likely to be deal-breakers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;custom domain name&lt;/li&gt;
&lt;li&gt;job queues&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Over the next few posts, I'm going to pick high-risk requirements from the above
list, and attempt to satisfy them via a Flask web application running on
Heroku's free tier. If I can satisfy (in the most rudimentary way) these
requirements, I'll pursue a full conversion.&lt;/p&gt;
&lt;p&gt;I'll assign issues and pull requests that I make for this work to the
&lt;a href="https://github.com/LibraryHippo/LibraryHippo/milestone/1"&gt;LibraryHippo 2020&lt;/a&gt;
milestone.&lt;/p&gt;
&lt;p&gt;Hopefully the series will serve as entertainment or education for you, and a
useful reference for me when I wonder how or why I did something.&lt;/p&gt;</content><category term="Development"></category><category term="LibraryHippo"></category><category term="flask"></category><category term="AppEngine"></category><category term="heroku"></category></entry><entry><title>Automatically Sync nupkg and project.json Dependencies</title><link href="https://blairconrad.com/2017/02/21/automatically-sync-nupkg-and-project.json-dependencies/" rel="alternate"></link><published>2017-02-21T00:00:00-05:00</published><updated>2017-02-21T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2017-02-21:/2017/02/21/automatically-sync-nupkg-and-project.json-dependencies/</id><summary type="html">&lt;p&gt;Recently while working on an open source .NET project,
I forgot to update the &lt;code&gt;.nuspec&lt;/code&gt; after changing a package
dependency in my &lt;code&gt;project.json&lt;/code&gt;. Of course the resulting nupkg
contained the wrong dependency. Fortunately, the package
wasn't published in that state, but I didn't want to risk such a thing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently while working on an open source .NET project,
I forgot to update the &lt;code&gt;.nuspec&lt;/code&gt; after changing a package
dependency in my &lt;code&gt;project.json&lt;/code&gt;. Of course the resulting nupkg
contained the wrong dependency. Fortunately, the package
wasn't published in that state, but I didn't want to risk such a thing
happening again.&lt;/p&gt;
&lt;p&gt;I want the project to be buildable in Visual Studio immediately
after cloning, but there's no such constraint on producing the NuGet
package, so this means the &lt;code&gt;project.json&lt;/code&gt; has to be the source
of truth.&lt;/p&gt;
&lt;p&gt;I opted to have the project's
&lt;a href="https://github.com/adamralph/simple-targets-csx"&gt;simple-targets-csx&lt;/a&gt;
build script scrape the &lt;code&gt;project.json&lt;/code&gt; for the version of the
dependent package and supply the matching version as part of the
&lt;a href="https://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference#pack"&gt;nuget pack&lt;/a&gt;
&lt;code&gt;properties&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;My initial implementation used a regular expression to extract the
version, but my colleague
&lt;a href="http://www.thomaslevesque.com/"&gt;Thomas Levesque&lt;/a&gt; suggested parsing
the JSON to find the proper value.&lt;/p&gt;
&lt;p&gt;I liked the idea, but pulling in something like
&lt;a href="http://www.newtonsoft.com/json"&gt;Json.NET&lt;/a&gt; seemd heavy. A little
Googling later, I found Brandur Leach's
&lt;a href="https://mutelight.org/using-the-little-known-built-in-net-json-parser"&gt;Using the Little-known Built-in .NET JSON Parser&lt;/a&gt;
that described the built-in
&lt;a href="https://msdn.microsoft.com/en-us/library/system.runtime.serialization.json.jsonreaderwriterfactory(v=vs.110).aspx"&gt;JsonReaderWriterFactory&lt;/a&gt;.
This seemed like just the ticket. A few minutes later, I was up and
running with these sections of the build script&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;targets.Add(
    "pack",
    DependsOn("build", "outputDirectory"),
    () =&gt;
    {
        var fakeItEasyVersion = GetDependencyVersion("FakeItEasy");
        Cmd(nuget, $"pack {nuspec} -Version {version} -Properties FakeItEasyVersion={fakeItEasyVersion} -OutputDirectory {outputDirectory} -NoPackageAnalysis");
    });

…

public string GetDependencyVersion(string packageName)
{
    byte[] buffer = File.ReadAllBytes(projectJsonPath);
    XmlReader reader = JsonReaderWriterFactory.CreateJsonReader(buffer, new XmlDictionaryReaderQuotas());

    XElement root = XElement.Load(reader);
    return root.Element("dependencies").Element(packageName).Value;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which find the "3.0.0-rc001-build000097" from the project.json:&lt;/p&gt;
&lt;pre&gt;&lt;code class="json"&gt;{
  "dependencies": {
    "FakeItEasy": "3.0.0-rc001-build000097",
    "StyleCop.Analyzers": "1.1.0-beta001"
  },
  …&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and combine it with this portion of the &lt;code&gt;.nuspec&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;dependencies&amp;gt;
  &amp;lt;dependency id="FakeItEasy" version="[$FakeItEasyVersion$,4)" /&amp;gt;
&amp;lt;/dependencies&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, a property could be added for each dependency. Do this, and
you can rest easy, knowing you'll never get a dependency mismatch
again.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category></entry><entry><title>Select May Not be Broken, But it's Bent</title><link href="https://blairconrad.com/2015/10/05/select-may-not-be-broken-but-its-bent/" rel="alternate"></link><published>2015-10-05T00:00:00-04:00</published><updated>2015-10-05T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2015-10-05:/2015/10/05/select-may-not-be-broken-but-its-bent/</id><summary type="html">&lt;p&gt;Earlier this week at the day job I ran into an interesting problem
working with a &lt;a href="https://msdn.microsoft.com/en-us/library/system.data.datatable(v=vs.100).aspx"&gt;DataTable&lt;/a&gt;.  A view that's supposed to show
a subset of the table's rows showed nothing. I dropped into the
debugger and became even more confused.&lt;/p&gt;
&lt;p&gt;Visually inspecting the DataTable showed that there was a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Earlier this week at the day job I ran into an interesting problem
working with a &lt;a href="https://msdn.microsoft.com/en-us/library/system.data.datatable(v=vs.100).aspx"&gt;DataTable&lt;/a&gt;.  A view that's supposed to show
a subset of the table's rows showed nothing. I dropped into the
debugger and became even more confused.&lt;/p&gt;
&lt;p&gt;Visually inspecting the DataTable showed that there was a row that
matched the filter the view was using, but running &lt;code&gt;Select&lt;/code&gt; still
returned nothing. I didn't bring work's code home, but here's some
code that reproduces the problem:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;Console.Out.WriteLine("0th book's Library:\t{0}", books[0].Library);
Console.Out.WriteLine("# WPL books by Select:\t{0}", library.Books.Select("Library = 'WPL'").Length);
Console.Out.WriteLine("# WPL books by LINQ:\t{0}", library.Books.Count(book =&gt; book.Library == "WPL"));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the output:&lt;/p&gt;
&lt;pre&gt;0th book's Library:     WPL
# WPL books by Select:  0
# WPL books by LINQ:    1&lt;/pre&gt;

&lt;p&gt;So, the table contains at least one book from &lt;a href="http://www.wpl.ca"&gt;WPL&lt;/a&gt;, &lt;code&gt;Select&lt;/code&gt;ing
for that library doesn't find the book, yet iterating over all the
rows and &lt;code&gt;Count&lt;/code&gt;ing them does find it.&lt;/p&gt;
&lt;p&gt;Just in case you think there's some whitespace trickery going on or
something, debug with me:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://blairconrad.com/images/2015-10-05-select-may-not-be-broken/debugging.png"&gt;
&lt;/figure&gt;

&lt;p&gt;How is this happening? The row's Library property is actually
&lt;code&gt;DBNull&lt;/code&gt;, but the dataset defines both &lt;code&gt;DefaultValue&lt;/code&gt; and &lt;code&gt;NullValue&lt;/code&gt;:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src="https://blairconrad.com/images/2015-10-05-select-may-not-be-broken/library_properties.png"&gt;
&lt;/figure&gt;

&lt;p&gt;So even though there was &lt;code&gt;DBNull&lt;/code&gt; in the row, whenever I examined the
&lt;code&gt;Library&lt;/code&gt; property, via code (such as the LINQ statements) or
visually in the debugger, it appeared to be "WPL".&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Select&lt;/code&gt;, however, wasn't fooled. It knew the value was &lt;code&gt;DBNull&lt;/code&gt; and
wouldn't match.&lt;/p&gt;
&lt;p&gt;I'm of two minds about this. It's arguably &lt;em&gt;correct&lt;/em&gt; behaviour, as the
stored value is not "WPL", but I'm not sure that it's desirable to be
able to configure the table to present data in a way that's not
supported by the query.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category></entry><entry><title>App Engine + External Authentication: Exposing Handlers to Cron, Tasks, and Admins</title><link href="https://blairconrad.com/2015/01/05/app-engine-external-authentication-exposing-handlers-to-cron-tasks-and-admins/" rel="alternate"></link><published>2015-01-05T00:00:00-05:00</published><updated>2015-01-05T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2015-01-05:/2015/01/05/app-engine-external-authentication-exposing-handlers-to-cron-tasks-and-admins/</id><summary type="html">&lt;p&gt;Since Google is &lt;a href="https://developers.google.com/accounts/docs/OpenID2"&gt;deprecating OpenID 2.0 support&lt;/a&gt;, I
decided to update &lt;a href="/tags/#LibraryHippo-ref"&gt;LibraryHippo&lt;/a&gt; to authenticate via
&lt;a href="http://oauth.net/"&gt;OAuth 2.0&lt;/a&gt;, which is a story in itself, but I'm here to talk
about what happened next.&lt;/p&gt;
&lt;p&gt;LibraryHippo has a set of handlers that are accessed primarily via the
&lt;a href="https://cloud.google.com/appengine/docs/python/config/cron"&gt;Cron&lt;/a&gt; and &lt;a href="https://cloud.google.com/appengine/docs/python/taskqueue/"&gt;Task Queue …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since Google is &lt;a href="https://developers.google.com/accounts/docs/OpenID2"&gt;deprecating OpenID 2.0 support&lt;/a&gt;, I
decided to update &lt;a href="/tags/#LibraryHippo-ref"&gt;LibraryHippo&lt;/a&gt; to authenticate via
&lt;a href="http://oauth.net/"&gt;OAuth 2.0&lt;/a&gt;, which is a story in itself, but I'm here to talk
about what happened next.&lt;/p&gt;
&lt;p&gt;LibraryHippo has a set of handlers that are accessed primarily via the
&lt;a href="https://cloud.google.com/appengine/docs/python/config/cron"&gt;Cron&lt;/a&gt; and &lt;a href="https://cloud.google.com/appengine/docs/python/taskqueue/"&gt;Task Queue&lt;/a&gt; mechanisms, but every once in a
while need to be triggered ad hoc by a human administrator. Until
now, these request handlers were protected from the rabble by
&lt;a href="https://cloud.google.com/appengine/docs/python/config/appconfig#Python_app_yaml_Requiring_login_or_administrator_status"&gt;requiring administrator status via the application's app.yaml&lt;/a&gt;. Unfortunately,
externally-authenticated users have no special standing within App
Engine, so this restriction had to be relaxed.&lt;/p&gt;
&lt;p&gt;My first thought was to remove the restriction from &lt;code&gt;app.yaml&lt;/code&gt; and check
for access in the handler like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_current_user_admin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_external_user_admin&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# application code that understands the logged-in users&lt;/span&gt;
    &lt;span class="c1"&gt;# do stuff&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, this fails miserably. When the handler is executed by a
task or cron job, &lt;code&gt;users.is_current_user_admin&lt;/code&gt; returns &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This behaviour seems not to be widely reported; I couldn't find it
mentioned in the &lt;a href="https://code.google.com/p/googleappengine/issues/list?can=1"&gt;App Engine issues list&lt;/a&gt;, but a web search
eventually turned up
&lt;a href="http://www.learningtechnicalstuff.com/2010/01/app-engine-google-fails.html"&gt;App Engine: Google fails users.is_current_user_admin() test&lt;/a&gt;
by Ben Davies, an article written nearly 5 years ago.&lt;/p&gt;
&lt;p&gt;In this article, Mr. Davies suggests that the best alternative to
&lt;code&gt;users.is_current_user_admin&lt;/code&gt; is to "check the easily spoofed request
user-agent". I was skittish of this approach, especially since Google
is now recommending checking &lt;code&gt;X-AppEngine-Cron&lt;/code&gt; when
&lt;a href="https://cloud.google.com/appengine/docs/python/config/cron#Python_app_yaml_Securing_URLs_for_cron"&gt;securing URLS for cron&lt;/a&gt;. The App Engine documentation
explains how X-AppEngine-Cron is protected against spoofing, but I'm
still uneasy.&lt;/p&gt;
&lt;p&gt;I ended up taking a different approach. I added two routes for the
affected handlers. One route is in the old &lt;code&gt;admin&lt;/code&gt; subdirectory
(subpath?) and the other in a new one for system commands,
&lt;code&gt;system&lt;/code&gt;. The latter is secured in the app.yaml, just as before. Thus
I have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# in app.yaml&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/system/.*&lt;/span&gt;
  &lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;libraryhippo.application&lt;/span&gt;
  &lt;span class="nt"&gt;login&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;admin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# in the application&amp;#39;s Python source&lt;/span&gt;
&lt;span class="n"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# other handlers&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/admin/notify/(.*)$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/system/notify/(.*)$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Notify&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# and later, in the Notify handler&lt;/span&gt;
    &lt;span class="n"&gt;request_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_external_user_admin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt;
        &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;request_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="c1"&gt;# do stuff&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus the handler is executed if the user has admin rights or the URL
isn't locked down by virtue of being below &lt;code&gt;/admin/&lt;/code&gt;. The &lt;code&gt;/system/&lt;/code&gt;
URLs are all assumed to be protected by the app.yaml setting.&lt;/p&gt;
&lt;p&gt;Perhaps this is technically no better than checking a header in the
request, but it works for me, at least until I see what happens with
&lt;a href="https://code.google.com/p/googleappengine/issues/detail?id=11576"&gt;Issue 11576: have users.is_current_user_admin return true for tasks and cron jobs&lt;/a&gt;.&lt;/p&gt;</content><category term="Development"></category><category term="AppEngine"></category></entry><entry><title>Hasty Impressions: flake8</title><link href="https://blairconrad.com/2014/09/15/hasty-impressions-flake8/" rel="alternate"></link><published>2014-09-15T00:00:00-04:00</published><updated>2014-09-15T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2014-09-15:/2014/09/15/hasty-impressions-flake8/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;flake8&lt;/li&gt;
&lt;li&gt;HastyImpressions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;A little while ago, I was fixing &lt;a href="https://github.com/LibraryHippo/LibraryHippo/pull/2"&gt;a LibraryHippo issue&lt;/a&gt;
in an area of the code that didn't have very good unit test
coverage. As part of my fix, I moved one class from the main
&lt;code&gt;libraryhippo.py&lt;/code&gt; file to its own file. I integration-tested the fix …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;li&gt;flake8&lt;/li&gt;
&lt;li&gt;HastyImpressions&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;A little while ago, I was fixing &lt;a href="https://github.com/LibraryHippo/LibraryHippo/pull/2"&gt;a LibraryHippo issue&lt;/a&gt;
in an area of the code that didn't have very good unit test
coverage. As part of my fix, I moved one class from the main
&lt;code&gt;libraryhippo.py&lt;/code&gt; file to its own file. I integration-tested the fix,
deployed the new version, and moved on.&lt;/p&gt;
&lt;p&gt;A day or so later, I noticed that I'd
&lt;a href="https://github.com/LibraryHippo/LibraryHippo/issues/3"&gt;broken a very important side effect&lt;/a&gt; of the
card-checking operation. The results of the check are cached and used
later when sending out notifications. Because we still want to deliver
a live report to users even if the caching fails, the failure is not
detectable from the web page.&lt;/p&gt;
&lt;p&gt;Of course better test coverage would've picked this up, but it's the
sort of error that just as easily would've been caught in a compiled language such as
C#, or by a static analysis tool. So I decided to try out such a tool.&lt;/p&gt;
&lt;p&gt;A few web searches later, and it looked like &lt;a href="https://pypi.python.org/pypi/flake8"&gt;flake8&lt;/a&gt; was the
thing to try. It bundles together&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pyflakes"&gt;PyFlakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pep8"&gt;pep8&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/mccabe"&gt;mccabe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of which I'd heard of before, (at least as packages&amp;mdash;I'd
known of &lt;a href="http://legacy.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;  for a
long time), but they claimed to do what I wanted. So I gave
flake8 a go.&lt;/p&gt;
&lt;h2&gt;Initial impressions&lt;/h2&gt;
&lt;p&gt;Installation was as easy as running &lt;code&gt;pip install flake8&lt;/code&gt;. It picked up
the missing dependencies automatically, and I was ready to go in seconds.&lt;/p&gt;
&lt;p&gt;Too impatient to read any docs, I ran it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LibraryHippo&amp;gt; flake8
Usage: flake8 [options] input ...
flake8: error: input not specified
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A helpful error message. I reran, specifying the application directory
(&lt;code&gt;flake8 App&lt;/code&gt;) and got&amp;hellip; rather a lot of output. It looked
like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app\BeautifulSoup.py:100:1: E265 block comment should start with '# '
app\BeautifulSoup.py:107:1: E302 expected 2 blank lines, found 1
app\BeautifulSoup.py:114:1: E302 expected 2 blank lines, found 1
&amp;vellip;
app\cardchecker.py:61:13: F841 local variable 'name' is assigned to but never used
app\cardchecker.py:63:80: E501 line too long (96 &amp;gt; 79 characters)
app\cardchecker.py:71:37: F821 undefined name 'clock'
app\cardchecker.py:74:80: E501 line too long (84 &amp;gt; 79 characters)
app\cardchecker.py:75:1: W391 blank line at end of file
&amp;vellip;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and so on. Success!&lt;/p&gt;
&lt;h2&gt;Too many complaints!&lt;/h2&gt;
&lt;p&gt;Things seemed to be working, and it did identify the cause of my error
(&lt;code&gt;app\cardchecker.py:71:37: F821 undefined name 'clock'&lt;/code&gt;), but it was
buried in way too much other information. &lt;/p&gt;
&lt;p&gt;flake8 reported &lt;strong&gt;823&lt;/strong&gt; problems in my application (and that didn't
even include the test code). This is a common problem when running any
kind of analysis tool for the first time. Since we've not been running
a tight ship, there are all kinds of problems in the
code. Fortunately, like many tools of its ilk, flake8 lets us tailor
the problems that are reported. I had two immediate goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ignore complaints about the library 
  &lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt;
  (over half the complaints were from BeautifulSoup.py), and&lt;/li&gt;
&lt;li&gt;ignore (for now) less severe errors and style warnings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, how to do that?&lt;/p&gt;
&lt;h2&gt;Command-line help&lt;/h2&gt;
&lt;p&gt;I hoped that the tool would give me useful help if I asked, and it
did:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LibraryHippo&amp;gt;flake8  -h
Usage: flake8 [options] input ...

Options:
  --version             show program's version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         print status messages, or debug with -vv
  -q, --quiet           report only file names, or nothing with -qq
  --first               show first occurrence of each error
  --exclude=patterns    exclude files or directories which match these comma
                        separated patterns (default:
                        .svn,CVS,.bzr,.hg,.git,__pycache__)
  --filename=patterns   when parsing directories, only check filenames
                        matching these comma separated patterns (default:
                        *.py)
  --select=errors       select errors and warnings (e.g. E,W6)
  --ignore=errors       skip errors and warnings (e.g. E4,W)
  --show-source         show source code for each error
  --show-pep8           show text of PEP 8 for each error (implies --first)
  --statistics          count errors and warnings
  --count               print total number of errors and warnings to standard
                        error and set exit code to 1 if total is not null
  --max-line-length=n   set maximum allowed line length (default: 79)
  --hang-closing        hang closing bracket instead of matching indentation
                        of opening bracket's line
  --format=format       set the error format [default|pylint|&amp;lt;custom&amp;gt;]
  --diff                report only lines changed according to the unified
                        diff received on STDIN
  -j JOBS, --jobs=JOBS  number of jobs to run simultaneously, or 'auto'
  --exit-zero           exit with code 0 even if there are errors
  --builtins=BUILTINS   define more built-ins, comma separated
  --doctests            check syntax of the doctests
  --max-complexity=MAX_COMPLEXITY
                        McCabe complexity threshold
  --install-hook        Install the appropriate hook for this repository.

  Testing Options:
    --benchmark         measure processing speed

  Configuration:
    The project options are read from the [flake8] section of the tox.ini
    file or the setup.cfg file located in any parent folder of the path(s)
    being processed.  Allowed options are: exclude, filename, select,
    ignore, max-line-length, hang-closing, count, format, quiet, show-
    pep8, show-source, statistics, verbose, jobs, builtins, doctests, max-
    complexity.

    --config=path       user config file location (default:
                        C:\PortableApps\Home\.flake8)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seems comprehensive. I bet a bunch of those would be quite handy
in time, but right now, it looked like I wanted &lt;code&gt;--select&lt;/code&gt; to limit
the kinds of complaints. Based on the example, I figured I could use a
single letter to include a whole class of complaints. And it looked like
&lt;code&gt;--exclude&lt;/code&gt; would keep flake8 from examining BeautifulSoup:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LibraryHippo&amp;gt;flake8 App --select=F --exclude=BeautifulSoup.py
App\cardchecker.py:6:1: F401 'DeadlineExceededError' imported but unused
App\cardchecker.py:61:13: F841 local variable 'name' is assigned to but never used
App\cardchecker.py:71:37: F821 undefined name 'clock'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were complaints about other files, but the total count was down to
31, which was quite manageable. The "F" codes come from PyFlakes, and
don't necessarily mean "fatal" like I first thought. Some, such as
F841, are valid problems, but hardly catastrophic. Still, it was a
small matter to fix all the "F"s in the code. Later on, I went back,
expanding to changing the &lt;code&gt;--select&lt;/code&gt; to &lt;code&gt;F,E&lt;/code&gt; and eventually omitting
it altogther.&lt;/p&gt;
&lt;h2&gt;Command-line arguments are so tedious&lt;/h2&gt;
&lt;p&gt;Always specifying options to ignore files or set maximum line lengths
(79 is just too short even for an editor taking up the left half of my
screen) can get old fast, so flake8 lets you put ever-repeated
settings in a file. As promised, the following &lt;code&gt;setup.cfg&lt;/code&gt; file lets
me just run &lt;code&gt;flake8 App&lt;/code&gt; and get the same results as above:&lt;/p&gt;
&lt;pre&gt;&lt;code class="ini"&gt;[flake8]
exclude = BeautifulSoup.py
select = F&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Handy extension: naming&lt;/h2&gt;
&lt;p&gt;It's possible to write extensions for flake8, and a number already
exist. In fact, mccabe looks to be implemented as an extension (and
maybe the others, I didn't check). On a lark, I went looking and found
the &lt;a href="https://pypi.python.org/pypi/pep8-naming"&gt;pep8-naming&lt;/a&gt;
extension, which checks PEP 8 naming conventions (something
not fully covered by pep8, I guess). Installation via pip was simple
and now&lt;br&gt;
&lt;code&gt;flake8 --version&lt;/code&gt; reports&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2.2.2 (pep8: 1.5.7, pyflakes: 0.8.1, mccabe: 0.2.1, naming: 0.2.2)
CPython 2.7.2 on Windows&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(And just running flake8 shows a whole bunch of "N8*"
complaints such as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;App\wpl.py:227:17: N806 variable in function should be lowercase
App\gael\memcache.py:16:11: N801 class names should use CapWords convention
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that's my problem to deal with.)&lt;/p&gt;
&lt;p&gt;Writing new extensions doesn't look to be too difficult, if anyone
listening is interested in helping the tool spell-check my symbol
names (and maybe comments).&lt;/p&gt;
&lt;h2&gt;Impressions&lt;/h2&gt;
&lt;p&gt;A very useful static analysis tool that is easy to set up, runs
quickly, and is configurable enough to start working on almost any
codebase. So far the complaint descriptions seem good, and I can
quickly resolve reported problems without consulting a manual. The
extension ecosystem provides even more power, if you need it.&lt;/p&gt;
&lt;h3&gt;Will I Use It?&lt;/h3&gt;
&lt;p&gt;Absolutely, and you should too.&lt;/p&gt;
&lt;p&gt;I'm so committed to it that I wrote a "deploy.bat" file that will only
deploy to Google App Engine if flake8 doesn't complain.&lt;/p&gt;</content><category term="Development"></category></entry><entry><title>Making a Duck-Dog using FakeItEasy's CallsBaseMethod(s)</title><link href="https://blairconrad.com/2014/08/29/making-a-duck-dog-using-fakeiteasys-callsbasemethods/" rel="alternate"></link><published>2014-08-29T00:00:00-04:00</published><updated>2014-08-29T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2014-08-29:/2014/08/29/making-a-duck-dog-using-fakeiteasys-callsbasemethods/</id><summary type="html">&lt;p&gt;A while back, Roman Turovskyy wrote
&lt;a href="http://elekslabs.com/2014/03/fakeiteasy-be-careful-when-wrapping.html"&gt;FakeItEasy: Be Careful When Wrapping an Existing Object&lt;/a&gt;,
an interesting post highlighting some of the difficulties of faking
classes (as opposed to interfaces, which by virtue of having no
behaviour of their own, are quite a bit more predictable). It's
well-written and I enjoyed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while back, Roman Turovskyy wrote
&lt;a href="http://elekslabs.com/2014/03/fakeiteasy-be-careful-when-wrapping.html"&gt;FakeItEasy: Be Careful When Wrapping an Existing Object&lt;/a&gt;,
an interesting post highlighting some of the difficulties of faking
classes (as opposed to interfaces, which by virtue of having no
behaviour of their own, are quite a bit more predictable). It's
well-written and I enjoyed it, but he overlooked a small point. I
figured others may easily make the same omission, so I'd like to
explain why the example from that post works as it does, and to
provide an alternative solution.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Mr. Turovskyy supposes we want to fake out the following &lt;code&gt;Dog&lt;/code&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dog&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Bark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bark!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;BarkBark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Bark&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Bark&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;He notes that the default behaviour of a fake Dog, as made by &lt;code&gt;dog =
A.Fake&amp;lt;Dog&amp;gt;()&lt;/code&gt;, is for both &lt;code&gt;Bark&lt;/code&gt; and &lt;code&gt;BarkBark&lt;/code&gt; to return the empty
string, which is not always desirable.&lt;/p&gt;
&lt;p&gt;His next step is to create a fake by &lt;strong&gt;wrapping a Dog object&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;Dog realDog = newDog();
Dog dog = A.Fake&amp;lt;Dog&amp;gt;(x =&amp;gt; x.Wrapping(realDog));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;Bark&lt;/code&gt; and &lt;code&gt;BarkBark&lt;/code&gt; return the original (expected) strings.&lt;/p&gt;
&lt;p&gt;Then Mr. Turovskyy addresses customizing the fake object to change
the way it barks.&lt;/p&gt;
&lt;p&gt;Here, things break down a little bit. His desired goal, of using
&lt;code&gt;A.CallTo&lt;/code&gt; to override &lt;code&gt;Bark&lt;/code&gt; to return "Quack!" works, but when
&lt;code&gt;BarkBark&lt;/code&gt; is called, it &lt;strong&gt;still returns "Bark!Bark!"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;He comments&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For those who know how virtual methods work, this looks very
counter-intuitive.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that's completely true. The problem is that &lt;strong&gt;when a fake wraps an
object, we're using a composition model, not inheritance&lt;/strong&gt;. Thus the
fake Dog knows to call the real dog's &lt;code&gt;BarkBark&lt;/code&gt; method, but &lt;em&gt;the real
dog doesn't know about the fake Dog at all&lt;/em&gt;, so it just calls its own
&lt;code&gt;Bark&lt;/code&gt; method, which returns "Bark!".&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;Wrapping&lt;/code&gt; option and then overriding &lt;code&gt;Bark&lt;/code&gt; on the fake is
equivalent to writing this manual wrapper:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;public class WrappingDog: Dog
{
    private readonly Dog realDog;

    public WrappingDog(Dog realDog)
    {
        this.realDog = realDog;
    }

    public override string Bark()
    {
        return "Quack!";
    }

    public override string BarkBark()
    {
        return this.realDog.BarkBark();
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mr. Turovskyy suggests getting the desired behaviour by writing a
manual &lt;code&gt;FakeDog&lt;/code&gt; that overrides &lt;code&gt;Bark&lt;/code&gt;, which will work, but is
tedious and discards the benefits that FakeItEasy can provide.&lt;/p&gt;
&lt;h2&gt;Another Way to Access Original Behaviour&lt;/h2&gt;
&lt;p&gt;FakeItEasy can be used to get the desired behaviour. It provides a
&lt;code&gt;CallsBaseMethod&lt;/code&gt; method when configuring a fake. It does just what
you'd hope it would. Witness:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;Dog dog = A.Fake&amp;lt;Dog&amp;gt;();
A.CallTo(() =&amp;gt; dog.BarkBark()).CallsBaseMethod();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This tells the fake Dog to call the real &lt;code&gt;Dog.BarkBark&lt;/code&gt; when its
&lt;code&gt;BarkBark&lt;/code&gt; method is invoked. When this is combined with an override
for &lt;code&gt;Bark&lt;/code&gt;, we can write this passing test:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;[Test]
public void BarkBark_CallsBaseMethod_UsesOverriddenBark()
{
    Dog dog = A.Fake&amp;lt;Dog&amp;gt;();

    A.CallTo(() =&amp;gt; dog.BarkBark()).CallsBaseMethod();
    A.CallTo(() =&amp;gt; dog.Bark()).Returns("Quack!");

    string result = dog.BarkBark();

    Assert.That(result, Is.EqualTo("Quack!Quack!"));
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Call Base Methods More Conveniently&lt;/h2&gt;
&lt;p&gt;As of &lt;a href="https://github.com/FakeItEasy/FakeItEasy/releases/tag/1.24.0"&gt;FakeItEasy 1.24.0&lt;/a&gt;, there's an additional way to
do this, and it may appeal more to users who want many methods on
their fake to call the original class's version. There's a new
&lt;a href="https://github.com/FakeItEasy/FakeItEasy/wiki/Creating-Fakes#options"&gt;fake creation option&lt;/a&gt; called &lt;a href="https://github.com/FakeItEasy/FakeItEasy/wiki/Calling-base-methods#configuring-all-methods-at-once"&gt;&lt;code&gt;CallsBaseMethods&lt;/code&gt;&lt;/a&gt;. It was
&lt;a href="https://github.com/FakeItEasy/FakeItEasy/issues/192"&gt;proposed&lt;/a&gt; by &lt;a href="http://alxandr.me/"&gt;Aleksander Heintz&lt;/a&gt;, who also provided
nearly the complete implementation. When used, it will cause &lt;em&gt;every&lt;/em&gt;
method on a fake to delegate to the faked type's implementation, if there
is one. So the previous test could be written as&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;[Test]
public void BarkBark_CallsBaseMethod_UsesOverriddenBark()
{
    Dog dog = A.Fake&amp;lt;Dog&amp;gt;(options =&amp;gt; options.CallsBaseMethods());

    A.CallTo(() =&amp;gt; dog.Bark()).Returns("Quack!");

    string result = dog.BarkBark();

    Assert.That(result, Is.EqualTo("Quack!Quack!"));
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The change in the first line means that when &lt;code&gt;dog&lt;/code&gt; is created, every
method will delegate to the version on &lt;code&gt;Dog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;Bark&lt;/code&gt; is overridden, and the base &lt;code&gt;BarkBark&lt;/code&gt; is able to use the
new version.&lt;/p&gt;
&lt;p&gt;Now we can realize our dream of having a
&lt;a href="http://seuss.wikia.com/wiki/Duck-Dog"&gt;Seussian DuckDog&lt;/a&gt;:
&lt;figure&gt;
  &lt;img src="https://blairconrad.com/images/Duck-Dog.jpg"&gt;
&lt;/figure&gt;&lt;/p&gt;</content><category term="Development"></category><category term="FakeItEasy"></category><category term=".NET"></category></entry><entry><title>Automatically Printing Rake (or other Ruby) Variables</title><link href="https://blairconrad.com/2014/06/05/automatically-printing-rake-or-other-ruby-variables/" rel="alternate"></link><published>2014-06-05T00:00:00-04:00</published><updated>2014-06-05T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2014-06-05:/2014/06/05/automatically-printing-rake-or-other-ruby-variables/</id><summary type="html">&lt;p&gt;The &lt;a href="http://fakeiteasy.github.io/"&gt;FakeItEasy&lt;/a&gt; rakefile contains a &lt;code&gt;vars&lt;/code&gt; target
(brainchild of &lt;a href="http://adamralph.com/"&gt;Adam Ralph&lt;/a&gt;) that can be used to print out
the local variables defined in the script. Mostly these are static
variables, such as the path to the &lt;a href="http://nunit.org/"&gt;NUnit&lt;/a&gt; command, but some,
such as the upcoming FakeItEasy version, are computed. Logging these …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://fakeiteasy.github.io/"&gt;FakeItEasy&lt;/a&gt; rakefile contains a &lt;code&gt;vars&lt;/code&gt; target
(brainchild of &lt;a href="http://adamralph.com/"&gt;Adam Ralph&lt;/a&gt;) that can be used to print out
the local variables defined in the script. Mostly these are static
variables, such as the path to the &lt;a href="http://nunit.org/"&gt;NUnit&lt;/a&gt; command, but some,
such as the upcoming FakeItEasy version, are computed. Logging these
computed variables can help debug misbehaving builds.&lt;/p&gt;
&lt;p&gt;If ever something goes wrong, we can check the &lt;a href="http://www.jetbrains.com/teamcity/"&gt;TeamCity&lt;/a&gt;
build log and see something like this:&lt;/p&gt;
&lt;pre&gt;
assembly_info:     Source/CommonAssemblyInfo.cs
mspec_command:     Source/packages/Machine.Specifications.0.8.0/tools/mspec-clr4.exe
nuget_command:     Source/packages/NuGet.CommandLine.2.8.0/tools/NuGet.exe
nunit_command:     Source/packages/NUnit.Runners.2.6.3/tools/nunit-console.exe
nuspec:            Source/FakeItEasy.nuspec
output_folder:     Build
repo:              FakeItEasy/FakeItEasy
solution:          Source/FakeItEasy.sln
ssl_cert_file_url: http://curl.haxx.se/ca/cacert.pem
version:           1.21.0

integration_tests:
  Source/FakeItEasy.IntegrationTests/bin/Release/FakeItEasy.IntegrationTests.dll
  Source/FakeItEasy.IntegrationTests.VB/bin/Release/FakeItEasy.IntegrationTests.VB.dll

release_body:
  * **Changed**: _&amp;lt;description&amp;gt;_ - _#&amp;lt;issue number&amp;gt;_
  * **New**: _&amp;lt;description&amp;gt;_ - _#&amp;lt;issue number&amp;gt;_
  * **Fixed**: _&amp;lt;description&amp;gt;_ - _#&amp;lt;issue number&amp;gt;_

  With special thanks for contributions to this release from:

  * _&amp;lt;user's actual name&amp;gt;_ - _@&amp;lt;github_userid&amp;gt;_

release_issue_body:
  **Ready** when all other issues forming part of the release are **Done**.

  - [ ] run code analysis in VS in *Release* mode and address violations (send a regular PR which must be merged before continuing)
  - [ ] check build, update draft release in [GitHub UI](https://github.com/FakeItEasy/FakeItEasy/releases)
         including release notes, mentioning non-owner contributors, if any
&amp;hellip;
&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/FakeItEasy/FakeItEasy/blob/343a7a221906cc4c14971b46c3731c8a072eaf51/rakefile.rb#L36"&gt;Originally&lt;/a&gt;, the &lt;code&gt;vars&lt;/code&gt; task was hand-written, so
whenever we added a new variable we had to update the task. Not too
long ago, I added a new variable, and (surprisingly) remembered to update
&lt;code&gt;vars&lt;/code&gt;. However, Adam noticed that I had put the &lt;code&gt;puts&lt;/code&gt; statement in
the task in the wrong place, so the declaration order didn't match the
printed order. A small thing, but the small things matter.&lt;/p&gt;
&lt;p&gt;So, we had a chat about the best way to present the
variables. Declaration order is attractive, but I pushed a different
approach: first, separating the variables with short values, such as
&lt;code&gt;assembly_info&lt;/code&gt;, from variables with long values, such as
&lt;code&gt;release_body&lt;/code&gt;. This keeps the short values from becoming lost in the
noise of the longer ones.  Second: sort lexicographically within the
groups, to aid scanning.&lt;/p&gt;
&lt;p&gt;We came to an agreement, but as I started to make the change, I
thought, "Why make humans worry about this? Computers are good at
partitioning and sorting." So, after a quick search for something that
would allow printing of local Ruby variables, I found
&lt;a href="http://www.ruby-doc.org/core-2.0.0/Kernel.html#method-i-local_variables"&gt;&lt;code&gt;local_variables&lt;/code&gt;&lt;/a&gt;, and rewrote the task:&lt;/p&gt;
&lt;pre&gt;&lt;code class="ruby"&gt;desc "Print all variables"
task :vars do
  print_vars(local_variables.sort.map { |name| [name.to_s, (eval name.to_s)] })  
end

def print_vars(variables)

  scalars = []
  vectors = []

  variables.each { |name, value|
    if value.respond_to?('each')
      vectors &lt;&lt; [name, value.map { |v| v.to_s }]
    else
      string_value = value.to_s
      lines = string_value.lines
      if lines.length &gt; 1
        vectors &lt;&lt; [name, lines]
      else
        scalars &lt;&lt; [name, string_value]
      end
    end
  }

  scalar_name_column_width = scalars.map { |s| s[0].length }.max
  scalars.each { |name, value| 
    puts "#{name}:#{' ' * (scalar_name_column_width - name.length)} #{value}"
  }

  puts
  vectors.each { |name, value| 
    puts "#{name}:"
    puts value.map {|v| "  " + v }
    puts ""
  }
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Points of interest:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The task delegates to a function right away, to avoid creating new
  variables that would be found by &lt;code&gt;local_variables&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The first thing the method does is partition variables into
  "scalars", to be rendered on the same line as the variable name, and
  "vectors", which have multiple elements or lines, and are rendered
  &lt;em&gt;below&lt;/em&gt; the variable name.&lt;/li&gt;
&lt;li&gt;As a bonus, the scalar variable names padded so the values can all land on a "tab stop"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Best of all, now we can add rake variables willy-nilly, with nary a
thought about printing them out. It just happens.&lt;/p&gt;</content><category term="Development"></category><category term="rake"></category><category term="ruby"></category><category term="local_variables"></category></entry><entry><title>Debugging a Pickle of a Stack Overflow on Google App Engine</title><link href="https://blairconrad.com/2014/05/05/debugging-a-pickle-of-a-stack-overflow-on-google-app-engine/" rel="alternate"></link><published>2014-05-05T00:00:00-04:00</published><updated>2014-05-05T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2014-05-05:/2014/05/05/debugging-a-pickle-of-a-stack-overflow-on-google-app-engine/</id><summary type="html">&lt;p&gt;A few days ago, a user e-mailed me a bug report for
&lt;a href="http://libraryhippo.com"&gt;LibraryHippo&lt;/a&gt;. For the previous 55 days, she'd been
receiving the same (erroneous) morning e-mail about what library
materials she had due. However, when she checked her family's account
summary on the web page, it was correct.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(The exact …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;A few days ago, a user e-mailed me a bug report for
&lt;a href="http://libraryhippo.com"&gt;LibraryHippo&lt;/a&gt;. For the previous 55 days, she'd been
receiving the same (erroneous) morning e-mail about what library
materials she had due. However, when she checked her family's account
summary on the web page, it was correct.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(The exact cause of the problem won't be of interest to many people,
but I thought the way it presented, and how I diagnosed it, might
help someone out. Read on!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I checked the logs, and sure enough, there was an error. Sort of like this:&lt;/p&gt;
&lt;pre&gt;
I 2014-04-28 14:10:43.429 checking [patron name redacted] Waterloo
I 2014-04-28 14:10:47.550 saving checked card for [patron name redacted]
&lt;b&gt;E 2014-04-28 14:10:51.061 Failed to save checked card. Continuing.&lt;/b&gt;
Traceback (most recent call last):
  File "/base/data/home/apps/s~libraryhippo27/1.368776574735783966/libraryhippo.py", line 380, in save_checked_card
    checked_card.payload = card_status
  File "/base/data/home/runtimes/python27/python27_lib/versions/1/google/appengine/ext/db/__init__.py", line 614, in __set__
    value = self.validate(value)
  File "/base/data/home/apps/s~libraryhippo27/1.368776574735783966/gael/objectproperty.py", line 11, in validate
    result = pickle.dumps(value)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 1374, in dumps
    Pickler(file, protocol).dump(obj)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 224, in dump
    self.save(obj)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 725, in save_inst
    save(stuff)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self

&lt;b&gt;[about 80 lines of stack trace elided]&lt;/b&gt;

  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 663, in _batch_setitems
    save(v)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 725, in save_inst
    save(stuff)
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 286, in save
    f(self, obj) # Call unbound method with explicit self
  File "/base/data/home/runtimes/python27/python27_dist/lib/python2.7/pickle.py", line 649, in save_dict
    self._batch_setitems(obj.iteritems())
  File "/base/data/home/runtimes/python27/python27_dist/...(length 98720)
I 2014-04-28 14:10:51.275 Saved; key: __appstats__:043300, part: 190 bytes, full: 65479 bytes, overhead: 0.004 + 0.005; link: http://libraryhippo27.appspot.com/_ah/stats/details?time=1398708643356
&lt;/pre&gt;

&lt;p&gt;Whenever LibraryHippo checks a patron's library card, it saves the
results to the datastore to be used to construct the next day's
e-mails, but an inability to save doesn't keep the results from being
displayed on the web page. So that part made sense. &lt;/p&gt;
&lt;p&gt;The next step was to figure out what was going wrong with the save.
The logs indicated that &lt;a href="https://docs.python.org/2/library/pickle.html"&gt;pickle&lt;/a&gt; was using more stack frames
than were available.&lt;/p&gt;
&lt;h2&gt;I try to debug it&lt;/h2&gt;
&lt;p&gt;I added a copy of the offending card to my family's account on the live site. Same problem.
Then I fired up the dev environment at home and did the same thing. Everything worked like a charm.&lt;/p&gt;
&lt;p&gt;That was unexpected. So, as a last resort, I started thinking.&lt;/p&gt;
&lt;h2&gt;Why so deep?&lt;/h2&gt;
&lt;p&gt;The structure that was being pickled (&lt;code&gt;CardStatus&lt;/code&gt;) was quite
flat. Here are the involved classes' definitions. Unless noted
otherwise, everything is a string or datetime:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;class CardStatus:
    def __init__(self, card, items=None, holds=None):

        self.library_name = card.library.name
        self.patron_name = card.name
        self.items = items or []  # Items
        self.holds = holds or []  # Holds
        self.info = []            # strings
        self.expires = datetime.date.max

class Thing():
    def __init__(self, library, card):

        self.library_name = library.name
        self.user = card.name
        self.title = ''
        self.author = ''
        self.url = ''
        self.status = ''
        self.status_notes = []    # strings

class Hold(Thing):
    def __init__(self, library, card):
        Thing.__init__(self, library, card)

        self.pickup = ''
        self.holds_url = ''
        self.expires = datetime.date.max

class Item(Thing):
    def __init__(self, library, card):
        Thing.__init__(self, library, card)

        self.items_url = ''&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, one level for the &lt;code&gt;CardStatus&lt;/code&gt;, one for &lt;code&gt;Thing&lt;/code&gt;, one for &lt;code&gt;Hold&lt;/code&gt;
(or &lt;code&gt;Item&lt;/code&gt;), one for a list, and one for the &lt;code&gt;status_notes&lt;/code&gt; strings in
the list. That's 5 levels. And probably pickle encodes a &lt;code&gt;dict&lt;/code&gt; in a
few of the of the complex types. Let's be generous and say 10 levels,
each of which take maybe 5 nested pickle functions. That's about
50. Plus however deep we are in the stack before the pickling
happens. That shouldn't be more than &lt;strong&gt;100&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;How deep is too deep?&lt;/h2&gt;
&lt;p&gt;Popular wisdom on the web seems to be to increase the recursion limit
when pickle runs into these kinds of problems. I was loath to do this,
as I'd be constantly worrying about what depth to allow and whether
it'd be enough and so on.&lt;/p&gt;
&lt;p&gt;While I dithered over that, my wife called to me from the television
room, "Just set the limit higher. That should help your user for now
and it will give you more time to work on the problem."&lt;/p&gt;
&lt;p&gt;So I did. I was worried that the App Engine runtime wouldn't &lt;em&gt;let&lt;/em&gt; me
change the recursion limit, so I used
&lt;a href="https://docs.python.org/2/library/sys.html#sys.getrecursionlimit"&gt;sys.getrecursionlimit&lt;/a&gt; to log the depth,
&lt;a href="https://docs.python.org/2/library/sys.html#sys.setrecursionlimit"&gt;sys.setrecursionlimit&lt;/a&gt;, and
&lt;code&gt;sys.getrecursionlimit&lt;/code&gt; again to verify.&lt;/p&gt;
&lt;p&gt;Turns out that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The default recursion limit on App Engine's environment is &lt;strong&gt;800&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;can&lt;/em&gt; change the limit. I went up to &lt;strong&gt;20000&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the dev environment the limit is &lt;strong&gt;1000&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The higher limit on the production server fixed things. I relaxed a
little, and started thinking.&lt;/p&gt;
&lt;p&gt;Maybe the 800/1000 difference accounted for things working at home,
but not in production. I used &lt;code&gt;sys.setrecursionlimit&lt;/code&gt; to change the
limit at home, and reproduced the error. Huzzah! Now I could move more
quickly.&lt;/p&gt;
&lt;h2&gt;Inserting diagnostics into pickle&lt;/h2&gt;
&lt;p&gt;Back to the question of why pickle was recursing so deeply. I don't
routinely debug Python, relying instead on the power of logging
statements. Thus, I decided to provide a custom pickler that did
normal pickling things, but that also, for every object pickled,
logged the stack depth, the object type, and its representation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import pickle
import logging
import traceback

class SpyingPickler(pickle.Pickler, object):
    def save(self, obj):
        logging.info("depth: %d, obj_type: %s, obj: %s",
                     len(traceback.extract_stack()),
                     type(obj), repr(obj))
        super(SpyingPickler, self).save(obj)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran this, and got reams of data. Scads and scads and scads, including what looked like to be large HTML documents. So I took out the &lt;code&gt;repr(obj)&lt;/code&gt; and repeated. This was more manageable.&lt;/p&gt;
&lt;pre&gt;
&amp;hellip;
depth: 176, obj_type: &lt;class 'BeautifulSoup.NavigableString'&gt;
depth: 179, obj_type: &lt;type 'function'&gt;
depth: 179, obj_type: &lt;type 'tuple'&gt;
depth: 182, obj_type: &lt;type 'type'&gt;
depth: 182, obj_type: &lt;type 'type'&gt;
depth: 182, obj_type: &lt;type 'unicode'&gt;
&amp;hellip;
&lt;/pre&gt;

&lt;p&gt;Already we can see that we're quite deep in the stack, but the real
surprise was the &lt;code&gt;BeautifulSoup.NavigableString&lt;/code&gt;. LibraryHippo uses
&lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt; to scrape the libraries' web pages. A
&lt;a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigablestring"&gt;&lt;code&gt;NavigableString&lt;/code&gt;&lt;/a&gt; is basically a Unicode string
plus navigation. To support the navigation, the instance points at
what looks to be a DOM model of &lt;strong&gt;the entire parsed HTML page&lt;/strong&gt;. That
explains the deep deep recursion.&lt;/p&gt;
&lt;p&gt;The offending objects were in the &lt;code&gt;pickup&lt;/code&gt; field of the &lt;code&gt;Hold&lt;/code&gt;
class. A quick fix to ensure we're storing a plain string, and the
problem &lt;a href="https://code.google.com/p/libraryhippo/source/detail?r=fd04415d2009"&gt;was resolved&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What a difference&lt;/h2&gt;
&lt;p&gt;Aside from the obvious effect of correct e-mails, I was curious to see what other differences this change made.&lt;/p&gt;
&lt;p&gt;Before the fix, the serialization descended to a stack depth of
&lt;strong&gt;892&lt;/strong&gt;, and produced a &lt;strong&gt;546221&lt;/strong&gt;-byte blob.  After, the maximum
depth is &lt;strong&gt;52&lt;/strong&gt;, and the blob size is &lt;strong&gt;10779&lt;/strong&gt; bytes. So everyone
should benefit a little from lower resource usage and quicker
card-checking. Fortunately, LibraryHippo isn't popular enough to exceed
the free quotas, so I wasn't paying extra for compute or storage. Then
again, if I had been, maybe I would've noticed the problem before a user
did.&lt;/p&gt;</content><category term="Development"></category><category term="pickle"></category><category term="AppEngine"></category><category term="LibraryHippo"></category><category term="Python"></category></entry><entry><title>User-Sourced Calendar Feeds for Waterloo Yard Waste Pickup</title><link href="https://blairconrad.com/2014/04/16/user-sourced-calendar-feeds-for-waterloo-yard-waste-pickup/" rel="alternate"></link><published>2014-04-16T00:00:00-04:00</published><updated>2014-04-16T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2014-04-16:/2014/04/16/user-sourced-calendar-feeds-for-waterloo-yard-waste-pickup/</id><summary type="html">&lt;p&gt;(Thanks to &lt;a href="http://blog.jonudell.net/"&gt;Jon Udell&lt;/a&gt;, whose insightful posts
are the only reason this would ever have occurred to me.)&lt;/p&gt;
&lt;p&gt;I live in &lt;a href="http://www.waterloo.ca/"&gt;Waterloo, Ontario&lt;/a&gt;, a city with weekly
residential waste collection. My collection day is Monday. In the warm months, there's an
additional biweekly (that's every 2 weeks, not twice a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to &lt;a href="http://blog.jonudell.net/"&gt;Jon Udell&lt;/a&gt;, whose insightful posts
are the only reason this would ever have occurred to me.)&lt;/p&gt;
&lt;p&gt;I live in &lt;a href="http://www.waterloo.ca/"&gt;Waterloo, Ontario&lt;/a&gt;, a city with weekly
residential waste collection. My collection day is Monday. In the warm months, there's an
additional biweekly (that's every 2 weeks, not twice a week)
collection of what's called &lt;em&gt;yard waste&lt;/em&gt;: grass clippings, raked-up
leaves, tree branches, and so on.&lt;/p&gt;
&lt;p&gt;People in my area (including me) have trouble remembering &lt;em&gt;which&lt;/em&gt;
weeks are yard waste weeks.  This means that every two weeks I get to
see collections of plant material left at the curb outside people's
homes and then brought in a day or two later, only to reappear the
next week.&lt;/p&gt;
&lt;p&gt;I use tools to augment my memory. Every year, at
the beginning of the warm season, I visit the Region of Waterloo's
website where I can learn about their &lt;a href="http://www.regionofwaterloo.ca/en/aboutTheEnvironment/seasonalservices.asp#yardwaste"&gt;Yard waste residential
collection program&lt;/a&gt;. Here I find links to two
PDFs: a &lt;a href="http://www.regionofwaterloo.ca/en/aboutTheEnvironment/resources/YardWastebrochure2013-14WEBREV.pdf#yardwaste"&gt;pretty version of the schedule for Waterloo&lt;/a&gt;, and an
&lt;a href="http://www.regionofwaterloo.ca/en/aboutTheEnvironment/resources/2014YardWasteSCHEDULEODAWEB.pdf"&gt;"accessible"&lt;/a&gt; version.&lt;/p&gt;
&lt;p&gt;I look at one of those schedules, and I create a recurrning Google
Calendar event. Then my phone tells me on Sunday night whether to haul
the tree parts to the street. It works really well.&lt;/p&gt;
&lt;p&gt;However, every year, I've wished that the Region provided an
&lt;a href="http://en.wikipedia.org/wiki/ICalendar"&gt;.iCalendar&lt;/a&gt; feed or created a Google Calendar for me so I
wouldn't have to do this. But I haven't done more than wish.&lt;/p&gt;
&lt;p&gt;This year, I'm doing more. For starters, I created a few Google
Calendars. One for me (and my fellow Monday-pickup people), and four
for everyone else in Waterloo (and Cambridge).  The Region's web site
gave me start and end weeks for pickups, so it was very easy to make a
biweekly repeating event, using these Google Calendar settings:&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt="Monday yard waste repeat schedule for Waterloo" src="https://blairconrad.com/images/yard-waste-repeat-details.png"&gt;
&lt;/figure&gt;

&lt;p&gt;Lo and behold, it shows up in my calendar:&lt;/p&gt;
&lt;figure&gt;
  &lt;img alt="Monday yard waste shown in Google Calendar" src="https://blairconrad.com/images/yard-waste-shown-in-calendar.png"&gt;
&lt;/figure&gt;

&lt;p&gt;I created the Tuesday through Friday calendars by making the obvious
modification to the schedule above.&lt;/p&gt;
&lt;p&gt;I put
[all the calendars on a separate page][yard-waste-collection-schedule]
that I intend to maintain until the Region provides replacements. Or I
move. Go! Get one for your collection day.&lt;/p&gt;
&lt;p&gt;Next, I'm going to pester the Region, showing them how easy it was to
do this and to see if they'd be willing to carry on with the work next
year. If something comes of it, I'll let you know.&lt;/p&gt;
&lt;p&gt;[yard-waste-collection-schedule]: {{ site.url }}/yard-waste-collection-schedule/&lt;/p&gt;</content><category term="Miscellany"></category><category term="icalendar"></category><category term="syndication"></category><category term="waterloo"></category><category term="diversions"></category></entry><entry><title>Limit FakeItEasy extension scanning with a bootstrapper</title><link href="https://blairconrad.com/2014/03/06/limit-fakeiteasy-extension-scanning-with-a-bootstrapper/" rel="alternate"></link><published>2014-03-06T00:00:00-05:00</published><updated>2014-03-06T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2014-03-06:/2014/03/06/limit-fakeiteasy-extension-scanning-with-a-bootstrapper/</id><summary type="html">&lt;p&gt;&lt;strong&gt;As of version &lt;a href="https://github.com/FakeItEasy/FakeItEasy/releases/tag/1.18.0"&gt;1.18.0&lt;/a&gt;, a client-supplied bootstrapper can be used to
determine which external assembly files are scanned during startup.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last time, I talked about how [FakeItEasy extension scanning had
improved in version 1.13.0][betterscan]. While this change has dramatically
improved startup times in many situations …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;As of version &lt;a href="https://github.com/FakeItEasy/FakeItEasy/releases/tag/1.18.0"&gt;1.18.0&lt;/a&gt;, a client-supplied bootstrapper can be used to
determine which external assembly files are scanned during startup.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last time, I talked about how [FakeItEasy extension scanning had
improved in version 1.13.0][betterscan]. While this change has dramatically
improved startup times in many situations, we recently &lt;a href="https://github.com/FakeItEasy/FakeItEasy/issues/130#issuecomment-33688273"&gt;received a
comment from one of our valued clients&lt;/a&gt; (and subsequently a &lt;a href="https://github.com/FakeItEasy/FakeItEasy/pull/251"&gt;pull
request with a proposed solution&lt;/a&gt;), detailing a situation where startup was
taking about 13 seconds, mostly due to a huge number of assemblies in
the working directory. Disabling &lt;a href="http://msdn.microsoft.com/en-us/library/ms404279(v=vs.110).aspx"&gt;shadow copy&lt;/a&gt; creation by the test
runner alleviated the pain, but the incident prompted a re-examination
of the issue.&lt;/p&gt;
&lt;p&gt;While disabling shadow copies should resolve most slow startup
problems caused by excessive working directory assemblies, and it may
&lt;a href="http://msdn.microsoft.com/en-us/library/ms404279(v=vs.110).aspx#StartupPerformance"&gt;improve performance in other ways&lt;/a&gt;, recommending this to clients
has always felt like a bit of a dodge to me, essentially pushing the
problem off to someone else. There was also the lingering fear that
someone would come back with a reason why the shadow copies were
necessary.&lt;/p&gt;
&lt;p&gt;We wanted to provide FakeItEasy's clients with a little more control
over the process of scanning for assemblies. So, we've implemented the
originally-proposed bootstrapper solution. &lt;/p&gt;
&lt;h2&gt;Using a custom bootstrapper&lt;/h2&gt;
&lt;p&gt;By default, after scanning all FakeItEasy-referencing assemblies
currently loaded in the AppDomain, FakeItEasy&amp;nbsp;1.18.0 will examine all DLLs in
the working directory. This behaviour can be changed by including in
the AppDomain a class that implements &lt;code&gt;FakeItEasy.IBootstrapper&lt;/code&gt;. As I
write, this is the only behaviour that the bootstrapper controls:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;/// &amp;lt;summary&amp;gt;
/// Provides a list of assembly file names to scan for extension points, such as
/// &amp;lt;see cref="IDummyDefinition"/&amp;gt;s, &amp;lt;see cref="IArgumentValueFormatter"/&amp;gt;s, and 
/// &amp;lt;see cref="IFakeConfigurator"/&amp;gt;s.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;returns&amp;gt;
/// A list of absolute paths pointing to assemblies to scan for extension points.
/// &amp;lt;/returns&amp;gt;
IEnumerable&amp;lt;string&amp;gt; GetAssemblyFileNamesToScanForExtensions();&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;

The best way to implement the interface is to **extend
`FakeItEasy.DefaultBootstrapper`**. This class defines the default
FakeItEasy setup behaviour, so using it as a base allows
clients to customize only those aspects of the initialization that
matter to them.

While any list of assembly files can be provided by
`GetAssemblyFileNamesToScanForExtensions`, I expect that most
extensions that are defined will already be loaded in the current
AppDomain, so the most common customization will be to disable
external assembly scanning, like so:

&amp;lt;pre&amp;gt;&amp;lt;code class="csharp"&amp;gt;public class NoExternalScanningBootstrapper : FakeItEasy.DefaultBootstrapper
{
    public override IEnumerable&amp;lt;string&amp;gt; GetAssemblyFilenamesToScanForExtensions()
    {
        return Enumerable.Empty&amp;lt;string&amp;gt;();
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, if there &lt;em&gt;were&lt;/em&gt; extensions defined in an external assembly
file or two, the &lt;code&gt;GetAssemblyFilenamesToScanForExtensions&lt;/code&gt;
implementation could return the paths to just those assemblies.&lt;/p&gt;
&lt;p&gt;[betterscan]: {% post_url 2013-07-08-better-formatter-auto-discovery-in-fakeiteasy-1.13.0 %}&lt;/p&gt;</content><category term="Development"></category><category term="FakeItEasy"></category></entry><entry><title>Better formatter auto-discovery in FakeItEasy 1.13.0</title><link href="https://blairconrad.com/2013/07/08/better-formatter-auto-discovery-in-fakeiteasy-1.13.0/" rel="alternate"></link><published>2013-07-08T00:00:00-04:00</published><updated>2013-07-08T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2013-07-08:/2013/07/08/better-formatter-auto-discovery-in-fakeiteasy-1.13.0/</id><summary type="html">&lt;p&gt;A few weeks ago, I wrote about &lt;a href="https://blairconrad.com/2013/06/17/fakeiteasys-argument-formatter-auto-discovery-boon-and-inconvenience/"&gt;the problems that FakeItEasy's
assembly scanning &lt;b&gt;was causing&lt;/b&gt;&lt;/a&gt; while it was looking for user-defined extensions. To recap,
FakeItEasy was scanning all assemblies in the AppDomain and the
working directory, looking for types that implemented
&lt;code&gt;IArgumentValueFormatter&lt;/code&gt;, &lt;code&gt;IDummyDefinition&lt;/code&gt;, or
&lt;code&gt;IFakeConfigurator&lt;/code&gt;. This process was quite slow …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few weeks ago, I wrote about &lt;a href="https://blairconrad.com/2013/06/17/fakeiteasys-argument-formatter-auto-discovery-boon-and-inconvenience/"&gt;the problems that FakeItEasy's
assembly scanning &lt;b&gt;was causing&lt;/b&gt;&lt;/a&gt; while it was looking for user-defined extensions. To recap,
FakeItEasy was scanning all assemblies in the AppDomain and the
working directory, looking for types that implemented
&lt;code&gt;IArgumentValueFormatter&lt;/code&gt;, &lt;code&gt;IDummyDefinition&lt;/code&gt;, or
&lt;code&gt;IFakeConfigurator&lt;/code&gt;. This process was quite slow. Worse, it raised
LoaderLock exceptions when debugging, and Runtime errors anytime I ran
my tests using the ReSharper test runner.&lt;/p&gt;
&lt;p&gt;At that time, I'd opened &lt;a href="https://github.com/FakeItEasy/FakeItEasy/issues/130"&gt;issue130&lt;/a&gt;, intended to allow configuration of the scanning
procedure. I'm happy to say that the issue has been closed "no
fix". Instead, I've contributed the fix for &lt;a href="https://github.com/FakeItEasy/FakeItEasy/issues/133"&gt;Issue 133 &amp;mdash; Improved performance of assembly scanning&lt;/a&gt;. It doesn't
introduce any configuration options, but streamlines the scanning
process.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;The &lt;strong&gt;original behaviour&lt;/strong&gt; was:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;find all the DLLs in the application directory&lt;/li&gt;
&lt;li&gt;load all the found DLLs&lt;/li&gt;
&lt;li&gt;find the distinct assemblies among those loaded from the directory and those already in the AppDomain&lt;/li&gt;
&lt;li&gt;scan each assembly and add all the types to a list&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;strong&gt;new behaviour&lt;/strong&gt;, heavily inspired by &lt;a href="http://nancyfx.org/"&gt;Nancy&lt;/a&gt;'s bootstrapper-finding code, is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;find all the DLLs in the application directory&lt;/li&gt;
&lt;li&gt;discard DLLs that are already part of the AppDomain - We don't even have to crack these files open again, since we already know everything about them. Note that this check &lt;strong&gt;examines the absolute paths to the DLL and the loaded assembly, and will be fooled by shadow copying&lt;/strong&gt;. So, if your test runner makes shadow copies, this time won't be saved. I turned off shadow copying with no ill effects (and a tremendous speedup), but your mileage may vary.&lt;/li&gt;
&lt;li&gt;load each remaining DLL &lt;em&gt;for reflection only&lt;/em&gt; - This may be faster, and it may not, but it has another big advantage - it &lt;strong&gt;doesn't cause any of the code in the assembly to execute&lt;/strong&gt;. (It was the execution of the assembly code that caused my LoaderLock and Runtime errors.)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for each assembly that references FakeItEasy, fully load it - If we don't do this, we can't scan for all the types in the assembly because &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When using the ReflectionOnly APIs, dependent assemblies must be pre-loaded or loaded on demand through the ReflectionOnlyAssemblyResolve event&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;according to the &lt;a href="https://github.com/FakeItEasy/FakeItEasy/issues/133#issuecomment-19728061"&gt;error I got when I tried it&lt;/a&gt;. Note that excluding assemblies that don't reference FakeItEasy means &lt;strong&gt;we only examine assemblies that could possibly define formatting/dummy/configuration extensions&lt;/strong&gt;, cutting down on the scanning time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scan each of the following, remembering all contained types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the assemblies we just loaded from files,&lt;/li&gt;
&lt;li&gt;the AppDomain assemblies that reference FakeItEasy, and&lt;/li&gt;
&lt;li&gt;FakeItEasy - We need to include FakeItEasy explicitly because it
  defines its own formatter extensions, and since we're otherwise
  only looking at assemblies that reference FakeItEasy, we'd miss
  it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This new scanning behaviour has been released in the &lt;a
href="https://www.nuget.org/packages/FakeItEasy/1.13.0"&gt;FakeItEasy
1.13.0 build&lt;/a&gt;, and has been a boon to me already. I'm enjoying the
faster test runs (0.534 seconds for my first test, versus 1.822 (or
more)) and the improved stability of the test runner. NuGet it now.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="FakeItEasy"></category><category term="Nancy"></category></entry><entry><title>Watch your spaces - HTTP Error 500.19 - Internal Server Error</title><link href="https://blairconrad.com/2013/07/02/watch-your-spaces-http-error-500.19-internal-server-error/" rel="alternate"></link><published>2013-07-02T00:00:00-04:00</published><updated>2013-07-02T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2013-07-02:/2013/07/02/watch-your-spaces-http-error-500.19-internal-server-error/</id><summary type="html">&lt;p&gt;Late last week at the Day Job, a colleague came to me with a problem. The web service he was trying to hit was throwing an error he'd never seen before:&lt;/p&gt;
&lt;blockquote style="color:#CC0000;"&gt;
HTTP Error 500.19 - Internal Server Error
The requested page cannot be accessed because the related configuration data for …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Late last week at the Day Job, a colleague came to me with a problem. The web service he was trying to hit was throwing an error he'd never seen before:&lt;/p&gt;
&lt;blockquote style="color:#CC0000;"&gt;
HTTP Error 500.19 - Internal Server Error
The requested page cannot be accessed because the related configuration data for the page is invalid.
&lt;/blockquote&gt;

&lt;p&gt;I'd never seen it before either, at least not in this exact incarnation. Take a look&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blairconrad.com/images/500-191-internal-server-error.png"&gt;&lt;img style="display: block; margin-left: auto; margin-right: auto;" src="https://blairconrad.com/images/500-191-internal-server-error-small.png" alt="screenshot of 500.19 error" width="500" height="334" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;In case the text isn't so clear, here are the details:&lt;/p&gt;
&lt;table style="border-collapse:collapse;border:1px solid black;width:50%;margin-left:25%;margin-right:25%;"&gt;
&lt;colgroup&gt;
  &lt;col style="background-color:#F8F8F8;" /&gt;
  &lt;col/&gt;
&lt;/colgroup&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Module&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;IpRestrictionModule&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Notification&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;BeginRequest&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Handler&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;WebServiceHandlerFactory-Integrated-4.0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Error Code&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;0x80072af9&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Requested URL&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;http://localhost:80/My.Virtual.Directory/Service.asmx&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Physical Path&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;C:\inetpub\wwwroot\My.Virtual.Directory\Service.asmx&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Logon Method&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;Not yet determined&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th style="border:none;padding:1px 3px;"&gt;Logon User&lt;/th&gt;&lt;td style="border:none;padding:1px 3px;"&gt;Not yet determined&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The errors suggested that we have problems with the configuration file, but the web.config was present (and well-formed), and there were no obvious permission problems, so it seems the file was being read. There was nothing in the event logs. Web searches yielded nothing that matched the &lt;code&gt;0x80072af9&lt;/code&gt; error code or the description of the error. Even ERR.exe, recommended by &lt;a href="http://blogs.iis.net/webtopics/archive/2010/03/08/troubleshooting-http-500-19-errors-in-iis-7.aspx"&gt;Troubleshooting HTTP 500.19 Errors in IIS 7&lt;/a&gt;, failed me.&lt;/p&gt;
&lt;p&gt;Fortunately, there were sibling virtual directories on the server, and they were working fine, even under the same App Pool. I knew that this virtual directory, unlike the others, restricted access to a whitelist of IP addresses. So, I changed the &lt;code&gt;security/ipSecurity&lt;/code&gt; node's &lt;code&gt;allowUnlisted&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, just in case for some reason the clients' IP addresses weren't being detected properly. No change.&lt;/p&gt;
&lt;p&gt;Frustrated, I removed the whole &lt;code&gt;security&lt;/code&gt; node. The service worked!&lt;/p&gt;
&lt;p&gt;So I took a closer look at the node:&lt;/p&gt;
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;security&amp;gt;
  &amp;lt;ipSecurity allowUnlisted="false"&amp;gt;
    &amp;lt;add ipAddress="127.0.0.1" allowed="true" /&amp;gt;
    &amp;lt;add ipAddress="1.2.3.4 " allowed="true" /&amp;gt;
  &amp;lt;/ipSecurity&amp;gt;
&amp;lt;/security&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check out that "1.2.3.4" ipAddress. Now check it again. It's actually
"1.2.3.4&lt;b&gt; &lt;/b&gt;", with a space at the end. (I bolded the space there,
just so you wouldn't miss it.) It seems that this messes up the IP
parsing, and IIS is completely flummoxed. Remove the space, and all is
well.&lt;/p&gt;</content><category term="Development"></category><category term="500-19"></category><category term="iis"></category><category term="iis7"></category></entry><entry><title>Fixated on Fixie - the birth of a new unit test runner</title><link href="https://blairconrad.com/2013/06/24/fixated-on-fixie-the-birth-of-a-new-unit-test-runner/" rel="alternate"></link><published>2013-06-24T00:00:00-04:00</published><updated>2013-06-24T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2013-06-24:/2013/06/24/fixated-on-fixie-the-birth-of-a-new-unit-test-runner/</id><summary type="html">&lt;p&gt;I enjoy reading about how software is made, and I like unit testing frameworks. So, when I heard about &lt;a href="http://www.headspring.com/author/patrick/"&gt;Patrick Plioi&lt;/a&gt;'s new project &lt;a href="http://plioi.github.io/fixie/"&gt;Fixie&lt;/a&gt;, I rushed to check it out.&lt;/p&gt;
&lt;p&gt;In this case, "check it out" doesn't mean "clone the repo and dig around the source code". Nor does …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I enjoy reading about how software is made, and I like unit testing frameworks. So, when I heard about &lt;a href="http://www.headspring.com/author/patrick/"&gt;Patrick Plioi&lt;/a&gt;'s new project &lt;a href="http://plioi.github.io/fixie/"&gt;Fixie&lt;/a&gt;, I rushed to check it out.&lt;/p&gt;
&lt;p&gt;In this case, "check it out" doesn't mean "clone the repo and dig around the source code". Nor does it mean "install the NuGet package and build something". Although I may do those things in the future.&lt;/p&gt;

&lt;p&gt;Nope. It means I read Mr. Plioi's articles about Fixie and its development. And I am having a great time. Moreso than hearing about Fixie's features (or more often lack of features), I'm enjoying seeing Mr. Plioi's approach to setting up a new project&lt;!--more--&gt;, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prototyping the scariest integration points first&lt;/li&gt;
&lt;li&gt;the importance of starting out with a one-click build, for himself and for potential future contributors&lt;/li&gt;
&lt;li&gt;streamlining, automating, or eliminating as much ceremony as possible&lt;/li&gt;
&lt;li&gt;bootstrapping, and more!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The articles are well-written and articulate, and mildly funny. They're trending a little more into the implementation of Fixie itself, rather than guiding philosophies, but I still find them interesting. And it's worth noting that all the while I was enjoying the articles, I was thinking in the back of my head "this is a great exercise, and very instructive, but I've no interest in actually &lt;i&gt;using&lt;/i&gt; Fixie&amp;mdash;I'm content with [NUnit](http://www.nunit.org/)". Until I read &lt;a href="http://www.headspring.com/dry-test-inheritance/"&gt;DRY Test Inheritance&lt;/a&gt;. I really liked the low-ceremony way conventions are used to locate test setups and teardowns. It hooked me. &lt;i&gt;Even though I am usually not a fan of test class inheritance and the scheme described in this article has more weight than the &lt;a href="https://github.com/plioi/fixie#default-convention"&gt;Default Convention&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Of course, we'll probably never switch at the Day Job, at least not until the &lt;a href="http://www.jetbrains.com/resharper/features/unit_testing.html"&gt;ReSharper test runner&lt;/a&gt; supports Fixie, but it might be fun to use for a small home project.&lt;/p&gt;</content><category term="Development"></category><category term="fixie"></category></entry><entry><title>FakeItEasy's argument formatter auto-discovery - boon and inconvenience</title><link href="https://blairconrad.com/2013/06/17/fakeiteasys-argument-formatter-auto-discovery-boon-and-inconvenience/" rel="alternate"></link><published>2013-06-17T00:00:00-04:00</published><updated>2013-06-17T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2013-06-17:/2013/06/17/fakeiteasys-argument-formatter-auto-discovery-boon-and-inconvenience/</id><summary type="html">&lt;ul&gt;
&lt;li&gt;.NET&lt;/li&gt;
&lt;li&gt;FakeItEasy&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Hi again. At the Day Job, we've recently dropped &lt;a href="http://www.typemock.com/isolator-product-page"&gt;Typemock Isolator&lt;/a&gt; and &lt;a href="http://sourceforge.net/apps/mediawiki/nmock2"&gt;NMock2&lt;/a&gt; as the mocking frameworks of choice in the products that I work on. We've jumped on the &lt;a href="http://fakeiteasy.github.io"&gt;FakeItEasy&lt;/a&gt; bandwagon. So far, we're enjoying the change. FakeItEasy is powerful enough and the concepts and syntax fit …&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;.NET&lt;/li&gt;
&lt;li&gt;FakeItEasy&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Hi again. At the Day Job, we've recently dropped &lt;a href="http://www.typemock.com/isolator-product-page"&gt;Typemock Isolator&lt;/a&gt; and &lt;a href="http://sourceforge.net/apps/mediawiki/nmock2"&gt;NMock2&lt;/a&gt; as the mocking frameworks of choice in the products that I work on. We've jumped on the &lt;a href="http://fakeiteasy.github.io"&gt;FakeItEasy&lt;/a&gt; bandwagon. So far, we're enjoying the change. FakeItEasy is powerful enough and the concepts and syntax fit the mind pretty well. Today I'm going to focus on one feature that I've really enjoyed but that has been an occasional thorn in the side.&lt;/p&gt;
&lt;p&gt;This is a feature that &lt;a href="http://ondevelopment.blogspot.ca/2010/09/extending-exception-messages-in.html"&gt;Patrik Hägne has blogged about before&lt;/a&gt;, but that I think is still not well known. I found it accidentally, and have benefited from it. You can provide custom argument renderers to &lt;strong&gt;improve the messages&lt;/strong&gt; you get when FakeItEasy detects an error due to missing or mismatched calls. Check out Mr. Hägne's post for the full details, but if I may be so bold as to rip off some of his examples, here's the gist (original meaning, not fancy github one).&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Define a class that extends &lt;code&gt;ArgumentValueFormatter&amp;lt;Person&amp;gt;&lt;/code&gt; (where Person is a class in your project), override &lt;code&gt;GetStringValue&lt;/code&gt; with something that renders a Person, and FakeItEasy errors that need to talk about a Person change from this
&lt;pre&gt;Assertion failed for the following call:
    'FakeItEasy.Examples.IPersonRepository.Save()'
  Expected to find it exactly never but found it #1 times among the calls:
    1.  'FakeItEasy.Examples.IPersonRepository.Save(
            personToSave: FakeItEasy.Examples.Person)'&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;to
&lt;pre&gt;Assertion failed for the following call:
    'FakeItEasy.Examples.IPersonRepository.Save()'
  Expected to find it exactly never but found it #1 times among the calls:
    1.  'FakeItEasy.Examples.IPersonRepository.Save(
            personToSave: &lt;b&gt;Person named Patrik Hägne,
                          date of birth 1977-04-05 (12227,874689919 days old).)&lt;/b&gt;'&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;It's very easy to use, and quite helpful. However, lately I've had a few difficulties with some test projects and have tracked it back to an aspect of this feature. Specifically, for certain very large projects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My test fixtures are &lt;b&gt;taking a long time to start up&lt;/b&gt; - several extra seconds while waiting for the first test to run. Specifically, the delay was happening in my first &lt;code&gt;A.Fake&lt;/code&gt; call.&lt;/li&gt;
&lt;li&gt;During this delay, several "&lt;b&gt;LoaderLock was detected&lt;/b&gt;" popups appear, which have no obvious ill effect, but are very annoying, and&lt;/li&gt;
&lt;li&gt;Finally, after a recent upgrade of dependent libraries, when I run the tests using the &lt;a href="http://www.jetbrains.com/resharper/features/unit_testing.html"&gt;Resharper test runner&lt;/a&gt;, I see a "Microsoft Visual C++ Runtime Library &lt;strong&gt;Runtime Error!&lt;/strong&gt;" in JetBrains.ReSharper.TestRunner.CLR4.exe. It claims that I'm trying to "use MSIL code from this assembly during native code initialzation". The tests continue to run, but the TestRunner process never exits, and needs to be killed before test can be run again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reasons all these things are happening during the first FakeItEasy call is due to the way that FakeItEasy finds the custom &lt;code&gt;ArgumentValueFormatter&lt;/code&gt; implementations. It &lt;b&gt;scans all available assemblies&lt;/b&gt;, looking for any implementations. In this case, "all available assemblies" means every assembly in the &lt;code&gt;AppDomain&lt;/code&gt; as well as all &lt;code&gt;*.dll&lt;/code&gt; files in the current directory. This actually makes the feature a little more powerful than Mr. Hägne indicated&amp;mdash;you can define your extensions in other assemblies than the test project's. In fact, this is how FakeItEasy finds its own built-in &lt;code&gt;ArgumentValueFormatter&lt;/code&gt;s (one for &lt;code&gt;null&lt;/code&gt;, one for &lt;code&gt;System.String&lt;/code&gt;, and one for any &lt;code&gt;System.Object&lt;/code&gt; that doesn't have its own extensions). FakeItEasy is in the AppDomain, so its extensions are located by the scan. One benefit of doing such a wide scan is that &lt;b&gt;it's possible to define the formatter extension classes in a shared library&lt;/b&gt; that can be used across test projects.&lt;/p&gt;
&lt;p&gt;It's the scanning that's causing my pain. First, some of the solutions at the Day Job are quite large, with dozens of assemblies in the test project's AppDomain and build directory. Even if everything went well, it would take seconds to load and scan all those assemblies.  Second, some of the DLLs in the directory aren't under our control. Some aren't managed. Some don't play well with others. It's these ones that are causing the other problems I mentioned above. &lt;b&gt;Loading these assemblies causes them to be accessed in ways that they were never planned to be&lt;/b&gt;, which causes the LoaderLocks and Runtime Error.&lt;/p&gt;
&lt;p&gt;What now? We're investigating the assemblies we're using to see if we can't access them in a better way, but that's probably going to be a slow operation, and one that may not bear fruit. In the meantime, I've forked FakeItEasy and am using the custom build in the one project that it was causing the most pain. &lt;b&gt;The custom version only loads extensions from the FakeItEasy assembly&lt;/b&gt;. It's kind of a terrible hack, and means that we can't define custom extensions, but we hadn't for that project anyhow, so it's not yet causing pain. On the brighter side, there are no more errors or popups, and the tests start much more quickly.&lt;/p&gt;
&lt;p&gt;Longer term, I've created &lt;a href="https://github.com/FakeItEasy/FakeItEasy/issues/130"&gt;FakeItEasy issue 130 to make the extension location a little more flexible&lt;/a&gt;. Once accepted and implemented, it will give the user control over how extension classes are located during FakeItEasy startup. (Then I can resume using the vanilla FakeItEasy at the Day Job.) If you're curious, pop on over and take a look.&lt;/p&gt;</content><category term="Development"></category></entry><entry><title>ReportGenerator indexing your whole drive? Check the case of your fullPaths</title><link href="https://blairconrad.com/2012/12/07/reportgenerator-indexing-your-whole-drive-check-the-case-of-your-fullpaths/" rel="alternate"></link><published>2012-12-07T00:00:00-05:00</published><updated>2012-12-07T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2012-12-07:/2012/12/07/reportgenerator-indexing-your-whole-drive-check-the-case-of-your-fullpaths/</id><summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;[Update on 2013-06-22:&lt;/strong&gt; I should've
mentioned this a while ago, but the issue and patch I submitted were
accepted and built into ReportGenerator 1.7.3.0, so if you have
anything newer, you should be good.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently I was working on a project at the Day Job, using OpenCover …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;[Update on 2013-06-22:&lt;/strong&gt; I should've
mentioned this a while ago, but the issue and patch I submitted were
accepted and built into ReportGenerator 1.7.3.0, so if you have
anything newer, you should be good.]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Recently I was working on a project at the Day Job, using OpenCover
1.7.1.0 and ReportGenerator 4.0.804 to report my test coverage, &lt;a href="https://blairconrad.com/2011/12/15/best-all-around-.net-coverage-tool-opencover/"&gt;as is
my wont&lt;/a&gt;,
when the report generation started taking figuratively
&lt;em&gt;forever&lt;/em&gt;. &lt;!--more--&gt; Investigating, I saw something like&lt;/p&gt;
&lt;pre&gt;
found report files: D:/sandbox/project/src/buildlogs/temp_test_coverage/Project.UnitTest.coverage.xml
Loading report 'D:\sandbox\project\src\buildlogs\temp_test_coverage\Project.UnitTest.coverage.xml'
 Preprocessing report
  Indexing classes in directory 'D:\sandbox\project\src\Module1\SubPath\'
  Added coverage information of 370/370 auto properties to module 'Module1'
  Indexing classes in directory 'D:\'
&lt;/pre&gt;

&lt;p&gt;My D: drive isn't the hugest, but it's big enough, so that explained
the delay. And of course, I certainly didn't want anything above
D:\sandbox\project\src indexed.&lt;/p&gt;
&lt;p&gt;I took a peek at my .coverage.xml file and the ReportGenerator code and until I found the offending lines&lt;/p&gt;
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;Module dhash="9A-A3-0A-C0-1D-57-BA-2A-C2-D4-5B-9E-08-DE-BD-2D-46-04-AF-32"&amp;gt;
  &amp;lt;FullName&amp;gt;D:\Sandbox\project\src\Module\UnitTest\bin\Release\Module.dll&amp;lt;/FullName&amp;gt;
  &amp;lt;ModuleName&amp;gt;Module&amp;lt;/ModuleName&amp;gt;
  &amp;lt;Files&amp;gt;
    …
    &amp;lt;File uid="803" fullPath="D:\sandbox\project\src\Module\File1.cs" /&amp;gt;
    &amp;lt;File uid="806" fullPath="D:\Sandbox\project\src\Module\File2.cs" /&amp;gt;
    &amp;lt;File uid="808" fullPath="D:\sandbox\project\src\Module\File3.cs" /&amp;gt;
    …&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the "Latin capital letter S" at the beginning of "Sandbox" on
the line with uid 806. All the other lines had a "Latin small letter S".  When
ReportGenerator goes looking for *.cs files to scan, it starts at the
directory whose name is the longest common prefix of all the
fullPaths. Because "S" isn't "s", it came up with "D:\".&lt;/p&gt;
&lt;p&gt;I submitted &lt;a
href="http://reportgenerator.codeplex.com/workitem/9773"&gt;an issue on
the ReportGenerator CodePlex project&lt;/a&gt;, so maybe we'll see a fix
soon.&lt;/p&gt;
&lt;p&gt;Of course I wondered "Why does the S differ for that entry?" but I
figured I'd look at one thing at a time, and locating the fix for
ReportGenerator was quicker.&lt;/p&gt;</content><category term="Development"></category><category term="coverage"></category><category term="OpenCover"></category><category term="ReportGenerator"></category></entry><entry><title>Moving LibraryHippo to Python 2.7 - OpenID edition</title><link href="https://blairconrad.com/2012/03/12/moving-libraryhippo-to-python-2.7-openid-edition/" rel="alternate"></link><published>2012-03-12T00:00:00-04:00</published><updated>2012-03-12T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2012-03-12:/2012/03/12/moving-libraryhippo-to-python-2.7-openid-edition/</id><summary type="html">&lt;p&gt;Now that Google has announced that &lt;a title="Announcing the General Availability of the Python 2.7 Runtime for App Engine" href="http://googleappengine.blogspot.com/2012/02/announcing-general-availability-of.html"&gt;Python 2.7 is fully supported on Google App Engine&lt;/a&gt;, I figured I should get my act in gear and make convert &lt;a href="http://www.libraryhippo.com"&gt;LibraryHippo&lt;/a&gt; over. I'd had a few aborted attempts earlier, but this time things are going much better.&lt;/p&gt;

&lt;h2&gt;How We Got Here - Cloning …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;Now that Google has announced that &lt;a title="Announcing the General Availability of the Python 2.7 Runtime for App Engine" href="http://googleappengine.blogspot.com/2012/02/announcing-general-availability-of.html"&gt;Python 2.7 is fully supported on Google App Engine&lt;/a&gt;, I figured I should get my act in gear and make convert &lt;a href="http://www.libraryhippo.com"&gt;LibraryHippo&lt;/a&gt; over. I'd had a few aborted attempts earlier, but this time things are going much better.&lt;/p&gt;

&lt;h2&gt;How We Got Here - Cloning LibraryHippo&lt;/h2&gt;

&lt;p&gt;One of the requirements for moving to Python 2.7 is that the &lt;a href="http://code.google.com/appengine/docs/python/python27/using27.html#Prerequisites"&gt;app must use the High Replication Datastore&lt;/a&gt;, and LibraryHippo did not. Moreover, the only way to convert to the HRD is to &lt;a href="http://code.google.com/appengine/docs/adminconsole/datastoreadmin.html#Copying_Entities_to_Another_Application"&gt;copy your data to a whole new application&lt;/a&gt;. So I bit the bullet, and made a new application from the LibraryHippo source.&lt;/p&gt;
&lt;p&gt;When you set up a new application, you have the option of allowing federated authentication via &lt;a href="http://openid.net/"&gt;OpenID&lt;/a&gt;. I'd wanted to do this for some time, so I thought, "While I'm changing the datastore, template engine, and version of Python under the hood, why not add a little complexity?", and I picked it.&lt;/p&gt;

&lt;h2&gt;The Simplest Thing That Should Work - Google as Provider&lt;/h2&gt;

&lt;p&gt;In theory, LibraryHippo should be able to support any OpenID provider, but I wanted to start with Google as provider for a few reasons:
&lt;ul&gt;
&lt;li&gt;concentrating on one provider would &lt;b&gt;get the site running quickly&lt;/b&gt; and I could add additional providers over time&lt;/li&gt;
&lt;li&gt;I need to &lt;b&gt;support existing users&lt;/b&gt; - they've already registered with App Engine using Google, and I want things to keep working for them, and&lt;/li&gt;
&lt;li&gt;I wanted to &lt;b&gt;minimize my headaches&lt;/b&gt; - I figure, if an organization supports both an OpenID client feature and an OpenID provider, they must work together as well as any other combination.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Even though there's been official guidance around &lt;a href="http://code.google.com/appengine/articles/openid.html"&gt;using OpenID in App Engine&lt;/a&gt; since mid-2010, I started with &lt;a href="http://blog.notdot.net/2010/05/Using-OpenID-authentication-on-App-Engine"&gt;Nick Johnson's article&lt;/a&gt; for an overview - he's never steered me wrong before. And I'm glad I did. While the official guide is very informative, Nick broke things down really well. To quote him,&lt;/p&gt;
&lt;blockquote&gt;Once you've enabled OpenID authentication for your app, a few things change:
&lt;ul&gt;
  &lt;li&gt;URLs generated by create_login_url without a federated_identity parameter specified will redirect to the OpenID login page for Google Accounts.&lt;/li&gt;
  &lt;li&gt;URLs that are protected by "login: required" in app.yaml or web.xml will result in a redirect to the path "/_ah/login_required", with a "continue" parameter of the page originally fetched. This allows you to provide your own openid login page.&lt;/li&gt;
  &lt;li&gt;URLs generated by create_login_url with a federated_identity provider will redirect to the specified provider.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;That sounded pretty good - the existing application didn't use &lt;code&gt;login: required&lt;/code&gt; anywhere, just &lt;code&gt;create_login_url&lt;/code&gt; (without a &lt;code&gt;federated_identity&lt;/code&gt;, of course).
So, LibraryHippo should be good to go - every time create_login_url is used to generate a URL, it'll send users to Google Accounts. I tried it out.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;It just worked, almost.&lt;/b&gt; When a not-logged-in user tried to access a page that required a login, she was directed to the Google Accounts page. There were cosmetic differences, but I don't think they're worth worrying about:&lt;/p&gt;

&lt;table style="margin-left:auto;margin-right:auto;"&gt;
&lt;tr&gt;

&lt;td&gt;&lt;a href="https://blairconrad.com/images/standard_google_login-trimmed.png"&gt;&lt;img src="https://blairconrad.com/images/standard_google_login-trimmed.png?w=300" alt="standard Google login page" title="standard Google login page" width="300" height="131" /&gt;&lt;/a&gt;&lt;p style="text-align:center;"&gt;standard Google login page&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://blairconrad.com/images/federated_google_login-trimmed.png"&gt;&lt;img src="https://blairconrad.com/images/federated_google_login-trimmed.png?w=300" alt="federated Google login page" title="federated Google login page" width="300" height="131" /&gt;&lt;/a&gt;&lt;p style="text-align:center;"&gt;federated Google login page&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href="https://blairconrad.com/images/let_libraryhippo_see_email_address.png"&gt;&lt;img align="right" src="https://blairconrad.com/images/let_libraryhippo_see_email_address.png?w=150" alt="Approve access to e-mail address" title="Approve access to e-mail address" width="150" height="41" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After providing her credentials, the user was redirected to a page that asked her if it was okay for LibraryHippo to know her e-mail address. After that approval was granted, it was back to the LibaryHippo site and everything operated as usual.&lt;/p&gt;
&lt;p&gt;However, &lt;b&gt;login: admin is still a problem&lt;/b&gt;. I really shouldn't have been surprised by this, but login: admin seems to do the same thing that login: required does - redirect to /_ah/login_required, which is not found.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blairconrad.com/images/login_required_without_handler-trimmed.png"&gt;&lt;img style="display:block;margin-left:auto;margin-right:auto;" src="https://blairconrad.com/images/login_required_without_handler-trimmed.png?w=144" alt="Login Required Not Found" title="Login Required Not Found" width="144"&gt;&lt;/a&gt;
&lt;p&gt;This isn't a huge problem - it only affects administrators (me), and I could workaround by visiting a page that required any kind of login first, but it still stuck in my craw.
Fortunately, the fix is very easy - just handle &lt;code&gt;/_ah/login_required&lt;/code&gt;. I ripped off Nick's &lt;code&gt;OpenIdLoginHandler&lt;/code&gt;, only instead of offering a choice of providers using &lt;code&gt;users.create_login_url&lt;/code&gt;, this one &lt;b&gt;always redirects to Google's OpenId provider&lt;/b&gt; page. With this fix, admins are able to go directly from a not-logged-in state to any admin required page.&lt;/p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;class OpenIdLoginHandler(webapp2.RequestHandler):
    def get(self):
        continue_url = self.request.GET.get('continue')
        login_url = users.create_login_url(dest_url=continue_url)

        self.redirect(login_url)        

...

handlers = [ ...
    ('/_ah/login_required$', OpenIdLoginHandler),
    ... ]&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Using Other Providers&lt;/h2&gt;

&lt;p&gt;With the above solution, LibraryHippo's authentication system has the same functionality as before - users can login with a Google account. It's time to add support for other OpenID providers.&lt;/p&gt;

&lt;h3&gt;&lt;i&gt;username&lt;/i&gt;.myopenid.com&lt;/h3&gt;

&lt;p&gt;I added a custom provider picker page as Nick suggested, and tried to login with my &lt;a href="https://www.myopenid.com/"&gt;myOpenID&lt;/a&gt; account, with my vanity URL as provider - blair.conrad.myopenid.com. The redirect to MyOpenID &lt;b&gt;worked just as it should&lt;/b&gt;, and once I was authenticated, I landed back at LibraryHippo, at the "family creation" page, since LibraryHippo recognized me as a newly-authenticated user, with no history.&lt;/p&gt;

&lt;h3&gt;myopenid.com&lt;/h3&gt;

&lt;p&gt;Buoyed by my success, I tried again, this time using the "direct provider federated identity"  MyOpenID url - myopenid.com. It was &lt;b&gt;a complete disaster&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blairconrad.com/images/server_error_myopenid-trimmed.png"&gt;&lt;img style="display:block;margin-left:auto;margin-right:auto;" src="https://blairconrad.com/images/server_error_myopenid-trimmed.png?w=300" alt="Error: Server Error  The server encountered an error and could not complete your request. If the problem persists, please report your problem and mention this error message and the query that caused it." title="Server Error logging in with myopenid.com" width="450" height="82" /&gt;&lt;/a&gt;
&lt;p&gt;Once MyOpenID had confirmed my identity, and I was redirected back to the LibraryHippo application, App Engine threw a 500 Server Error. There's nothing in the logs - just the horrible error on the screen. In desperation, I stripped down my login handler to the bare minimum, using  &lt;a href="http://code.google.com/appengine/articles/openid.html#ex"&gt;the example at &lt;i&gt;Using Federated Authentication via OpenID in Google App Engine&lt;/i&gt;&lt;/a&gt; as my guide. I ended up with this class that reproduces the problem:&lt;/p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;class TryLogin(webapp2.RequestHandler):
    def get(self):
        providers = {
            'Google'   : 'www.google.com/accounts/o8/id',
            'MyOpenID' : 'myopenid.com',
            'Blair Conrad\'s MyOpenID' : 'blair.conrad.myopenid.com',
            'Blair Conrad\'s Wordpress' : 'blairconrad.wordpress.com',
            'Yahoo' : 'yahoo.com',
            'StackExchange': 'openid.stackexchange.com',
            }

        user = users.get_current_user()
        if user:  # signed in already
            self.response.out.write('Hello &lt;em&gt;%s&lt;/em&gt;! [&lt;a href="%s"&gt;sign out&lt;/a&gt;]' % (
                user.nickname(), users.create_logout_url(self.request.uri)))
        else:     # let user choose authenticator
            self.response.out.write('Hello world! Sign in at: ')
            for name, uri in providers.items():
                self.response.out.write('[&lt;a href="%s"&gt;%s&lt;/a&gt;]' % (
                    users.create_login_url(dest_url= '/trylogin', federated_identity=uri), name))

...

handlers = [
    ('/trylogin$', TryLogin),
    ('/_ah/login_required$', OpenIdLoginHandler),
    ...
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, both &lt;b&gt;Yahoo! and WordPress work, but StackExchange&lt;/b&gt; does not. If it weren't for Yahoo!, I'd guess that it's the direct provider federated identities that give App Engine problems (yes, Google is a direct provider, but I consider it to be an exception in any case).&lt;/p&gt;
&lt;h2&gt;Next steps&lt;/h2&gt;

&lt;p&gt;For now, I'm going to use the simple "just Google as federated ID provider" solution that I described above. It seems to work, and I'd rather see if I can find out why these providers fail before implementing an OpenID selector that excludes a few providers. Also, implementing the simple solution will allow me to experiment with federated IDs on the side, since I don't know how e-mail will work with federated IDs, or how best to add federated users as families' responsible parties. But that's a story for another day.&lt;/p&gt;</content><category term="Development"></category><category term="appengine"></category><category term="myopenid"></category><category term="openid"></category><category term="python"></category><category term="python27"></category><category term="stackexchange"></category></entry><entry><title>Best all-around .NET coverage tool - OpenCover</title><link href="https://blairconrad.com/2011/12/15/best-all-around-.net-coverage-tool-opencover/" rel="alternate"></link><published>2011-12-15T00:00:00-05:00</published><updated>2011-12-15T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-12-15:/2011/12/15/best-all-around-.net-coverage-tool-opencover/</id><summary type="html">&lt;p&gt;This is the gala awards show, where my chosen coverage tool is announced. &lt;/p&gt;
&lt;p&gt;If you've come this far, you've probably already read the title, and it won't surprise you to learn that I've chosen &lt;a href="https://github.com/sawilde/opencover"&gt;OpenCover&lt;/a&gt;. It offered the best fit for my requirements - the only areas where I found it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the gala awards show, where my chosen coverage tool is announced. &lt;/p&gt;
&lt;p&gt;If you've come this far, you've probably already read the title, and it won't surprise you to learn that I've chosen &lt;a href="https://github.com/sawilde/opencover"&gt;OpenCover&lt;/a&gt;. It offered the best fit for my requirements - the only areas where I found it lacking were in the "nice to haves". Witness:
&lt;ul&gt;
   &lt;li&gt;OpenCover is pretty easy to &lt;strong&gt;run from the command line&lt;/strong&gt; - second only to NCover.&lt;/li&gt;
   &lt;li&gt;It can (with the help of ReportGenerator) generate &lt;strong&gt;coverage reports in XML and HTML&lt;/strong&gt;.&lt;/li&gt;
   &lt;li&gt;OpenCover has an integrated &lt;strong&gt;auto-deploy&lt;/strong&gt;, so it can be bundled with the source tree and new developers or build servers just work - dotCover has no such option, and I was not able to use NCover this way.&lt;/li&gt;
   &lt;li&gt;I've been able to &lt;strong&gt;link with TypeMock Isolator&lt;/strong&gt; with little trouble, and the new Isolator may obviate the need for my small workaround.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;It's free&lt;/strong&gt;. Aside from the obvious benefit, it's nice to not have to count licenses when adding developers and/or build server nodes.&lt;/li&gt;
   &lt;li&gt;There's &lt;b&gt;no GUI integration&lt;/b&gt;, but this was a nice to have. If some developer is absolutely dying to have this, my boss's boss has indicated that money could be available for individual licenses of something like dotCover.&lt;/li&gt;
   &lt;li&gt;There's &lt;b&gt;no support for integrating with IIS&lt;/b&gt;. We don't need this right now, so that's okay. Again, if we one or two developers find a need, we have the option of buying a license of some other tool. Even better, support &lt;a href="https://github.com/sawilde/opencover/issues/36"&gt;may be coming soon&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
After considering OpenCover's strengths in the areas I absolutely
needed, and its weaknesses, which all appear to be in areas that I
care a little less about, I recommended it the boss's boss, who agreed
with the assessment and was happy to keep a little money in his pocket
for now.&lt;/p&gt;
&lt;p&gt;So, I grabbed 2.0.802, incorporated it into one product's build, and out popped coverage numbers. Very exciting. I did notice a few things, though:
&lt;ol&gt;
&lt;li&gt;Branch coverage has been added since I last evaluated the product!&lt;/li&gt;
&lt;li&gt;One fairly complicated integration-style testfixture is not runnable under OpenCover - the class tested creates a background thread and starting the thread results in a &lt;code&gt;System.AccessViolationException&lt;/code&gt;. I was unable to determine the cause of this, and have temporarily removed the test from coverage, instead executing it with NUnit directly. I'm going to continue investigating this problem.&lt;/li&gt;
&lt;li&gt;Since I'm XCopy deploying, I was bitten by &lt;a href="https://github.com/sawilde/opencover/issues/52"&gt;the dependency on the Microsoft Visual C++ 2010 Redistributable Package&lt;/a&gt; - I ended up including the DLLs in my imported bundle, and all was well, but I worry a little about the stability of this solution.&lt;/li&gt;
&lt;li&gt;The time taken to execute our tests (there are over 5000, and many hit a database) increased from about 7 minutes to about 8. This is an acceptable degradation, since the test run isn't the bottleneck in our build process.&lt;/li&gt;
&lt;li&gt;The number of "Cannot instrument  as no PDB could be loaded" messages is daunting. I'm hoping that things will be improved once I get a build that contains a fix for &lt;a href="https://github.com/sawilde/opencover/issues/40"&gt;issue 40&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="coverage"></category><category term="OpenCover"></category></entry><entry><title>Hasty Impressions: NCover</title><link href="https://blairconrad.com/2011/11/09/hasty-impressions-ncover/" rel="alternate"></link><published>2011-11-09T00:00:00-05:00</published><updated>2011-11-09T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-11-09:/2011/11/09/hasty-impressions-ncover/</id><summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;I tried &lt;a href="http://www.ncover.com/"&gt;NCover&lt;/a&gt; 3.4.18.6937. 
&lt;h2&gt;The Cost&lt;/h2&gt;
NCover Complete is $479 plus $179 for a 1-year subscription (which gives free version updates). I thought this was &lt;b&gt;a little steep&lt;/b&gt;. NCover Classic is $199/$99. I looked at NCover Complete, because that's the kind of trial version they …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;I tried &lt;a href="http://www.ncover.com/"&gt;NCover&lt;/a&gt; 3.4.18.6937. 
&lt;h2&gt;The Cost&lt;/h2&gt;
NCover Complete is $479 plus $179 for a 1-year subscription (which gives free version updates). I thought this was &lt;b&gt;a little steep&lt;/b&gt;. NCover Classic is $199/$99. I looked at NCover Complete, because that's the kind of trial version they give out. Also, the feature set for Classic was too similar to that offered by other tools that cost less. Check out the &lt;a href="http://www.ncover.com/pages/feature_comparison"&gt;feature comparison&lt;/a&gt;, if you like.
&lt;h2&gt;Support&lt;/h2&gt;
I haven't had enough problems to really stress the support network, but I will say this - the NCover chaps are really keen on keeping in touch with people who have trial copies of the program. I've received 3 separate e-mails from my assigned NCover rep in the 2 weeks since I first installed my trial copy. I replied to one of these, asking for a clarification on the VS integration (see below), and got a speedy response. 
It's nice to see such a &lt;b&gt;high level of customer support&lt;/b&gt;, but I do feel just a little bit smothered&amp;hellip;
&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;VS integration&lt;/h2&gt;

&lt;p&gt;The best advice from the NCover folks is to &lt;a href="http://docs.ncover.com/how-to/running-ncover-from-visual-studio/"&gt;create an external tool to launch NCover&lt;/a&gt;. That's an okay solution if you want to run all the unit tests in a project and profile them, but it &lt;b&gt;lacks flexibility&lt;/b&gt;. Then to actually look at the report, you have to launch the NCover Explorer and load the report.&lt;/p&gt;
&lt;p&gt;There's additional advice at the end of the &lt;i&gt;Running NCover from Visual Studio&lt;/i&gt; video - if you want a more integrated Visual Studio experience, you should obtain &lt;a href="http://testdriven.net/"&gt;TestDriven.Net&lt;/a&gt;. That probably works well enough, but I'm not wild about paying an additional $189 per head (roughly) for a test runner that (in my opinion, and excepting the NCover integration of course) is a less robust solution than the one that &lt;a href="http://www.jetbrains.com/resharper/features/unit_testing.html"&gt;comes bundled with ReSharper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Oh. There's one more feature that I found - once you are examining a coverage report, you can &lt;code&gt;Edit in VS.NET&lt;/code&gt;, which opens the appropriate file in Visual Studio. This is somewhat convenient, but doesn't warp you to the correct line, which is a bit of a letdown.&lt;/p&gt;
&lt;h2&gt;Command Line Execution&lt;/h2&gt;

&lt;p&gt;The command line offers many and varied options for configuring the coverage run. Here's a sample invocation:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bat"&gt;NCover.Console.exe //exclude-assemblies BookFinder.Tests //xml ..\..\coverage.nccover nunit-console.exe bin\debug\BookFinder.Tests.dll&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upon execution, NCover tells me this:&lt;/p&gt;
&lt;p&gt;Adding the &lt;code&gt;/noshadow&lt;/code&gt; argument to the NUnit command line to ensure NCover can gather coverage data.
To prevent this behavior, use the &lt;code&gt;//literal&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;I really like that it defaults to passing the recommended &lt;code&gt;/noshadow&lt;/code&gt; to NUnit. The &lt;code&gt;//&lt;/code&gt; switches are also a good touch - it makes providing arguments to the executable being covered a lot easier. These features make the command line invocation &lt;b&gt;the best I've seen&lt;/b&gt; among coverage tools.&lt;/p&gt;
&lt;h2&gt;GUI Runner&lt;/h2&gt;

&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/runncover.png"&gt;&lt;img src="https://blairconrad.com/images/runncover.png" width="300" height="397"  alt="NCover options" title="RunNCover"/&gt;&lt;/a&gt;&lt;a href="https://blairconrad.com/images/ncoverexplorer.png"&gt;&lt;img src="https://blairconrad.com/images/ncoverexplorer.png" height="397" width="515" alt="NCoverExplorer" title="([^"]+)"  /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The GUI runner looks just like a GUI wrapper on top of the command line options - they appear to support the same level of configuration. After the tests have been run, the NCoverExplorer allows one to browse the results and to save a report as XML or HTML.&lt;/p&gt;
&lt;h2&gt;XML Report&lt;/h2&gt;

&lt;p&gt;Reports are generated either from the GUI runner or by using the NCover.Reporting executable, which has a plethora of options for choosing XML or HTML reports of various flavours.
XML reports contain all the information you might want to summarize for inclusion in build output, but they're &lt;b&gt;hard to understand&lt;/b&gt;. Witness:&lt;/p&gt;
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;stats acp="95" afp="80" abp="95" acc="20" ccavg="1.5" ccmax="5" ex="0" ei="1" ubp="12" ul="40" um="10" usp="39" vbp="63" vl="89" vsp="105" mvc="18" vc="2" vm="22" svc="120"&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you stare at this long enough (and correlate with a matching HTML report), you figure out that this means that there are
&lt;ul&gt;
&lt;li&gt;39 &lt;b&gt;u&lt;/b&gt;nvisited &lt;b&gt;s&lt;/b&gt;equence &lt;b&gt;p&lt;/b&gt;oints, and&lt;/li&gt;
&lt;li&gt;105 &lt;b&gt;v&lt;/b&gt;isited &lt;b&gt;s&lt;/b&gt;equence &lt;b&gt;p&lt;/b&gt;oints&lt;/li&gt;
&lt;/ul&gt;
along with various other stats, so using attribute extraction and Math, we could see that 105/144 or 72.9% of the sequence points are covered.&lt;/p&gt;
&lt;p&gt;It's odd that there are many more reports available for HTML than XML. Notably absent from the XML offering: "Summary". What is it about summaries that make them unsuitable for rendering as XML when HTML is fine?
&lt;h2&gt;Reports of Auto-Deploy&lt;/h2&gt;
My Support Guy explained that you can xcopy deploy NCover using the &lt;code&gt;//reg&lt;/code&gt; flag, but I &lt;b&gt;did not find any documentation&lt;/b&gt; on how to do this. Support Guy claims there is an "honour system" kind of licensing model that supports this, but the trial copy I had did not work this way. I eventually abandoned this line of investigation.&lt;/p&gt;
&lt;h2&gt;Mature Isolator Support&lt;/h2&gt;

&lt;p&gt;From Visual Studio, under the Typemock menu, configure Typemock Isolator to Link with NCover&amp;nsbsp;3.0.
When using the &lt;code&gt;TypeMockStart&lt;/code&gt; MSBuild task, use
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;TypeMockStart Link="NCover3.0" ProfilerLaunchedFirst="true"&amp;gt;&lt;/code&gt;&lt;/pre&gt;
and it &lt;b&gt;just works&lt;/b&gt;, assuming you have TypeMock Isolator installed or &lt;a href="/2010/06/06/auto-deploying-typemock-isolator-without-trashing-the-installation/"&gt;set to auto-deploy&lt;/a&gt;.
&lt;h2&gt;IIS&lt;/h2&gt;
IIS coverage is available, simply by selecting it from the &lt;b&gt;GUI runner options or from the command line&lt;/b&gt; using the &lt;code&gt;//iis&lt;/code&gt; switch. Other Windows Services can be covered in the same manner. Note though, that these features are only available in the Complete flavour of NCover 3.0.
&lt;h2&gt;Sequence Point coverage&lt;/h2&gt;
&lt;b&gt;Supported&lt;/b&gt;, as well as branch point coverage and other metrics, including &lt;a href="http://en.wikipedia.org/wiki/Cyclomatic_complexity"&gt;cyclomatic complexity&lt;/a&gt;. Nice options to have, although probably a little advanced for my team's current needs and experience.
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;strong&gt;Pros:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;sequence point and branch coverage&lt;/li&gt;
&lt;li&gt;large feature set, including trends, cyclomatic complexity analysis, and much much more&lt;/li&gt;
&lt;li&gt;commercial product with strong support&lt;/li&gt;
&lt;li&gt;report merging&lt;/li&gt;
&lt;li&gt;easy IIS profiling&lt;/li&gt;
&lt;li&gt;supports Isolator&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Cons:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;costly&lt;/li&gt;
&lt;li&gt;weak IDE integration&lt;/li&gt;
&lt;li&gt;inconsistent (comparing XML to HTML) report offerings&lt;/li&gt;
&lt;li&gt;confusing auto-deploy&lt;/li&gt;
&lt;/ul&gt;
I expected to be blown away by NCover&amp;mdash;from all reports, it's the Cadillac of .NET coverage tools. After demoing it, I figured I'd end up desperately trying to make a case to the Money Guy to shell out hundreds of dollars per developer (and build server), but this did not happen.
While NCover definitely has lots of features, it's lacking some pretty important ones as well, notably IDE integration. Other features just weren't as I expected - the cornucopia of report types is impressive, but overkill for a team just starting out, and many of the report types aren't available in XML and/or are very minor variations on other report types.
Ultimately, I don't see what NCover offers to justify its price tag, especially across a large team. If ever I felt a need to have one of the specialized report, I'd consider obtaining a single license for tactical use, but I can't imagine any more than that.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="coverage"></category><category term="HastyImpressions"></category><category term="IIS"></category><category term="Isolator"></category><category term="NCover"></category><category term="Testing"></category><category term="TypeMock"></category></entry><entry><title>Hasty Impressions: OpenCover</title><link href="https://blairconrad.com/2011/08/15/hasty-impressions-opencover/" rel="alternate"></link><published>2011-08-15T00:00:00-04:00</published><updated>2011-08-15T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-08-15:/2011/08/15/hasty-impressions-opencover/</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/sawilde/opencover"&gt;OpenCover&lt;/a&gt; is developed by Shaun Wilde. He was a developer on (and is the only remaining maintainer of) PartCover. He's used what he learned working on PartCover to develop OpenCover, but OpenCover is a new implementation, not a port.&lt;/p&gt;
&lt;p&gt;I tried OpenCover 1.0.514. Since I downloaded a couple …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://github.com/sawilde/opencover"&gt;OpenCover&lt;/a&gt; is developed by Shaun Wilde. He was a developer on (and is the only remaining maintainer of) PartCover. He's used what he learned working on PartCover to develop OpenCover, but OpenCover is a new implementation, not a port.&lt;/p&gt;
&lt;p&gt;I tried OpenCover 1.0.514. Since I downloaded a couple weeks ago there have been 3 more releases, with the 1.0.606 release promising a big performance improvement.
&lt;h2&gt;The Cost&lt;/h2&gt;
Free! And you can get the source.
&lt;h2&gt;VS integration&lt;/h2&gt;
None that I can find.
&lt;h2&gt;Command Line Execution&lt;/h2&gt;
Covering an application from the command line is &lt;strong&gt;easy&lt;/strong&gt;, and reminiscent of using PartCover the same way. I used this command to see what code my BookFinder unit tests exercised:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bat"&gt;OpenCover.Console.exe -arch:64 -register target:nunit-console.exe -targetargs:bin\debug\BookFinder.Tests.dll \
                      -output:..\..\opencover.xml -filter:+[BookFinder.Core]*&lt;/code&gt;&lt;/pre&gt;

&lt;!--more--&gt;

&lt;p&gt;Let's look at that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-arch:64&lt;/code&gt; - I'm running on a 64-bit system. I didn't get any results without this.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-register&lt;/code&gt; - I'm auto-deploying OpenCover. More on that later.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-target:nunit-console.exe&lt;/code&gt; - I like NUnit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-targetargs:bin\debug\BookFinder.Tests.dll&lt;/code&gt; - arguments to NUnit to tell it what assembly to test, and how.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-output:..\..\opencover.xml&lt;/code&gt; - where to put the coverage results. This file is not a report - it's intended for machines to read, not humans.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-filter:+[BookFinder.Core]*&lt;/code&gt; - BookFinder.Core is the only assembly I was interested in - it holds the business logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GUI Runner&lt;/h2&gt;

&lt;p&gt;There isn't one, but I have to wonder if there won't be. Otherwise, why call the command line coverer &lt;strong&gt;OpenCover.Console.exe&lt;/strong&gt;?&lt;/p&gt;
&lt;h2&gt;XML Report&lt;/h2&gt;

&lt;p&gt;OpenCover doesn't generate a human-readable report. Instead, you can postprocess the coverage output. &lt;b&gt;&lt;a href="http://www.palmmedia.de/Net/ReportGenerator"&gt;ReportGenerator&lt;/a&gt; is the recommended tool&lt;/b&gt;, and it works like a charm.&lt;/p&gt;
&lt;pre&gt;&lt;code class="bat"&gt;ReportGenerator.exe .\opencover.xml XmlReport Xml&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;generates an XML report in the &lt;code&gt;Xml&lt;/code&gt; directory. The summary looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;CoverageReport scope="Summary"&amp;gt;
  &amp;lt;Summary&amp;gt;
    &amp;lt;Generatedon&amp;gt;2011-08-05-2011-08-05&amp;lt;/Generatedon&amp;gt;
    &amp;lt;Parser&amp;gt;OpenCoverParser&amp;lt;/Parser&amp;gt;
    &amp;lt;Assemblies&amp;gt;1&amp;lt;/Assemblies&amp;gt;
    &amp;lt;Files&amp;gt;5&amp;lt;/Files&amp;gt;
    &amp;lt;Coverage&amp;gt;71.6%&amp;lt;/Coverage&amp;gt;
    &amp;lt;Coveredlines&amp;gt;126&amp;lt;/Coveredlines&amp;gt;
    &amp;lt;Coverablelines&amp;gt;176&amp;lt;/Coverablelines&amp;gt;
    &amp;lt;Totallines&amp;gt;495&amp;lt;/Totallines&amp;gt;
  &amp;lt;/Summary&amp;gt;
  &amp;lt;Assemblies&amp;gt;
    &amp;lt;Assembly name="BookFinder.Core.DLL" coverage="71.6"&amp;gt;
      &amp;lt;Class name="BookFinder.BookDepository" coverage="85.7" /&amp;gt;
      &amp;lt;Class name="BookFinder.BookListViewModel" coverage="50" /&amp;gt;
      &amp;lt;Class name="BookFinder.BoolProperty" coverage="50" /&amp;gt;
      &amp;lt;Class name="BookFinder.BoundPropertyStrategy" coverage="0" /&amp;gt;
      &amp;lt;Class name="BookFinder.ListProperty" coverage="75" /&amp;gt;
      &amp;lt;Class name="BookFinder.Property" coverage="100" /&amp;gt;
      &amp;lt;Class name="BookFinder.StringProperty" coverage="100" /&amp;gt;
      &amp;lt;Class name="BookFinder.ViewModelBase" coverage="81" /&amp;gt;
    &amp;lt;/Assembly&amp;gt;
  &amp;lt;/Assemblies&amp;gt;
&amp;lt;/CoverageReport&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ReportGenerator also generates Html and LaTeX output, with a "summary" variant for each of the three output types.&lt;/p&gt;
&lt;p&gt;The XML report would be most useful for inclusion in build result reports, but I found the HTML version easy to use to examine coverage results down to the method level.&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/html_summary.png"&gt;&lt;img title="html_summary" align="top" src="https://blairconrad.com/images/html_summary.png?w=270" alt="HTML Coverage Summary" width="270" height="300" /&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="https://blairconrad.com/images/html_detail.png"&gt;&lt;img title="html_detail" align="top" src="https://blairconrad.com/images/html_detail.png?w=300" alt="HTML Coverage Detail" width="300" height="208" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I appreciate the coverage count by each of the lines - not as fancy as dotCover's "which tests cover this", but it could be a helpful clue when you're trying to decide what you need to do to improve your coverage.&lt;/p&gt;
&lt;h2&gt;Joining Coverage Runs&lt;/h2&gt;

&lt;p&gt;Perhaps your test are scattered in space or time and you want to get an overview of all the code that's covered by them. OpenCover doesn't really do anything special for you, but &lt;strong&gt;ReportGenerator has your back&lt;/strong&gt;. Specify multiple input files on the command line, and the results will be aggregated and added to a comprehensive report:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bat"&gt;ReportGenerator.exe output1.xml;output2.xml;output3.xml XmlReport Xml&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;DIY Auto-Deploy&lt;/h2&gt;

&lt;p&gt;There's no built-in auto-deploy for OpenCover. However, &lt;b&gt;I made my own auto-deployable package&lt;/b&gt; like so:
&lt;ol&gt;
&lt;li&gt;install OpenCover&lt;/li&gt;
&lt;li&gt;copy the &lt;code&gt;C:\Program Files (x86)\OpenCover&lt;/code&gt; directory somewhere - call this your &lt;i&gt;package directory&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;uninstall OpenCover - you won't need it any more&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;Then I just made sure my coverage build step 
&lt;ul&gt;
&lt;li&gt;knew where the OpenCover package directory was (for the build system at the Day Job, I added it to our "subscribes")&lt;/li&gt;
&lt;li&gt;used the &lt;code&gt;-register&lt;/code&gt; flag mentioned above to register OpenCover before running the tests&lt;/li&gt;
&lt;/ul&gt;
That's it. No muss, no fuss. I did a similar (but easier, since there's no registration needed) trick with ReportGenerator, and all of a sudden I have a no-deploy system.&lt;/p&gt;
&lt;p&gt;In less than an hour's work, I could upgrade a project so the build servers and all the developers could run a coverage target, with no action on their part, other than pulling the updated source tree and building. (Which is pretty much what the build server does all day long anyhow...)&lt;/p&gt;
&lt;h2&gt;DIY (for now) Coverage with Isoloator&lt;/h2&gt;

&lt;p&gt;Isoloator and OpenCover don't work together out of the box, but thanks to advice I got from &lt;a href="http://www.hmemcpy.com/blog/"&gt;Igal Tabachnik&lt;/a&gt;, Typemock employee, it was not hard to change this.&lt;/p&gt;
&lt;p&gt;Isolator's supported coverage tools are partly configurable. There is a &lt;code&gt;typemockconfig.xml&lt;/code&gt; under the Isolator install directory - typically &lt;code&gt;%ProgramFiles (x86)%\Typemock\Isoloator\6.0&lt;/code&gt; (or &lt;code&gt;%ProgramFiles%&lt;/code&gt;, I suppose). Mr. Tabachnik had me add
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;Profiler Name="OpenCover" Clsid="{1542C21D-80C3-45E6-A56C-A9C1E4BEB7B8}" DirectLaunch="false"&amp;gt;
  &amp;lt;EnvironmentList /&amp;gt;
&amp;lt;/Profiler&amp;gt;&lt;/code&gt;&lt;/pre&gt;
to the &lt;code&gt;ProfilerList&lt;/code&gt; element, and everything meshed. His &lt;a href="http://stackoverflow.com/questions/6698290/can-opencover-be-used-with-typemock-isolator"&gt;StackOverflow answer&lt;/a&gt; provides full details and suggests that official support for OpenCover will be added to Isolator. &lt;/p&gt;
&lt;h2&gt;IIS&lt;/h2&gt;

&lt;p&gt;I can't find any special IIS support. I'm not saying OpenCover can't be used to cover an application running in IIS, only that I didn't find any help for it. I may investigate this later.&lt;/p&gt;
&lt;h2&gt;Sequence Point coverage&lt;/h2&gt;

&lt;p&gt;OpenCover counts sequence points, not statements. Yay!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;free&lt;/li&gt;
        &lt;li&gt;open source&lt;/li&gt;
        &lt;li&gt;active project&lt;/li&gt;
    &lt;li&gt;XML/HTML/LaTeX reports (via ReportGenerator)&lt;/li&gt;
    &lt;li&gt;report merging (via ReportGenerator)&lt;/li&gt;
    &lt;li&gt;Isolator support is easy to add (and may be included in future Isolators)&lt;/li&gt;
        &lt;li&gt;auto-deploy package is easy to make&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Cons:&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;no IDE integration&lt;/li&gt;
    &lt;li&gt;no help with IIS profiling&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;I really like OpenCover. It's easy to use, relatively full-featured, and free. In a work environment, where there's a tonne of developers who want the in-IDE profiling experience, it may not be the best bet, but I'd use it for my personal .NET projects in a flash. &lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="coverage"></category><category term="OpenCover"></category><category term="HastyImpressions"></category><category term="Isolator"></category><category term="Testing"></category><category term="TypeMock"></category></entry><entry><title>Hasty Impressions: PartCover</title><link href="https://blairconrad.com/2011/08/05/hasty-impressions-partcover/" rel="alternate"></link><published>2011-08-05T00:00:00-04:00</published><updated>2011-08-05T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-08-05:/2011/08/05/hasty-impressions-partcover/</id><summary type="html">&lt;h2&gt;Technical stuff&lt;/h2&gt;

&lt;p&gt;PartCover has a GUI runner as well as a command-line mode. It integrates with Isolator, but doesn't offer any help for those wanting to profile IIS-hosted applications.
There are some XSL files provided that allow one to generate HTML reports, but probably the better way is to use …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Technical stuff&lt;/h2&gt;

&lt;p&gt;PartCover has a GUI runner as well as a command-line mode. It integrates with Isolator, but doesn't offer any help for those wanting to profile IIS-hosted applications.
There are some XSL files provided that allow one to generate HTML reports, but probably the better way is to use &lt;a href="http://www.palmmedia.de/Net/ReportGenerator"&gt;ReportGenerator&lt;/a&gt; to make HTML or XML reports. 
PartCover claims to be auto-deployable, but I did not try this.&lt;/p&gt;
&lt;h2&gt;Project Concerns&lt;/h2&gt;

&lt;p&gt;The hardest thing about working with PartCover is learning about PartCover - finding definitive information about the project's state is quite difficult. Searching with Google finds &lt;a href="http://sourceforge.net/projects/partcover/"&gt;the SourceForge project&lt;/a&gt; which contains a note to see latest news on the &lt;a href="http://partcover.blogspot.com"&gt;PartCover blog&lt;/a&gt;, which &lt;b&gt;hasn't been updated&lt;/b&gt; since 17 June 2009. Back at SourceForge, you can download a readme written by Shaun Wilde, which says that he's the last active developer and has &lt;b&gt;moved development&lt;/b&gt; to &lt;a href="http://github.com/sawilde/partcover.net4"&gt;a GitHub project&lt;/a&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;At last! A project with recent (26 June 2011) updates. Unfortunately, my trials did not end here. I tried a number of versions, each with their own quirks. Unfortunately, I did not keep as careful track of which version had which problem as I should, and can't say which version (from either GitHub or SourceForge) had which problems, but I can describe the problems.&lt;/p&gt;
&lt;p&gt;At first I thought things were working really well, but then noticed that I had abnormally high coverage levels on my projects - one legacy project that I knew had about 5% coverage was registering as over 20%! 
I looked at one assembly's summary and found 6 classes with 0% coverage and one with 80%, and the assembly was registering an 80%. It turns out that &lt;b&gt;completely uncovered classes were not counting against the total&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;I tried other versions, with either the same results, or failures to run altogether. Ultimately, I gave up.
&lt;h2&gt;A Successor&lt;/h2&gt;
It turns out that PartCover has a successor of sorts - Shaun Wilde, the last surviving maintainer of PartCover, has started his own coverage tool - &lt;a href="https://github.com/sawilde/opencover"&gt;OpenCover&lt;/a&gt;. It already seems be a viable PartCover replacement, and is in active development, so I'll be checking it out as a free, non-IDE-integrated coverage tool.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pros:&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;free!&lt;/li&gt;
    &lt;li&gt;XML/HTML via ReportGenerator&lt;/li&gt;
    &lt;li&gt;report merging via ReportGenerator&lt;/li&gt;
    &lt;li&gt;Isolator support&lt;/li&gt;
    &lt;li&gt;auto-deployable (reported)&lt;/li&gt;
        &lt;li&gt;sequence point coverage&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Cons:&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;no IDE integration&lt;/li&gt;
    &lt;li&gt;no special IIS support&lt;/li&gt;
        &lt;li&gt;forked implementations, each with their own warts&lt;/li&gt;
        &lt;li&gt;not quite abandoned, but not a lot of interest behind the project&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Until I noticed the high coverage levels, I didn't mind PartCover. I figured its lack of price and its Isolator support made it a viable candidate. Unfortunately, the high coverage reports and other problems soured me on the deal, as did the lack of maintenance. I'm going to look at OpenCover instead.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="coverage"></category><category term="HastyImpressions"></category><category term="OpenCover"></category><category term="PartCover"></category><category term="Testing"></category></entry><entry><title>Hasty Impressions: dotCover 1.1</title><link href="https://blairconrad.com/2011/07/29/hasty-impressions-dotcover-1.1/" rel="alternate"></link><published>2011-07-29T00:00:00-04:00</published><updated>2011-07-29T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-07-29:/2011/07/29/hasty-impressions-dotcover-1.1/</id><summary type="html">&lt;p&gt;I tried &lt;a href="http://www.jetbrains.com/dotcover/"&gt;JetBrains dotCover&lt;/a&gt; 1.1, integrated with ReSharper 5.1 running in VS2008.
&lt;h2&gt;The Cost&lt;/h2&gt;
A lifetime license, with 1 year of free upgrades is &lt;s&gt;$199&lt;/s&gt; $149 - a special introductory price.&lt;/p&gt;
&lt;p&gt;This isn't usurious, but considering that ReSharper C# edition, a tool that changes the way I work every …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I tried &lt;a href="http://www.jetbrains.com/dotcover/"&gt;JetBrains dotCover&lt;/a&gt; 1.1, integrated with ReSharper 5.1 running in VS2008.
&lt;h2&gt;The Cost&lt;/h2&gt;
A lifetime license, with 1 year of free upgrades is &lt;s&gt;$199&lt;/s&gt; $149 - a special introductory price.&lt;/p&gt;
&lt;p&gt;This isn't usurious, but considering that ReSharper C# edition, a tool that changes the way I work every single day, is $249, it's enough.
&lt;h2&gt;VS integration&lt;/h2&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blairconrad.com/images/cover_with_dotcover2.png"&gt;&lt;img style="margin-right:1em;" title="cover with dotCover" src="https://blairconrad.com/images/cover_with_dotcover2.png" alt="cover with dotCover" width="174" height="170" align="left" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where I expected dotCover to shine, and it didn't disappoint - the &lt;strong&gt;integration with Visual Studio (and with ReSharper) was excellent&lt;/strong&gt;. The first thing I noticed was an extra "Cover with dotCover" item in the ReSharper test menu (triggered from the yellow and green ball things). I clicked it, and it ran my tests, bringing up the familiar Unit Test results window.&lt;/p&gt;
&lt;p&gt;Once the tests ran, there was pause while dotCover calculated the coverage info, and then the bottom pane filled in with coverage results: green/red bars by every method in the covered assemblies. Clicking on the methods warps to the source code, which is also highlighted - covered statements have a green background, and uncovered statements have red. In fact, every source file opened in the IDE has the highlighting.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blairconrad.com/images/doccover_bookfinder.png"&gt;&lt;img title="dotCover BookFinder tests" src="https://blairconrad.com/images/doccover_bookfinder.png?w=300" alt="dotCover BookFinder tests" width="300" height="233" align="top" /&gt;&lt;/a&gt;&lt;a href="https://blairconrad.com/images/dotcover_covered.png"&gt;&lt;img title="dotCover_covered" src="https://blairconrad.com/images/dotcover_covered.png?w=300" alt="dotCover covered" width="300" height="187" align="top" /&gt;&lt;/a&gt;
&lt;h3&gt;Finding tests that cover code&lt;/h3&gt;
The most interesting feature that dotCover has is the ability to identify which tests covered which lines of code. I'm not entirely sold on this, thinking it more of a gimmick than anything else. When I first heard about it, I thought "I don't care which test covered which line, so long as the lines are covered. I'm here to see what &lt;em&gt;isn't&lt;/em&gt; covered.". Yes, I think in italics sometimes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blairconrad.com/images/dotcover_show_covering_tests.png"&gt;&lt;img style="margin-left:1em;margin-bottom:1em;" title="dotCover_show_covering_tests" src="https://blairconrad.com/images/dotcover_show_covering_tests.png" alt="dotCover showing covering tests" width="278" height="140" align="right" /&gt;&lt;/a&gt;Still, I gave it a go. Right-clicking on a line of code (once coverage has been run) brought up a tiny menu full of covered lines of code. I don't know why, but it made me happy. I suppose one could use this from time to time to make sure a new test case is exercising what it's supposed to, but normally I can tell that by how a new test fails, or by what I've typed just before the test starts working. Worst case, I could always debug through a single test - something made very easy by the ReSharper test runner.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blairconrad.com/images/dotcover_covering_tests.png"&gt;&lt;img class="alignright size-medium wp-image-1080" title="dotCover_covering_tests" alt="dotCover running covering tests" src="https://blairconrad.com/images/dotcover_covering_tests.png" /&gt;&lt;/a&gt;
There was one aspect of this feature that I could imagine someone using - the ability to &lt;strong&gt;run the tests&lt;/strong&gt; that cover a line of code. All that's needed is to hit the "play" button on the "Show Covering Tests" popup. If the full suite of tests takes a very long time to run, this could be useful. Still, it doesn't do much for me personally - if my tests took that long to run, I'd try speed them up. If nothing else, I would probably just run the test fixture designed to test the class or method in question, instead of my entire bolus of tests.&lt;/p&gt;
&lt;p&gt;So, running tests that cover some code is a cool feature, but it's &lt;strong&gt;not that useful&lt;/strong&gt;. I'd rather see something like the automatic test runs and really cool "what's covered" information provided by &lt;a href="http://continuoustests.com/"&gt;Mighty-Moose&lt;/a&gt;.
&lt;h2&gt;Command Line Execution&lt;/h2&gt;
Covering an application from the command line is &lt;b&gt;pretty straightforward&lt;/b&gt;. I used this command to see what code my BookFinder unit tests exercised:
&lt;pre&gt;&lt;code class="bat"&gt;dotcover cover /TargetExecutable=nunit-console.exe /TargetArguments=.\BookFinder.Tests.dll /Output=dotCoverOutput /Filters=+:BookFinder.Core&lt;/code&gt;&lt;/pre&gt;
BookFinder.Core is the only assembly I was interested in - it holds the business logic. "cover" takes multiple include and exclude filters, even using wildcards for assemblies, classes, and methods.&lt;/p&gt;
&lt;p&gt;One quite cool feature is to use the &lt;b&gt;help subcommand to generate an XML configuration file&lt;/b&gt;, which can be used to specify the parameters for the &lt;code&gt;cover&lt;/code&gt; command:
&lt;pre&gt;&lt;code class="bat"&gt;dotCover help cover coverSettings.xml&lt;/code&gt;&lt;/pre&gt;
will create a &lt;code&gt;coverSettings.xml&lt;/code&gt; file that can be edited to specify the executable, arguments, and filters. Then use it like so:
&lt;pre&gt;&lt;code class="bat"&gt;dotCover cover coverSettings.xml&lt;/code&gt;&lt;/pre&gt; without having to specify the same batch of parameters all the time.&lt;/p&gt;
&lt;h2&gt;Joining Coverage Runs&lt;/h2&gt;

&lt;p&gt;Multiple coverage snapshots - perhaps from running tests on different assemblies, or just from performing different test runs on the same application - &lt;b&gt;can be merged together&lt;/b&gt; into a comprehensive snapshot:
&lt;pre&gt;&lt;code class="bat"&gt;dotCover merge /Source snapshot1;snapshot2 /Output mergedsnapshot&lt;/code&gt;&lt;/pre&gt;
Just include all the snapshots, separated by semicolons. 
&lt;h2&gt;XML Report&lt;/h2&gt;
After generating snapshots and optionally merging them, they can be  &lt;b&gt;turned into an XML report using the report command&lt;/b&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="bat"&gt;dotcover report /Source=.\dotCoverOutput /Output=coverageReport.xml&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are options to generate &lt;b&gt;HTML&lt;/b&gt; and &lt;b&gt;JSON&lt;/b&gt; as well.&lt;/p&gt;
&lt;p&gt;Note that if there's only one snapshot, the "merge" step is not needed. In fact, there's even a separate &lt;code&gt;analyse&lt;/code&gt; command that will cover and generate a report in one go.&lt;/p&gt;
&lt;h2&gt;No Auto-Deploy&lt;/h2&gt;

&lt;p&gt;There's no auto-deploy for dotCover - &lt;strong&gt;it needs to be installed&lt;/strong&gt;. And since it's a plugin, &lt;strong&gt;Visual Studio is a requirement&lt;/strong&gt;. This is a small inconvenience for developers and our build servers. Having to put VS on all our test machines is a bit of a bigger deal - definitely a strike against dotCover.&lt;/p&gt;
&lt;h2&gt;TypeMock Isolator support in the future&lt;/h2&gt;

&lt;p&gt;The dotCover 1.1 doesn't integrate with Isolator 6. Apparently dotCover's hooks are a little different than many other profiles (nCover, PartCover, …). I've been talking to representatives from both TypeMock and JetBrains, though, and they tell me that the problem is solved, and an upcoming release of Isolator will integrate with dotCover. &lt;a href="http://forums.typemock.com/viewtopic.php?p=8528"&gt;Even better, a pre-release version that supports the latest dotCover EAP is available now&lt;/a&gt;.
&lt;h2&gt;IIS&lt;/h2&gt;
dotCover &lt;b&gt;covers IIS, but only by using the plugin&lt;/b&gt; - this means that the web server has to have Visual Studio and dotCover installed, and it's a manual step to invoke the coverage. In the JetBrains developer community there's a &lt;a href="http://devnet.jetbrains.net/thread/30319"&gt;discussion about command-line IIS support&lt;/a&gt;, but no word from JetBrains staff on when this might come.&lt;/p&gt;
&lt;h2&gt;Statement-level coverage&lt;/h2&gt;

&lt;p&gt;As &lt;a href="http://vcsjones.com/2011/01/03/dotcover-inaccurate-or-misunderstood/"&gt;Kevin Jones notes&lt;/a&gt;, dotCover reports coverage of statements coverage, not sequence points. This means that a line like this:
&lt;pre&gt;&lt;code class="bat"&gt;return value &amp;gt; 10
      ? Colors.Red
      : Colors.White;&lt;/code&gt;&lt;/pre&gt; 
Will report as completely covered, even if it's executed only once - in order to ensure an accurate coverage report for this idea, the &lt;code&gt;?:&lt;/code&gt; would have to be replaced by an if-else block.
This isn't necessarily a major strike against the tool, but it's worth knowing, as it will skew the results somewhat.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;Pros:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;awesome IDE integration&lt;/li&gt;
&lt;li&gt;XML/HTML/JSON reports&lt;/li&gt;
&lt;li&gt;report merging&lt;/li&gt;
&lt;li&gt;IIS profiling&lt;/li&gt;
&lt;/ul&gt;
&lt;b&gt;Cons:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;moderate price&lt;/li&gt;
&lt;li&gt;no auto-deploy&lt;/li&gt;
&lt;li&gt;no Isolator support&amp;mdash;yet&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Overall, I like the tool. I'm a little disappointed by the lack of auto-deploy and the inability to run IIS coverage from the command line, but those problems can be worked around. I was very impressed with the in-IDE support as well as the automatically generated configuration files using the "help" subcommand.
Ordinarily, the I'd say the current lack of Isolator support is a deal-breaker, but I recently demoed the product to some colleagues, and &lt;b&gt;they went bonkers for the IDE integration&lt;/b&gt;. I guess I'll be writing JetBrains and TypeMock looking for the betas. &lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="coverage"></category><category term="dotCover"></category><category term="HastyImpressions"></category><category term="IIS"></category><category term="Isolator"></category><category term="MightyMoose"></category><category term="Testing"></category><category term="TypeMock"></category></entry><entry><title>Can you cover me? Looking for a .NET coverage tool</title><link href="https://blairconrad.com/2011/07/18/can-you-cover-me-looking-for-a-.net-coverage-tool/" rel="alternate"></link><published>2011-07-18T00:00:00-04:00</published><updated>2011-07-18T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-07-18:/2011/07/18/can-you-cover-me-looking-for-a-.net-coverage-tool/</id><summary type="html">&lt;p&gt;Recently at the Day Job, my boss's boss has been on a "code confidence" kick. We've always done various levels of automated and manual unit, integration, issue, system, and regression testing, but he's looking to improve the process. Part of this push involves getting better at measuring which tests exercise …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently at the Day Job, my boss's boss has been on a "code confidence" kick. We've always done various levels of automated and manual unit, integration, issue, system, and regression testing, but he's looking to improve the process. Part of this push involves getting better at measuring which tests exercise what parts of the code. We want to know this for the usual reasons: we can identify gaps in our testing, or more likely find opportunities to cover some areas earlier in the testing cycle. It'd be nice to know that a particularly critical section of code has been adequately exercised by the per-build unit tests, without having to wait for nightly integration testing or wait even longer for a human to get their grubby mitts on it.&lt;/p&gt;
&lt;p&gt;To that end, I'm looking for a .NET coverage tool to dazzle us with tales of test runs. Over the next little while, I'll look at a few candidates, summarize my findings, and hopefully come up with a winner.&lt;/p&gt;
&lt;h2&gt;Considerations&lt;/h2&gt;

&lt;p&gt;Here are some factors that will influence me. Some of these may be negotiable, if a candidate really shines in other areas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We'd like to see coverage information in our build reports, so the tool should &lt;b&gt;run from the command line&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;It'd be easier to put the coverage info our our build reports if the &lt;b&gt;coverage reports were in XML&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;I really prefer a product that &lt;b&gt;has an auto-deploy&lt;/b&gt;, so it can be bundled with the source tree and new developers or build servers just work. You may remember the pains I went to to &lt;a href="https://blairconrad.com/2010/06/06/auto-deploying-typemock-isolator-without-trashing-the-installation/"&gt;auto-deploy TypeMock Isolator&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;While I'm on the subject, one of our products uses Isolator as its mocking framework, so the coverage tool should be able to &lt;b&gt;link with TypeMock Isolator&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;We have a web services layer, which will be exercised by unit tests, but if we could gather stats on the layer as it's being exercised by the client-facing portion, that would be gravy. To that end, it should be possible to &lt;b&gt;cover IIS&lt;/b&gt;.&lt;/li&gt;
&lt;li&gt;When I used TestDriven.NET + NCover a few years ago, I enjoyed being able to quickly see what my tests covered. This isn't a requirement of our current initiative, but &lt;b&gt;IDE integration&lt;/b&gt; would be a bonus.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Price&lt;/b&gt; is a factor. Money's available, but why spend if you don't have to? Or at least, why not pay less for an equivalent product.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;h2&gt;The Candidates&lt;/h2&gt;
Googling has lead me to these candidates, which I'll be examining in the next little while:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jetbrains.com/dotcover/"&gt;dotCover&lt;/a&gt; (&lt;a href="https://blairconrad.com/2011/07/29/hasty-impressions-dotcover-1.1/"&gt;my impression&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ncover.com/"&gt;NCover&lt;/a&gt; (&lt;a href="https://blairconrad.com/2011/11/09/hasty-impressions-ncover/"&gt;my impression&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sourceforge.net/projects/partcover/"&gt;PartCover&lt;/a&gt; (&lt;a href="https://blairconrad.com/2011/08/05/hasty-impressions-partcover/"&gt;my impression&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sawilde/opencover"&gt;OpenCover&lt;/a&gt; (&lt;a href="https://blairconrad.com/2011/08/15/hasty-impressions-opencover/"&gt;my impression&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: &lt;a href="https://blairconrad.com/2011/12/15/best-all-around-.net-coverage-tool-opencover/"&gt;I picked one&lt;/a&gt;.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="coverage"></category><category term="IIS"></category><category term="Isolator"></category><category term="Testing"></category><category term="TypeMock"></category></entry><entry><title>Prime Time Programming, Part 2</title><link href="https://blairconrad.com/2011/05/09/prime-time-programming-part-2/" rel="alternate"></link><published>2011-05-09T00:00:00-04:00</published><updated>2011-05-09T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-05-09:/2011/05/09/prime-time-programming-part-2/</id><summary type="html">&lt;p&gt;&lt;a href="https://blairconrad.com/2011/04/25/prime-time-programming-part-1/"&gt;Last time&lt;/a&gt; I presented a truly horrible prime number generator I was using for &lt;a href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt; problems. Then I presented a revamped generator that used trial division. By adding various refinements to the generator, we saw the time required to generate primes less than 10&lt;sup&gt;7&lt;/sup&gt; shrink from hours to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://blairconrad.com/2011/04/25/prime-time-programming-part-1/"&gt;Last time&lt;/a&gt; I presented a truly horrible prime number generator I was using for &lt;a href="http://projecteuler.net/"&gt;Project Euler&lt;/a&gt; problems. Then I presented a revamped generator that used trial division. By adding various refinements to the generator, we saw the time required to generate primes less than 10&lt;sup&gt;7&lt;/sup&gt; shrink from hours to 123 seconds. Today I'll describe a different approach that's even more effective.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;Attempt 2: Sieve of Eratosthenes&lt;/h2&gt;

&lt;p&gt;The Sieve of Eratosthenes is another method for finding prime numbers. 
The algorithm is basically this:
&lt;ol&gt;
&lt;li&gt;make a big array of numbers, from 2 to the highest prime you're hoping to find&lt;/li&gt;
&lt;li&gt;look for the next number that's not crossed off&lt;/li&gt;
&lt;li&gt;this number is your next prime&lt;/li&gt;
&lt;li&gt;cross off every multiple of the number you just found&lt;/li&gt;
&lt;li&gt;so long as the prime you just found is less than the square root of your limit, go to step 2&lt;/li&gt;
&lt;li&gt;the uncrossed numbers are prime&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;Suppose we want primes less than or equal to 20. We start with this list:
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
The first uncrossed off number is 2. That's our first prime. Cross off all the multiples of 2 (believe it or not, the 4 is crossed off):
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;4&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;6&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;8&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;10&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;12&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;14&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;16&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;18&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;20&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;The next uncrossed off number is 3. Cross off the multiples:
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;4&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;6&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;8&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;9&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;10&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;12&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;14&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;15&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;16&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;18&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;20&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
Next, we have 5. Cross off its multiples (actually, they're already crossed off because they're all also multiples of either 2 or 3):&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;4&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;6&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;8&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;9&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;10&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;12&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;14&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;15&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;16&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;18&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;19&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;20&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;5 is greater than &amp;radic;20, so stop looping. All the uncrossed off numbers are prime:
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;4&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;6&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;7&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;8&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;9&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;10&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;11&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;12&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;13&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;14&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;15&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;16&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;17&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;18&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;19&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;s&gt;&lt;span style="color:#CCC;"&gt;20&lt;/span&gt;&lt;/s&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;h3&gt;A "borrowed" implementation&lt;/h3&gt;

&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes"&gt;wikipedia article&lt;/a&gt; even provides a Python implementation, which I reproduce here in slightly altered form:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def eratosthenes_sieve(m):
    # Create a candidate list within which non-primes will be
    # marked as None; only candidates below sqrt(m) need be checked. 
    candidates = range(m+1)
    fin = int(m**0.5)

    # Loop over the candidates, marking out each multiple.
    for i in xrange(2, fin+1):
        if not candidates[i]:
            continue

        candidates[2*i::i] = [None] * (m//i - 1)

    # Filter out non-primes and return the list.
    return [i for i in candidates[2:] if i]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ran this to find my standard list of primes less than 10&lt;sup&gt;7&lt;/sup&gt;, and was surprised at the results. The time to completion varied wildly on successive runs. Sometimes over &lt;b&gt;50&lt;/b&gt; seconds, and sometimes as low as &lt;b&gt;13&lt;/b&gt;. I noticed that when the run times were high, the laptop's hard drive was thrashing, and just afterward my other applications were unresponsive. &lt;/p&gt;
&lt;p&gt;I reran the test and, with a little help from PerfMon, found out that the memory usage was off the chart. No, seriously. Right off the top. I had to rescale the graph to get everything to fit. the Private Bytes went way up over 200MB. On my 512 MB laptop with Firefox, emacs, and a few background processes, things slow to a crawl. With a smaller set of primes, or on more powerful iron, this implementation may work, but it's not going to meet my needs.&lt;/p&gt;
&lt;h2&gt;Attempt 3: The Sieve, but slowly cross out the composites&lt;/h2&gt;

&lt;p&gt;If allocating a big array of numbers just to cross most of them out right away doesn't work, how about we start by allocating nothing and just cross out numbers at the last moment?
The idea is pretty simple: start counting at 2, and keep a record of upcoming composite numbers that we've discovered by looking at multiples of primes so far. Essentially we maintain a rolling wave of the next multiples of 2, 3, 5, &amp;hellip;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;let &lt;code&gt;composites = {}&lt;/code&gt;, an empty associative array, where each key is a composite number and its value is the prime that it's a multiple of&lt;/li&gt;
&lt;li&gt;let &lt;code&gt;n = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;if n is a known composite, remove it and insert the next multiple in the list&lt;/li&gt;
&lt;li&gt;otherwise, it's prime. Yield it and insert a new composite, &lt;code&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;increment n&lt;/li&gt;
&lt;li&gt;go to step 3&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Let's see how it works&lt;/h3&gt;

&lt;table&gt;
  &lt;tr&gt;&lt;th&gt;n&lt;/th&gt;&lt;th&gt;composites&lt;/th&gt;&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;2&lt;/td&gt;&lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;2&lt;/b&gt; isn't in composites, so yield it. Then insert 2&lt;sup&gt;2&lt;/sup&gt; = 4 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3&lt;/td&gt;&lt;td&gt;&lt;code&gt;{4:2}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;3&lt;/b&gt; isn't in composites, so yield it. Then insert 3&lt;sup&gt;2&lt;/sup&gt; = 9 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;4&lt;/td&gt;&lt;td&gt;&lt;code&gt;{4:2, 9:3}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;4 is in composites, with value 2. Remove it, insert 4 + 2 = 6 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;5&lt;/td&gt;&lt;td&gt;&lt;code&gt;{6:2, 9:3}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;5&lt;/b&gt; isn't in composites, so yield it. Then insert 5&lt;sup&gt;2&lt;/sup&gt; = 25 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;6&lt;/td&gt;&lt;td&gt;&lt;code&gt;{6:2, 9:3, 25:5}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;6 is in composites, with value 2. Remove it, insert 6  + 2 = 8 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;7&lt;/td&gt;&lt;td&gt;&lt;code&gt;{8:2, 9:3, 25:5}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;&lt;b&gt;7&lt;/b&gt; isn't in composites, so yield it. Then insert 7&lt;sup&gt;2&lt;/sup&gt; = 49 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;8&lt;/td&gt;&lt;td&gt;&lt;code&gt;{8:2, 9:3, 25:5, 49:7}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;8 is in composites, with value 2. Remove it, insert 8 + 2 = 10 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;9&lt;/td&gt;&lt;td&gt;&lt;code&gt;{9:3, 10:2, 25:5, 49:7}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;9 is in composites, with value 3. Remove it, insert 9 + 3 = 12 and increment n.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;10&lt;/td&gt;&lt;td&gt;&lt;code&gt;{10:2, 12:3, 25:5, 49:7}&lt;/code&gt;&lt;/td&gt;
    &lt;td&gt;10 is in composites, with value 2. Remove it, and... &lt;b&gt;wait&lt;/b&gt;.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;12 is already in the list, because it's a multiple of 3.  We can't insert it. We'll have to amend the algorithm to account for collisions. If a multiple is already accounted for, keep moving until we find one that isn't in the list.&lt;/p&gt;
&lt;p&gt;In this case, add another 2 to 12 to get 14 and insert it. Then increment n.
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;n&lt;/th&gt;&lt;th&gt;composites&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;&lt;td&gt;&lt;code&gt;{12:3, 14:2, 25:5, 49:7}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;b&gt;11&lt;/b&gt; isn't in composites, so yield it, insert 11&lt;sup&gt;2&lt;/sup&gt; = 121, increment n, and continue&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;
&lt;h3&gt;Show me the code&lt;/h3&gt;

&lt;p&gt;Here's an implementation of the &lt;b&gt;naive algorithm&lt;/b&gt; presented above
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def sieve():
    composites = {}
    n = 2
    while True:
        factor = composites.pop(n, None)
        if factor:
            q = n + factor
            while composites.has_key(q):
                q += factor
            composites[q] = factor
        else:
            # not there - prime
            composites[n*n] = n
            yield n
        n += 1&lt;/code&gt;&lt;/pre&gt;
This implementation takes &lt;b&gt;26.8&lt;/b&gt; seconds to generate all primes below 10&lt;sup&gt;7&lt;/sup&gt;,  close to &amp;#188; the time the best trial division algorithm took.&lt;/p&gt;
&lt;h3&gt;Why is this method so great?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using the associative array values to remember which "stream" of multiples each composite comes from means that the array is no bigger than the number of primes we've seen so far&lt;/li&gt;
&lt;li&gt;The primes can be yielded as soon they're found instead of waiting until the end&lt;/li&gt;
&lt;li&gt;Adding p&lt;sup&gt;2&lt;/sup&gt; when we find a new prime cuts down on collisions but still ensures that we'll keep find all multiples of p, because 2p, 3p, &amp;hellip;, (p-1)p will be weeded out as multiples of lower primes.&lt;/li&gt;
&lt;li&gt;There's very little wasted work - finding a new prime number takes O(1) operations - just checking that the number isn't in the associative array and adding the square to the array. Many composites will take more work, but an amount proportional to the number of distinct prime factors the number has. For example, 12 has prime factors 2, 2, and 3. We tried to add 12 to the array twice, once as a multiple of 2 and once as a multiple of 3. Fortunately, the number of distinct factors is severely limited. For numbers less than 10&lt;sup&gt;7&lt;/sup&gt;, 9699690 has the most distinct prime factors: 2, 3, 5, 7, 11, 13, 17, 19. This sure beats the 446 divisions trial division took to find that 9999991 was prime.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The method already incorporates some of the advantages of the souped-up trial division methods from last time. We only worry about multiples of primes, so there's no need to cut out the composite factors. And when checking to see if n is prime, we never consider prime factors larger than &amp;radic;n. Still, there are some optimizations to make.&lt;/p&gt;
&lt;h3&gt;That's Odd&lt;/h3&gt;

&lt;p&gt;In the sample runthrough above, the algorithm checks 4, 6, 8, 10, &amp;hellip; for primality, even though no even number larger than 2 are prime. Here's an implementation that avoids that:
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def odd_sieve():
   composites = {}
   yield 2
   n = 3
   while True:
       factor = composites.pop(n, None)
       if factor:
           q = n + 2 * factor
           while composites.has_key(q):
               q += 2 * factor
           composites[q] = factor
       else:
           # not there - prime
           composites[n*n] = n
           yield n
       n += 2&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This method generates primes less than 10&lt;sup&gt;7&lt;/sup&gt; in &lt;b&gt;13.4&lt;/b&gt; seconds. This is about half the time it took when we didn't pre-filter the evens. In the trial division case, when we cut out the even numbers, we were saving almost no work - one division per even number, out of potentially dozens or hundreds of divisions being performed. This time, we cut out an associative array lookup and insertion, and most numbers are checked by using only a small number of these operations. Let's see what else we can do.&lt;/p&gt;
&lt;h2&gt;What about 3?&lt;/h2&gt;

&lt;p&gt;If skipping the numbers that are divisible by 2 paid off, will skipping those divisible by 3 as well? Probably.
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def sixish_sieve():
    composites = {}
    yield 2
    yield 3
    step = 2
    n = 5
    while True:
        factor = composites.pop(n, None)
        if factor:
            q = n + 2 * factor
            while q % 6 == 3 or composites.has_key(q):
                q += 2 * factor
            composites[q] = factor
        else:
            # not there - prime
            composites[n*n] = n
            yield n
        n += step
        step = 6 - step&lt;/code&gt;&lt;/pre&gt;
Now the time to generate primes less than 10&lt;sup&gt;7&lt;/sup&gt; is &lt;b&gt;11.9&lt;/b&gt; seconds. Again, I think we've hit diminishing returns. We didn't get the 1/3 reduction I'd hoped, probably due to the more complicated "next multiple" calculation.&lt;/p&gt;
&lt;h3&gt;YAGNI&lt;/h3&gt;

&lt;p&gt;Things are going pretty well. There's only one thing that bothers me about the latest generator - we're storing too many composites in the associative array. Every time we find a prime number, its square is inserted in the array. Even 9999991&lt;sup&gt;2&lt;/sup&gt; is put in the array, even though we'll never check to see if any number greater than 10&lt;sup&gt;7&lt;/sup&gt; is prime. So, modifying the algorithm to omit storing composites that are too large, we get:
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def sixish_sieve_max():
    composites = {}
    yield 2
    yield 3
    step = 2
    n = 5
    while True:
        factor = composites.pop(n, None)
        if factor:
            q = n + 2 * factor
            while q % 6 == 3 or composites.has_key(q):
                q += 2 * factor
            composites[q] = factor
        else:
            # not there - prime
            if n&lt;em&gt;n &amp;lt;= highest:
                composites[n&lt;/em&gt;n] = n
            yield n
        n += step
        step = 6 - step&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;This generator takes &lt;b&gt;10.8&lt;/b&gt; seconds to generate primes below 10&lt;sup&gt;7&lt;/sup&gt; - modest improvement, and one I'd keep anyhow, since the code is barely more complicated than the previous version. However, the real boost, if there is any, is in the memory usage. When &lt;code&gt;sixish_sieve&lt;/code&gt;  generates primes below 10&lt;sup&gt;7&lt;/sup&gt;, the private bytes climb up to 52MB, but &lt;code&gt;sixish_sieve_max&lt;/code&gt; stays below 25MB. The advantage continues as the problem set grows - when the upper limit is 2*10&lt;sup&gt;7&lt;/sup&gt;, &lt;code&gt;sixish_sieve&lt;/code&gt; takes 100MB, but &lt;code&gt;sixish_sieve_max&lt;/code&gt; remains at a cool 25MB - I guess that's the difference between storing 1270607 composites and 607.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a fun and interesting exercise. Being able to look bad at your old code and say "Boy, that was horrible. I'm glad I'm smarter now," makes me happy. And embarrassed. I enjoyed seeing how applying incremental changes and even rudimentary profiling yielded provably better results, right up until they showed that I probably needed to abandon my current path (trial division) and jump on a new one.&lt;/p&gt;
&lt;p&gt;I'm sticking with &lt;code&gt;sixish_sieve_max&lt;/code&gt; for now. It's fast enough to meet my current needs, and will likely remain so until "CPU inflation" forces the Project Euler team to increase the size of their problem sets. Of course, maybe by then &lt;i&gt;I'll&lt;/i&gt; have a faster processor and I won't care.&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="Primes"></category><category term="Profiling"></category><category term="ProjectEuler"></category><category term="Python"></category></entry><entry><title>Prime Time Programming, Part 1</title><link href="https://blairconrad.com/2011/04/25/prime-time-programming-part-1/" rel="alternate"></link><published>2011-04-25T00:00:00-04:00</published><updated>2011-04-25T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-04-25:/2011/04/25/prime-time-programming-part-1/</id><summary type="html">&lt;p&gt;From time to time, I find myself caught up in the heady world of &lt;a href="http://projecteuler.net/" title="Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems."&gt;Project Euler&lt;/a&gt;. It's almost like playing &lt;a href="http://professorlaytonds.com/"&gt;Professor Layton&lt;/a&gt; or some other puzzle-solving game - mathematical or programming brain teasers, served in bite-sized pieces.&lt;/p&gt;
&lt;p&gt;If you look at the Project Euler problems for any length of time, you'll …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From time to time, I find myself caught up in the heady world of &lt;a href="http://projecteuler.net/" title="Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems."&gt;Project Euler&lt;/a&gt;. It's almost like playing &lt;a href="http://professorlaytonds.com/"&gt;Professor Layton&lt;/a&gt; or some other puzzle-solving game - mathematical or programming brain teasers, served in bite-sized pieces.&lt;/p&gt;
&lt;p&gt;If you look at the Project Euler problems for any length of time, you'll notice common themes. One theme is &lt;a href="http://en.wikipedia.org/wiki/Prime_number"&gt;prime numbers&lt;/a&gt; - many problems can't be solved without generating varying quantities of primes. To that end, I'd written a prime generator to be shared between problem solutions. Over time, I added functionality and "optimized" the generator to improve the running time of my solutions. Everything was great, until I tried &lt;a href="http://projecteuler.net/index.php?section=problems&amp;id=315" title="Digital root clocks"&gt;Problem 315&lt;/a&gt;, whose solution required a list of primes between 10&lt;sup&gt;7&lt;/sup&gt; and 2&amp;times;10&lt;sup&gt;7&lt;/sup&gt;. My solution worked, but it ran really slowly - something like 12 minutes. Now, I'm not doing myself any favours by writing in Python and running on a 7-year-old laptop, but that's still too long.&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;My Original Generator&lt;/h2&gt;

&lt;p&gt;This is the slow-performing generator that I replaced when working on Problem 315. The squeamish reader may want to avert his eyes.
&lt;pre&gt;&lt;code class="python"&gt;class PrimeGenerator:
    __primes_so_far = [5]
    __increment = 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__next_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;


&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__primes_so_far&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;bisecting&lt;/span&gt; &lt;span class="n"&gt;didn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;really&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__primes_so_far&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;while&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="k"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__next3&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__next3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__next5&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__next5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__next_index&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__next_index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__primes_so_far&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__primes_so_far&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__next_index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__primes_so_far&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;while&lt;/span&gt; &lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;candidate&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__increment&lt;/span&gt;
        &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__increment&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__is_prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;PrimeGenerator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__primes_so_far&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;candidate&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;My eyes!&lt;/h3&gt;

&lt;p&gt;When I first went back to this code, I exclaimed, "What was I thinking?". I can think of two things:
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;is_prime&lt;/code&gt; member was intended to help out for problems where I didn't have to create too many primes, but just had to check a few number for primality. This doesn't really belong here, and clutters the class. I'd be better off focusing on prime generation.&lt;/li&gt;
&lt;li&gt;I was optimizing at least partly for the case where I'd want to get lists of primes a couple times&amp;mdash;hence the indexing into an already-generated list of primes. If the generator were fast enough, this wouldn't be necessary.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;Things I can't understand, even today. I'll have to blame them on then-ignorance, foolishness, and hasty modifications to the class:
&lt;ul&gt;
&lt;li&gt;Why the mucking about with &lt;code&gt;__next3&lt;/code&gt; and &lt;code&gt;__next5&lt;/code&gt;? What did I have against &lt;a href="http://docs.python.org/reference/simple_stmts.html#yield"&gt;yield&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;Why is &lt;code&gt;is_prime&lt;/code&gt; fussing with a whole new &lt;code&gt;PrimeGenerator&lt;/code&gt; and skipping 2 and 3? Why not just go straight for the saved list of primes starting with 5?&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;In fact, just about the only defensible things (as we'll see below) in the whole class are:
&lt;ul&gt;
&lt;li&gt;ending the modulus checks once the candidate divisor is greater than the square root of the candidate number, and&lt;/li&gt;
&lt;li&gt;the bit where the next&lt;code&gt;__increment&lt;/code&gt; is formed by subtracting the current one from 6 - I was exploiting the fact that, past 3, for any prime &lt;i&gt;p&lt;/i&gt;, p &amp;equiv; 1 (mod 6) or p &amp;equiv; 5 (mod 6).&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;h3&gt;How slow was it?&lt;/h3&gt;

&lt;p&gt;The generator took &lt;b&gt;551.763 seconds&lt;/b&gt; to generate primes less than &lt;b&gt;10&lt;sup&gt;7&lt;/sup&gt;&lt;/b&gt;, as measured by the following:
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def run(f):
    global highest
    start = datetime.datetime.now()
    count = 1
    for p in f:
        count += 1
        if p &amp;gt; highest: break
    end = datetime.datetime.now()
    elapsed = end-start
    return highest, count, elapsed.seconds + (elapsed.microseconds/1000000.0)&lt;/code&gt;&lt;/pre&gt;
Where &lt;code&gt;f&lt;/code&gt; is an instance of &lt;code&gt;PrimeGenerator&lt;/code&gt; passed into the &lt;code&gt;run&lt;/code&gt; method, and &lt;code&gt;highest&lt;/code&gt; is a global that's been set to 10&lt;sup&gt;7&lt;/sup&gt;. &lt;/p&gt;
&lt;h2&gt;Moving forward&lt;/h2&gt;

&lt;p&gt;Based on the extreme slowness and general horribleness of the code, I figured I'd be better off starting over. So, I chucked the generator and started afresh with the simplest generator I could write. I resolved to make incremental changes, ensuring that at each step, the code was:
&lt;ol&gt;
&lt;li&gt;correct (otherwise, why bother)&lt;/li&gt;
&lt;li&gt;faster than the previous version&lt;/li&gt;
&lt;li&gt;simple enough for me to understand&lt;/li&gt;
&lt;/ol&gt;
Let's see what happened.&lt;/p&gt;
&lt;h2&gt;Attempt 1: Trial Division&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Trial_division"&gt;Trial division&lt;/a&gt; is one of the simplest methods for generating primes&amp;mdash;you start counting at 2, and if no smaller positive integers (other than 1) divide the current number, it's prime. The &lt;b&gt;naive implementation&lt;/b&gt; is very simple.
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def naive_trial():
    n = 2
    while True:
        may_be_prime = True
        for k in xrange(2, n):
            if n % k == 0:
                may_be_prime = False
                break
        if may_be_prime:
            yield n
        n += 1&lt;/code&gt;&lt;/pre&gt;
This method takes &lt;b&gt;113.804 seconds&lt;/b&gt; to generate primes below &lt;b&gt;100000&lt;/b&gt;&amp;mdash;I couldn't wait for the full 10&lt;sup&gt;7&lt;/sup&gt; - it would probably be over 3 hours.&lt;/p&gt;
&lt;h3&gt;Trial until root&lt;/h3&gt;

&lt;p&gt;Fortunately, there are some pretty obvious optimizations one can make to the algorithm. The first comes from the observation that if there is a number k, 1 &amp;lt; k &amp;lt; n, that divides n, then there is a number j that divides n with 1 &amp;lt; j &amp;le; &amp;radic;n, so we can stop our trial once we've hit that point.&lt;/p&gt;
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def trial_until_root():
    n = 2
    while True:
        may_be_prime = True
        for k in xrange(2, int(n**0.5)+1):
            if n % k == 0:
                may_be_prime = False
                break
        if may_be_prime:
            yield n
        n += 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method takes &lt;b&gt;468 seconds&lt;/b&gt; to generate primes up to 10&lt;sup&gt;7&lt;/sup&gt;. A definite improvement (and already faster my original generator), but there's still room for more.&lt;/p&gt;
&lt;h3&gt;Trial by primes&lt;/h3&gt;

&lt;p&gt;Here's another observation about divisors of n: if there's a number k that divides n, then there's a prime number p &amp;le; k that divides n, since either k is prime or has prime factors. So if we keep a list of the primes found so far, we only need to check prime divisors that are less than &amp;radic;n.&lt;/p&gt;
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def trial_by_primes():
    primes_so_far = []
    n = 2
    while True:
        may_be_prime = True
        for p in primes_so_far:
            if n % p == 0:
                may_be_prime = False
                break
            if p * p &gt; n: # it's prime
                break
        if may_be_prime:
            primes_so_far.append(n)
            yield n
        n += 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we're down to &lt;b&gt;136 seconds&lt;/b&gt; to generate primes below 10&lt;sup&gt;7&lt;/sup&gt;. That was a worthwhile change, but we have to balance it against the fact that the generator now requires additional storage - the list of primes encountered so far. In this case, we're storing over 660,000 prime numbers in a list. Even an older laptop can handle this burden, but it's something to keep in mind.&lt;/p&gt;
&lt;h3&gt;That's odd&lt;/h3&gt;

&lt;p&gt;And by "that", I mean "all the prime numbers except for 2". There's no point checking the even numbers to see if they're prime. Let's see what happens when we skip them. The only tricky part (and it's not that tricky) is to make sure we still return 2 as our first prime.&lt;/p&gt;
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def odd_trial_by_primes():
    primes_so_far = []
    yield 2
    n = 3
    while True:
        may_be_prime = True
        for p in primes_so_far:
            if n % p == 0:
                may_be_prime = False
                break
            if p * p &gt; n: # it's prime
                break
        if may_be_prime:
            primes_so_far.append(n)
            yield n
        n += 2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method takes &lt;b&gt;127 seconds&lt;/b&gt; to generate primes less than 10&lt;sup&gt;7&lt;/sup&gt;. Not a huge improvement, but better than nothing, and it doesn't really complicate the code that much.  I'll keep it. The reason we don't get a huge improvement here is that checking the even numbers for primeness doesn't take that much effort - they were eliminated as soon as we modded them by the first prime in &lt;code&gt;primes_so_far&lt;/code&gt;. Still, it's a little quicker to jump right over them than to perform the division.&lt;/p&gt;
&lt;h3&gt;What about 3?&lt;/h3&gt;

&lt;p&gt;If skipping the numbers that are divisible by 2 paid off, will skipping those divisible by 3? As I noted above, every prime &lt;i&gt;p&lt;/i&gt; greater than 3 satisfies &lt;code&gt;p &amp;equiv; 1 (mod 6) or p &amp;equiv; 5 (mod 6)&lt;/code&gt;. Let's use that. We'll take advantage of these facts:
&lt;ul&gt;
&lt;li&gt;if p &amp;equiv; 1 (mod 6) , then p+4 &amp;equiv; 5 (mod 6)&lt;/li&gt;
&lt;li&gt;if p &amp;equiv; 5 (mod 6) , then p+2 &amp;equiv; 1 (mod 6)&lt;/li&gt;
&lt;/ul&gt;
So we want to alternate our &lt;code&gt;step&lt;/code&gt; between 2 and 4. Fortunately 6 - 4 = 2 and 6 - 2 = 4, so we can use 6 - step as our next step.
&lt;pre&gt;&lt;code class="python linenos=table"&gt;def sixish_trial_by_primes():
    primes_so_far = []
    yield 2
    yield 3
    step = 2
    n = 5
    while True:
        may_be_prime = True
        for p in primes_so_far:
            if n % p == 0:
                may_be_prime = False
                break
            if p * p &amp;gt; n: # it's prime
                break
        if may_be_prime:
            primes_so_far.append(n)
            yield n
        n += step
        step = 6 - step&lt;/code&gt;&lt;/pre&gt;
Now the time drops to &lt;b&gt;123&lt;/b&gt; seconds to generate primes less than 10&lt;sup&gt;7&lt;/sup&gt;. Clearly we've hit diminishing returns - we're saving two modulus operations on numbers that are divisible by 3 (but not 2), at the cost of a more complicated "step" calculation. We could continue on in this vein, but the gains are not likely to be large, and the complexity increases rapidly. Consider the next step: we'd make sure we don't test numbers divisible by 2, 3, or 5. That means (after 5) we only consider numbers whose remainders when divided by 30 are one of 1, 7, 11, 13, 17, 19, 23, or 29. The steps between numbers are 6, 4, 2, 4, 2, 4, 6, and 2. Who has the energy?
&lt;h2&gt;The problem with Trial Division&lt;/h2&gt;
Trial division has a few things going for it:
&lt;ul&gt;
&lt;li&gt;it's simple to understand&lt;/li&gt;
&lt;li&gt;there are some obvious optimizations that can make its performance tolerable&lt;/li&gt;
&lt;/ul&gt;
Ultimately, though, its downfall is that it takes a lot of work to verify that a large number is prime. Consider the largest prime number below 10&lt;sup&gt;7&lt;/sup&gt;: 9999991. In order to verify that this is prime, we have to consider all prime factors less than &amp;radic;9999991. There are 446 of these. That's 446 divisions, just to verify that one number is prime. &lt;/p&gt;
&lt;p&gt;We're unlikely to radically improve performance by continuing to tinker with trial division. It's time to throw the whole thing away again and try a new approach. Next time we'll do just that.&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="Primes"></category><category term="Profiling"></category><category term="ProjectEuler"></category><category term="Python"></category></entry><entry><title>How to completely disable Autofac components</title><link href="https://blairconrad.com/2011/02/27/how-to-completely-disable-autofac-components/" rel="alternate"></link><published>2011-02-27T00:00:00-05:00</published><updated>2011-02-27T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-02-27:/2011/02/27/how-to-completely-disable-autofac-components/</id><summary type="html">&lt;p&gt;This week I started working with the &lt;a href="http://code.google.com/p/autofac/"&gt;Autofac&lt;/a&gt; &lt;a href="http://www.martinfowler.com/articles/injection.html"&gt;Inversion of Control container&lt;/a&gt; at the Day Job. The first project I tried to introduce Autofac to needed a plugin system. I figured this was a perfect use of &lt;a href="http://nblumhardt.com/2010/01/the-relationship-zoo/"&gt;Autofac's implicit relationship handlers&lt;/a&gt;. Sure enough, a&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;container.Resolve&amp;lt;IEnumerable&amp;lt;IPlugin&amp;gt;&amp;gt;()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;did the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week I started working with the &lt;a href="http://code.google.com/p/autofac/"&gt;Autofac&lt;/a&gt; &lt;a href="http://www.martinfowler.com/articles/injection.html"&gt;Inversion of Control container&lt;/a&gt; at the Day Job. The first project I tried to introduce Autofac to needed a plugin system. I figured this was a perfect use of &lt;a href="http://nblumhardt.com/2010/01/the-relationship-zoo/"&gt;Autofac's implicit relationship handlers&lt;/a&gt;. Sure enough, a&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;container.Resolve&amp;lt;IEnumerable&amp;lt;IPlugin&amp;gt;&amp;gt;()&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;did the trick - I got a nice list of plugin instances for the application to use.&lt;/p&gt;
&lt;p&gt;This isn't enough, though. We need to disable certain components via configuration. One option would be to remove the components from the configuration file, but I wanted to make it easy to restore the plugins (and their original configuration) should the need arise. After poring over the Autofac documentation, it seemed like adding an "Enabled" flag in the components' metadata would be the best way to handle toggling them between on and off. &lt;/p&gt;
&lt;p&gt;Setting up the config file was straightforward,
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;autofac defaultAssembly="DisableComponents"&amp;gt;
  &amp;lt;components&amp;gt;
    &amp;lt;component type="DisableComponents.Plugin1" service="DisableComponents.IPlugin"&amp;gt;
      &amp;lt;metadata&amp;gt;
        &amp;lt;item name="Enabled" value="false" type="System.Boolean" /&amp;gt;
      &amp;lt;/metadata&amp;gt;
    &amp;lt;/component&amp;gt;
    &amp;lt;component type="DisableComponents.Plugin2" service="DisableComponents.IPlugin"&amp;gt;
      &amp;lt;metadata&amp;gt;
        &amp;lt;item name="Enabled" value="true" type="System.Boolean" /&amp;gt;
      &amp;lt;/metadata&amp;gt;
    &amp;lt;/component&amp;gt;
  &amp;lt;/components&amp;gt;
&amp;lt;/autofac&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;as was filtering the components list.&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;var enabledComponents = container.Resolve&amp;lt;IEnumerable&amp;lt;Meta&amp;lt;IPlugin&amp;gt;&amp;gt;&amp;gt;()
    .Where(ComponentIsEnabled)
    .Select(c=&amp;gt;c.Value);

...

private static bool ComponentIsEnabled&amp;lt;T&amp;gt;(Meta&amp;lt;T&amp;gt; component)
{
    const string enabled = "Enabled";
    return !component.Metadata.ContainsKey(enabled) || (bool)component.Metadata[enabled];
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;They're still created, though&lt;/h2&gt;

&lt;p&gt;This approach worked, but all all components are instantiated, including the disabled ones which are made just so we can throw them away. This seems a little wasteful. Worse, a particular installation may have a plugin disabled because it can't (or doesn't want to) support its creation. So I sought a way to prevent the instantiation of the unwanted plugins.&lt;/p&gt;
&lt;p&gt;I tried to find a way to remove or disallow registration based on the metadata, or to intercept component creation, but came up short. The best I could come up with was a modification to the approach above:
&lt;pre&gt;&lt;code class="csharp"&gt;var enabledComponents = container.Resolve&amp;lt;IEnumerable&amp;lt;Meta&amp;lt;Func&amp;lt;IPlugin&amp;gt;&amp;gt;&amp;gt;&amp;gt;()
    .Where(ComponentIsEnabled)
    .Select(c=&amp;gt;c.Value());&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;(I would have preferred to use a &lt;a href="http://msdn.microsoft.com/en-us/library/dd642331.aspx"&gt;Lazy&lt;/a&gt; over a &lt;a href="http://msdn.microsoft.com/en-us/library/bb534960.aspx"&gt;Func&lt;/a&gt;, but I'm working with .Net&amp;nbsp;35.)&lt;/p&gt;
&lt;p&gt;This works&amp;mdash;the plugins are only created when they're enabled&amp;mdash;but it feels inelegant.
I can't help but think that my Autofac knowledge is too shallow to have discovered the "right" way to do this. Hopefully deeper understanding will come in time&amp;hellip;&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="Autofac"></category><category term="Development"></category></entry><entry><title>Growing an MVVM Framework in 2003, part V—Reflections and Regrets</title><link href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/" rel="alternate"></link><published>2011-02-15T00:00:00-05:00</published><updated>2011-02-15T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2011-02-15:/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/</id><summary type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;
&lt;p&gt;This post is from a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II &amp;mdash; Properties&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III  &amp;mdash; Properties Redux&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* Part V&amp;mdash;Reflections and Regrets

&lt;p&gt;Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-11-mvvm-.net1.1/BookFinder"&gt;Google Code repository …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;
&lt;p&gt;This post is from a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II &amp;mdash; Properties&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III  &amp;mdash; Properties Redux&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* Part V&amp;mdash;Reflections and Regrets

&lt;p&gt;Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-11-mvvm-.net1.1/BookFinder"&gt;Google Code repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;I haven't added any articles to this series in a while. The main reason is that I've not done any more work on the framework. I was able to complete my application using the tools using the Framework So Far, and I've long since moved on to other projects.  I wanted, though, to take a quick look back and evaluate the project.&lt;/p&gt;
&lt;h2&gt;I did it!&lt;/h2&gt;

&lt;p&gt;Way back in part&amp;nbsp;1, I said that I wanted to create an application that &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;had testable logic, even in the GUI layer,&lt;/li&gt;
&lt;li&gt;had no “codebehind” in the view, and&lt;/li&gt;
&lt;li&gt;shunted the tedious wiring up of events and handlers into helpers (or a “framework”)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm very pleased with how all this turned out. Taking things in reverse order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The little framework does an excellent job of handling the tedious event-wiring. Handling an View event requires nothing more than declaring a method with a convention-following name and the correct signature, such as &lt;code&gt;public void FindClick(object sender, EventArgs e)&lt;/code&gt;
Properties are wired up in a similar way, by declaring a public field with a convention-following name and an appropriate type (StringProperty, BoolProperty, or ListProperty).&lt;/li&gt;
&lt;li&gt;Aside from setting some properties on View elements (for example, the Find button is initial disabled), there was no need to crack open the View's .cs file&amp;mdash;I never saw the inside of it.&lt;/li&gt;
&lt;li&gt;The easily-invoked event handlers and the property bindings made writing unit test as easy as writing tests for a non-GUI component: set some initial properties, poke the ViewModel by invoking an event handler, and check the properties. Done! Injecting mock model components was the hardest thing, and that's no different than in any other test.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;If only I had&lt;/h2&gt;

&lt;p&gt;There was one nagging problem that I left unresolved. My Model contains only synchronous operations, so the View doesn't update while we're accessing the data store. As it turns out, the operations are very quick, so the user is unlikely to notice. &lt;/p&gt;
&lt;p&gt;I could have implemented asynchronous operations on the view, or used delgates or background threads to explicitly invoke the model in the background. I really would've liked to implement something that would be applicable to a larger problem set. Something like &lt;a href="http://devlicio.us/blogs/rob_eisenberg/archive/2010/08/21/caliburn-micro-soup-to-nuts-part-5-iresult-and-coroutines.aspx"&gt;Caliburn.Micro's IResult and Coroutines&lt;/a&gt;: 
Returning an &lt;code&gt;IResult&lt;/code&gt; or a collection of them to be executed on background threads by the framework, while the GUI updates and the ViewModel is none the wiser.&lt;/p&gt;
&lt;p&gt;Ah well, time was running out, and there didn't seem to be that much benefit. Maybe next time...&lt;/p&gt;
&lt;h2&gt;I would have liked to&lt;/h2&gt;

&lt;p&gt;There are a few other "features" that I would've liked to add to the framework, but there wasn't time, nor did there seem to be an immediate need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a View binder&lt;/strong&gt; &amp;mdash; After writing a class to bind the ViewModel to the fake storage properties, I realized that that was a nicer approach than having the binding code in the  ViewModelBase. I'd like create a "production binder" to hook up the ViewModel and View.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;composable ViewModels&lt;/strong&gt; &amp;mdash; BookFinder is very simple, with only a TextBox and a few ListBoxes and Buttons on its View, so a single View and ViewModel was sufficient. It would be useful to be able to build up a more complicated GUI by walking a tree of ViewModels and composing a GUI out of corresponding View components.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;deregistering event handlers&lt;/strong&gt; &amp;mdash; The framework registers event handlers between the ViewModel and View, with no provision for unregistering them when components are no longer needed. In BookFinder, the single View/ViewModel pair hang around until the application is closed, but in a more complicated application there might be an opportunity to leak resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;

&lt;p&gt;I'm happy with how the framework and tool turned out. I could probably have written the application more quickly if I hadn't bothered trying to extract the framework, but it wouldn't have been as testable (and therefore likely not as well tested). I think the extra effort was worthwhile both because it created a better application and because I learned more about WinForms programming and how I can leverage conventions to reduce programmer workload&amp;mdash;if the framework were used for a second application, development would just fly. And the exercise was fun. Not only writing the framework, but using it &amp;mdash; it's extremely liberating having event handlers just work by creating a properly-named method, and having the handler be immediately testable is a joy. If I had any expectations that I'd be writing similar tools on .NET&amp;nbsp;1.1 again, I'd definitely continue extending the framework.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="Development"></category><category term="Frameworks"></category><category term="MVVM"></category></entry><entry><title>BBC Top 100 Books</title><link href="https://blairconrad.com/2010/12/31/bbc-top-100-books/" rel="alternate"></link><published>2010-12-31T00:00:00-05:00</published><updated>2010-12-31T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-12-31:/2010/12/31/bbc-top-100-books/</id><summary type="html">&lt;p&gt;A meme, from &lt;a href="http://nomagichere.blogspot.com/2010/12/bbc-top-100-books.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+blogger%2FNoMagicHere+%28No+Magic+Here%29"&gt;No Magic Here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today's challenge, the &lt;a href="http://www.bbc.co.uk/arts/bigread/top100.shtml"&gt;BBC Top 100&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instructions: Bold those books you’ve read in their entirety, italicize the ones you started but didn’t finish or read an excerpt.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Pride and Prejudice&lt;/b&gt; – Jane Austen&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Lord of the Rings&lt;/b&gt; – JRR Tolkien&lt;/li&gt;
&lt;li&gt;Jane Eyre – Charlotte …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;A meme, from &lt;a href="http://nomagichere.blogspot.com/2010/12/bbc-top-100-books.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+blogger%2FNoMagicHere+%28No+Magic+Here%29"&gt;No Magic Here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today's challenge, the &lt;a href="http://www.bbc.co.uk/arts/bigread/top100.shtml"&gt;BBC Top 100&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Instructions: Bold those books you’ve read in their entirety, italicize the ones you started but didn’t finish or read an excerpt.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;b&gt;Pride and Prejudice&lt;/b&gt; – Jane Austen&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Lord of the Rings&lt;/b&gt; – JRR Tolkien&lt;/li&gt;
&lt;li&gt;Jane Eyre – Charlotte Bronte&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Harry Potter series&lt;/b&gt; – JK Rowling (all)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;To Kill a Mockingbird&lt;/b&gt; – Harper Lee&lt;/li&gt;
&lt;li&gt;&lt;i&gt;The Bible&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Wuthering Heights – Emily Bronte&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Nineteen Eighty Four&lt;/b&gt; – George Orwell&lt;/li&gt;
&lt;li&gt;&lt;i&gt;His Dark Materials&lt;/i&gt; – Philip Pullman&lt;/li&gt;
&lt;li&gt;Great Expectations – Charles Dickens&lt;/li&gt;
&lt;li&gt;Little Women – Louisa M Alcott&lt;/li&gt;
&lt;li&gt;Tess of the D’Urbervilles – Thomas Hardy&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Catch 22&lt;/b&gt; – Joseph Heller&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Complete Works of Shakespeare&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Rebecca – Daphne Du Maurier&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Hobbit&lt;/b&gt; – JRR Tolkien&lt;/li&gt;
&lt;li&gt;Birdsong – Sebastian Faulks&lt;/li&gt;
&lt;li&gt;Catcher in the Rye – JD Salinger&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Time Traveller’s Wife&lt;/b&gt; – Audrey Niffenegger&lt;/li&gt;
&lt;li&gt;Middlemarch – George Eliot&lt;/li&gt;
&lt;li&gt;Gone With The Wind – Margaret Mitchell&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Great Gatsby&lt;/b&gt; – F Scott Fitzgerald&lt;/li&gt;
&lt;li&gt;Bleak House – Charles Dickens&lt;/li&gt;
&lt;li&gt;War and Peace – Leo Tolstoy&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Hitch Hiker’s Guide to the Galaxy&lt;/b&gt; – Douglas Adams&lt;/li&gt;
&lt;li&gt;Brideshead Revisited – Evelyn Waugh&lt;/li&gt;
&lt;li&gt;Crime and Punishment – Fyodor Dostoyevsky&lt;/li&gt;
&lt;li&gt;Grapes of Wrath – John Steinbeck&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Alice in Wonderland&lt;/b&gt; – Lewis Carroll&lt;/li&gt;
&lt;li&gt;The Wind in the Willows – Kenneth Grahame&lt;/li&gt;
&lt;li&gt;Anna Karenina – Leo Tolstoy&lt;/li&gt;
&lt;li&gt;David Copperfield – Charles Dickens&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Chronicles of Narnia&lt;/b&gt; – CS Lewis&lt;/li&gt;
&lt;li&gt;Emma – Jane Austen&lt;/li&gt;
&lt;li&gt;Persuasion – Jane Austen&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Lion, The Witch and The Wardrobe&lt;/b&gt; – CS Lewis&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Kite Runner&lt;/b&gt; – Khaled Hosseini&lt;/li&gt;
&lt;li&gt;Captain Corelli’s Mandolin – Louis De Berniere&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Memoirs of a Geisha&lt;/b&gt; – Arthur Golden&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Winnie the Pooh&lt;/b&gt; – AA Milne&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Animal Farm&lt;/b&gt; – George Orwell&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Da Vinci Code&lt;/b&gt; – Dan Brown&lt;/li&gt;
&lt;li&gt;One Hundred Years of Solitude – Gabriel Garcia Marquez&lt;/li&gt;
&lt;li&gt;&lt;b&gt;A Prayer for Owen Meaney&lt;/b&gt; – John Irving&lt;/li&gt;
&lt;li&gt;The Woman in White – Wilkie Collins&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Anne of Green Gables&lt;/b&gt; – LM Montgomery&lt;/li&gt;
&lt;li&gt;Far From The Madding Crowd – Thomas Hardy&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Handmaid’s Tale&lt;/b&gt; – Margaret Atwood&lt;/li&gt;
&lt;li&gt;Lord of the Flies – William Golding&lt;/li&gt;
&lt;li&gt;Atonement – Ian McEwan&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Life of Pi&lt;/b&gt; – Yann Martel&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Dune&lt;/b&gt; – Frank Herbert&lt;/li&gt;
&lt;li&gt;Cold Comfort Farm – Stella Gibbons&lt;/li&gt;
&lt;li&gt;Sense and Sensibility – Jane Austen&lt;/li&gt;
&lt;li&gt;A Suitable Boy – Vikram Seth&lt;/li&gt;
&lt;li&gt;The Shadow of the Wind – Carlos Ruiz Zafon&lt;/li&gt;
&lt;li&gt;A Tale Of Two Cities – Charles Dickens&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Brave New World&lt;/b&gt; – Aldous Huxley&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Curious Incident of the Dog in the Night-time&lt;/b&gt; – Mark Haddon&lt;/li&gt;
&lt;li&gt;Love In The Time Of Cholera – Gabriel Garcia Marquez&lt;/li&gt;
&lt;li&gt;Of Mice and Men – John Steinbeck&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Lolita&lt;/b&gt; – Vladimir Nabokov&lt;/li&gt;
&lt;li&gt;The Secret History – Donna Tartt&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Lovely Bones&lt;/b&gt; – Alice Sebold&lt;/li&gt;
&lt;li&gt;Count of Monte Cristo – Alexandre Dumas&lt;/li&gt;
&lt;li&gt;On The Road – Jack Kerouac&lt;/li&gt;
&lt;li&gt;Jude the Obscure – Thomas Hardy&lt;/li&gt;
&lt;li&gt;Bridget Jones’s Diary – Helen Fielding&lt;/li&gt;
&lt;li&gt;Midnight’s Children – Salman Rushdie&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Moby Dick&lt;/i&gt; – Herman Melville&lt;/li&gt;
&lt;li&gt;Oliver Twist – Charles Dickens&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Dracula&lt;/b&gt; – Bram Stoker&lt;/li&gt;
&lt;li&gt;The Secret Garden – Frances Hodgson Burnett&lt;/li&gt;
&lt;li&gt;Notes From A Small Island – Bill Bryson&lt;/li&gt;
&lt;li&gt;Ulysses – James Joyce&lt;/li&gt;
&lt;li&gt;The Bell Jar – Sylvia Plath&lt;/li&gt;
&lt;li&gt;Swallows and Amazons – Arthur Ransome&lt;/li&gt;
&lt;li&gt;Germinal – Emile Zola&lt;/li&gt;
&lt;li&gt;Vanity Fair – William Makepeace Thackeray&lt;/li&gt;
&lt;li&gt;Possession – AS Byatt&lt;/li&gt;
&lt;li&gt;A Christmas Carol – Charles Dickens&lt;/li&gt;
&lt;li&gt;Cloud Atlas – David Mitchell&lt;/li&gt;
&lt;li&gt;The Color Purple – Alice Walker&lt;/li&gt;
&lt;li&gt;The Remains of the Day – Kazuo Ishiguro&lt;/li&gt;
&lt;li&gt;Madame Bovary – Gustave Flaubert&lt;/li&gt;
&lt;li&gt;A Fine Balance – Rohinton Mistry&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Charlotte’s Web&lt;/b&gt; – EB White&lt;/li&gt;
&lt;li&gt;The Five People You Meet In Heaven – Mitch Albom&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Adventures of Sherlock Holmes&lt;/i&gt; – Sir Arthur Conan Doyle&lt;/li&gt;
&lt;li&gt;The Faraway Tree Collection – Enid Blyton&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Heart of Darkness&lt;/b&gt; – Joseph Conrad&lt;/li&gt;
&lt;li&gt;&lt;b&gt;The Little Prince&lt;/b&gt; – Antoine De Saint-Exupery&lt;/li&gt;
&lt;li&gt;The Wasp Factory – Iain Banks&lt;/li&gt;
&lt;li&gt;Watership Down – Richard Adams&lt;/li&gt;
&lt;li&gt;A Confederacy of Dunces – John Kennedy Toole&lt;/li&gt;
&lt;li&gt;A Town Like Alice – Nevil Shute&lt;/li&gt;
&lt;li&gt;The Three Musketeers – Alexandre Dumas&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Hamlet&lt;/i&gt; – William Shakespeare&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Charlie and the Chocolate Factory&lt;/b&gt; – Roald Dahl&lt;/li&gt;
&lt;li&gt;Les Miserables – Victor Hugo&lt;/li&gt;
&lt;/ol&gt;</content><category term="Miscellany"></category><category term="Books"></category><category term="Meme"></category></entry><entry><title>Office Adventure: Hard Drive Shuffle</title><link href="https://blairconrad.com/2010/12/09/office-adventure-hard-drive-shuffle/" rel="alternate"></link><published>2010-12-09T00:00:00-05:00</published><updated>2010-12-09T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-12-09:/2010/12/09/office-adventure-hard-drive-shuffle/</id><summary type="html">&lt;p&gt;It's fashionable to complain about the IT department at the Day Job, but sometimes we get pretty good service. I had occasion to contact them today for two unrelated problems. The first, an issue with a Lotus Notes upgrade, was quickly resolved over the phone. The other problem involved hardware …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's fashionable to complain about the IT department at the Day Job, but sometimes we get pretty good service. I had occasion to contact them today for two unrelated problems. The first, an issue with a Lotus Notes upgrade, was quickly resolved over the phone. The other problem involved hardware, and I'm well on the way to a resolution, with one minor snag.&lt;/p&gt;
&lt;p&gt;While rebooting to pick up part of the Notes fix, I noticed something strange on my BIOS screen. I have two hard drives in my workstation, RAID-1ed together. The BIOS displayed one drive as green, and one red. Red is bad. I mentioned this to the Notes Fixer. Half an hour later I was contacted by a different IT guy. He wanted to come by and take the bad drive so he could order another one. "Sure!" said I.&lt;/p&gt;
&lt;p&gt;IT Guy rebooted my machine again so he could see which drive was faulty. Then powered it down, popped open the case, extracted the hard drive and blew on it, releasing a cloud of toxic dust right above my tea. All this in less time than it takes to type it. He popped closed the case, and off  he went.&lt;/p&gt;
&lt;p&gt;I started booting. I also powered up my computer. The computer beeped funny as it started up. I checked out the BIOS screen. One red drive.&lt;/p&gt;
&lt;p&gt;No green drive.&lt;/p&gt;
&lt;p&gt;"He took the wrong one!" I said, and hared off after him.&lt;/p&gt;
&lt;p&gt;There I was, running through the halls, wearing one boot and one sock. &lt;strong&gt;Thump&lt;/strong&gt;-thump. &lt;strong&gt;Thump&lt;/strong&gt;-thump. &lt;strong&gt;Thump&lt;/strong&gt;-thump. &lt;/p&gt;
&lt;p&gt;"IT Guy," I called, as he hove into view. You see, I wanted to make sure I got him before he put the drive under the Big Magnet. Also, I didn't know where he sits.&lt;/p&gt;
&lt;p&gt;I explained the problem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;B&lt;/b&gt;: You took the wrong drive. I'd like that one back.&lt;br&gt;
&lt;b&gt;ITG&lt;/b&gt;: Oh! Right. Thanks for coming after me.&lt;br&gt;
&lt;b&gt;B&lt;/b&gt;: No problem. Of course, it wasn't for your benefit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We walked back to my cubicle, where he swapped drives and all was well. Then he left, with a cheerful, "We should have the new drive by tomorrow morning. Hey, where's your shoe?"&lt;/p&gt;</content><category term="Miscellany"></category><category term="diversions"></category></entry><entry><title>Growing an MVVM Framework in 2003, part IV—Unit Tests</title><link href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/" rel="alternate"></link><published>2010-11-30T00:00:00-05:00</published><updated>2010-11-30T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-11-30:/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/</id><summary type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;
&lt;p&gt;This post is from a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II&amp;mdash;Properties&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III &amp;mdash;Properties Redux&lt;/a&gt;
* Part IV&amp;mdash;Unit Tests
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

&lt;p&gt;Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-11-mvvm-.net1.1/BookFinder"&gt;Google Code repository …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;
&lt;p&gt;This post is from a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II&amp;mdash;Properties&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III &amp;mdash;Properties Redux&lt;/a&gt;
* Part IV&amp;mdash;Unit Tests
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

&lt;p&gt;Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-11-mvvm-.net1.1/BookFinder"&gt;Google Code repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In parts 1 and 3 (and 2, but I like part 3 better) I showed a tiny "framework" for binding View properties and events to properties and methods on a ViewModel. In addition to avoiding the tedium and noise of wiring up events by hand, I'd hoped to implement a structure that would make unit testing easier. Let's see how that went.&lt;/p&gt;
&lt;h2&gt;Event handlers just work. Almost&lt;/h2&gt;

&lt;p&gt;Recall that event handlers are defined on the ViewModel as plain old methods that happen to take a specific set of arguments&amp;mdash;usually &lt;code&gt;object&lt;/code&gt; and something that derives from &lt;code&gt;EventArgs&lt;/code&gt;. This means that nothing special has to be done in order to exercise the methods during a unit test. The test doesn't have to trick the ViewModel into registering with an event or anything. The test just calls the method. And if the method doesn't care much about its arguments like &lt;code&gt;FindClick&lt;/code&gt; doesn't, you can pass in nonsense:
&lt;pre&gt;&lt;code class="csharp"&gt;public class BookListViewModel
{
    public void FindClick(object sender, EventArgs e)
    {
        ICollection books = bookDepository.Find(TitleText.Value);
        IList bookListItems = BookListItems.Value;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    bookListItems.Clear();&lt;/span&gt;
&lt;span class="err"&gt;    foreach ( string book in books )&lt;/span&gt;
&lt;span class="err"&gt;    {&lt;/span&gt;
&lt;span class="err"&gt;         bookListItems.Add(book);&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public class BookListViewModelTests
{
    [Test]
    public void CallFindClick()
    {
        vm.FindClick(null, null);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Of course, this isn't much of a test. Usually we'll want to set up some initial state for the ViewModel, and verify that the correct actions have been taken. In fact, as things stand, the property fields will all be null, so &lt;code&gt;TitleText.Value&lt;/code&gt; and &lt;code&gt;BookListItems.Value&lt;/code&gt; will error out.&lt;/p&gt;
&lt;h2&gt;Putting something behind the properties&lt;/h2&gt;

&lt;p&gt;Most event handlers will need to access the properties on the ViewModel, so the tests must hook up the properties.&lt;/p&gt;
&lt;h3&gt;Provide stub properties&lt;/h3&gt;

&lt;p&gt;Last time I mentioned that the &lt;code&gt;PropertyStorageStrategy&lt;/code&gt; would bring value. This is it. Recall the definitions of the ListProperty and the PropertyStorageStrategy:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;public class ListProperty: Property
{
    public ListProperty(PropertyStorageStrategy storage): base(storage)
    {}

    public IList Value
    {
        get { return (IList) storage.Get(); }
        set { storage.Set(value); }
    }
}

 public interface PropertyStorageStrategy
 {
     object Get();
     void Set(object value);
 }&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The ListProperty (and BoolProperty and StringProperty) merely consult a PropertyStorageStrategy to obtain a value and they cast it to the correct type. Providing a dumb strategy that, instead of proxying a property on a View control, just holds a field will produce a property that can be used in tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;public class ValuePropertyStrategy: PropertyStorageStrategy 
{
      private object obj;

      public ValuePropertyStrategy(object initialValue)
      {
         this.obj = initialValue;
      }

      public void Set(object value) { obj = value; }
      public object Get() { return obj; }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the test fixture setup can bind properties to the ViewModel:
&lt;pre&gt;&lt;code class="csharp"&gt;[SetUp]
public void SetUp()
{
    vm = new BookListViewModel(new Control(), new FakeBookDepository());
    vm.TitleText = new StringProperty(new ValuePropertyStrategy(""));
    vm.BookListItems = new ListProperty(new ValuePropertyStrategy(new ArrayList()));
    ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;And tests can be constructed to provide initial property values (if the default isn't good enough) and interrogate them afterward.
&lt;pre&gt;&lt;code class="csharp"&gt;[Test]
public void FindClick_WithTitleG_FindsEndersGame()
{
    vm.TitleText.Value = "G";
    vm.FindClick(null, null);&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Assert.IsTrue(vm.BookListItems.Value.Contains(&amp;quot;Ender&amp;#39;s Game&amp;quot;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;Auto-wiring the properties&lt;/h3&gt;

&lt;p&gt;This works, and pretty well. There's not that much noise associated with setting up the fake properties. Still, why should there be any? After so much trouble to remove the tedious wiring up from the production code, it seems wrong to leave it in the testing code.
Also, I'm against &lt;i&gt;anything&lt;/i&gt; that adds a barrier to writing tests. And having to hand-wire a few (or a dozen) properties before you can start testing is definitely a barrier. &lt;/p&gt;
&lt;p&gt;So, let's write a little code to handle the tedium for us.&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;public class ValuePropertyBinder
{
      public static void Bind(ViewModelBase viewModel)
      {
          foreach ( FieldInfo field in viewModel.PropertyFields() )
          {
              ValuePropertyStrategy propertyStorageStrategy = new ValuePropertyStrategy(MakeStartingValue(field.FieldType));

              ConstructorInfo propertyConstructor = field.FieldType.GetConstructor(new Type[] {typeof (PropertyStorageStrategy)});
              object propertyField = propertyConstructor.Invoke(new object[] {propertyStorageStrategy});
              field.SetValue(viewModel, propertyField);
          }
      }

      private static object MakeStartingValue(Type fieldType)
      {
         Type propertyType = fieldType.GetProperty("Value").PropertyType;

         if ( propertyType == typeof(IList) ) { return new ArrayList(); }
         if ( propertyType == typeof(string) ) { return ""; }
         if ( propertyType == typeof(bool) ) { return false; }
         else
         { 
              throw new NotImplementedException("no known starting value for type " + propertyType);
         }
      }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very similar to the wiring we've seen before&amp;mdash;find property fields, construct an object to implement the property, and hook it up. The only thing likely to need attention in the future is &lt;code&gt;MakeStartingValue&lt;/code&gt;. A new property type(like DateTime), will require an expansion to the &lt;code&gt;if&lt;/code&gt; chain. But that should be very infrequent.&lt;/p&gt;
&lt;p&gt;Now it's much easier to use the ViewModel in tests:
&lt;pre&gt;&lt;code class="csharp"&gt;[SetUp]
public void SetUp()
{
   vm = new BookListViewModel(new Control(), new FakeBookDepository());
   ValuePropertyBinder.Bind(vm);
}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;An alternative: brute force and ignorance&lt;/h3&gt;

&lt;p&gt;This approach didn't occur to me until the project was over. Sigh.
The production code works by binding the ViewModel to a View. The test setup could do that. I'd taken pains to keep any kind of code or behaviour out of the View, so there shouldn't be any side effects, and there's no need to show any of the GUI elements. Honestly, the technical downsides seem pretty limited.&lt;/p&gt;
&lt;p&gt;Even so, I don't &lt;i&gt;like&lt;/i&gt; this solution. For the BookFinder application, the View is simple enough that I'm confident the approach would work, but I have concerns over using it in a more complex application. Also, I prefer to reduce the amount of auxiliary production code that's used in tests. In the off chance that something does go wrong, it's nice to be able to have a small set of production code to look at&lt;/p&gt;
&lt;h2&gt;Summing up&lt;/h2&gt;

&lt;p&gt;With the ValuePropertyBinder (or much-maligned "just bind the ViewModel  to the actual Model"), tests are really easy to set up and run. As easy as writing the production code. And they're readable. The only troublesome dependencies are the models. Totally worth the effort.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="Frameworks"></category><category term="MVVM"></category><category term="Testing"></category></entry><entry><title>Growing an MVVM Framework in 2003, part III—Properties Redux</title><link href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/" rel="alternate"></link><published>2010-11-21T00:00:00-05:00</published><updated>2010-11-21T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-11-21:/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/</id><summary type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;
&lt;p&gt;This post is from a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II &amp;#8211; Properties&lt;/a&gt;
* Part III  &amp;#8211; Properties Redux
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

&lt;p&gt;Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-11-mvvm-.net1.1/BookFinder"&gt;Google Code repository …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;
&lt;p&gt;This post is from a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II &amp;#8211; Properties&lt;/a&gt;
* Part III  &amp;#8211; Properties Redux
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

&lt;p&gt;Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-11-mvvm-.net1.1/BookFinder"&gt;Google Code repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;A Change of Plans&lt;/h2&gt;

&lt;p&gt;Last time I showed how I managed the binding of ViewModel properties to the properties on the View's controls.  I promised to talk this time about how the use of the mini-framework affected the testability of the code. I changed my mind&amp;mdash;I want to return to the whole properties discussion.&lt;/p&gt;
&lt;h2&gt;Festering Dissatisfaction&lt;/h2&gt;

&lt;p&gt;The method I had for binding ViewModel properties to the View worked, but it left a bad taste in my mouth. A few things bothered me about the implementation. Recall that to add a bound property the ViewModel had to have code something like this:
&lt;pre&gt;&lt;code class="csharp"&gt;private Property bookListItems;
public string BookListItems
{
    get { return bookListItems.AsList(); }
    set { bookListItems.Value = value; }
}&lt;/code&gt;&lt;/pre&gt;
I have a couple of problems with this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it's pretty chatty&lt;/li&gt;
&lt;li&gt;the client programmer has to know when to use &lt;code&gt;.AsList()&lt;/code&gt; or not, since strings and bools don't require it&lt;/li&gt;
&lt;li&gt;the viewbinding code had to look for the private field, and that just felt gross&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Poor man's generics&lt;/h2&gt;

&lt;p&gt;When I first wrote the code, I was bothered a little by the weaknesses in the property bindings. It wasn't until I wrote &lt;i&gt;about&lt;/i&gt; the code here that the suck really started to get to me. And worse, I was unhappy with what I'd wrote. One phrase from the post kept coming back to me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At this point, I was really missing generics.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What did I mean by that? Why did I miss generics? I hadn't explained that well, even to myself. So I thought about it. What would I do with the generics if I had them? And I thought for a bit longer. Then I had it. I'd make a &lt;code&gt;Property&lt;/code&gt; class to proxy the view's properties&amp;mdash;that would tighten up the code and relieve programmers of the burden of knowing when to use &lt;code&gt;.AsList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Well, I don't have generics, but I do have Manual Type Creation. That's somewhat less convenient, but it's not like I'm going to need dozens of different property types&amp;mdash;3 will do for a start.  So I decided to see what I could do with a little Property type hierarchy.&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;public abstract class Property
{
    protected PropertyStorageStrategy storage;

    protected Property(PropertyStorageStrategy storage)
    {
        this.storage = storage;
    }
}

public class ListProperty: Property
{
    public ListProperty(PropertyStorageStrategy storage): base(storage)
    {}

    public IList Value
    {
        get { return (IList) storage.Get(); }
        set { storage.Set(value); }
    }
}

public class StringProperty: Property
{
    // pretty much what you'd expect
}

public class BoolProperty: Property
{
    // pretty much what you expected above, only more Bool-y
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's not a terrible amount here, just a family of properties. Each concrete class is responsible for providing a &lt;code&gt;Value&lt;/code&gt; property that will return (or accept) a typed value. The real work is done by the &lt;code&gt;storage&lt;/code&gt; member&amp;mdash;it keeps track of the untyped value that the concrete class will take or dole out. As the name &lt;code&gt;PropertyStorageStrategy&lt;/code&gt; suggests, a Property can vary the source and sink for its value via the  &lt;a href="http://en.wikipedia.org/wiki/Strategy_pattern"&gt;Strategy design pattern&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;I was holding it for a friend&lt;/h2&gt;

&lt;p&gt;Let's look at the storage strategy that defers to a property on another object.
&lt;pre&gt;&lt;code class="csharp"&gt; public interface PropertyStorageStrategy
 {
     object Get();
     void Set(object value);
 }&lt;/p&gt;
&lt;p&gt;public class BoundPropertyStrategy: PropertyStorageStrategy 
{
      private object obj;
      private PropertyInfo propertyInfo;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;BoundPropertyStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="err"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propertyInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="err"&gt;{&lt;/span&gt;
     &lt;span class="n"&gt;propertyInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="k"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="err"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;propertyInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Unsurprisingly, this looks a lot like the &lt;code&gt;BoundProperty&lt;/code&gt; class from last time. After all, the core functionality is pretty much the same. So, inject a BoundProperty into one of ListProperty, StringProperty, or BoolProperty, and we get a strongly-typed proxy for the underlying object.&lt;/p&gt;
&lt;h2&gt;Tying it together&lt;/h2&gt;

&lt;p&gt;Of course the new classes required a change to the ViewModel/Model binding code. Locating the ViewModel fields to bind is pretty much the same as it was, except only public fields that derive from Property are considered. The BindFieldToControl becomes the slightly-better named &lt;code&gt;BindPropertyToControl&lt;/code&gt;:
&lt;pre&gt;&lt;code class="csharp linenos=table"&gt;private bool BindPropertyToControl(Control control, FieldInfo field)
{
    string controlPropertyName = ControlAttributeName(control, field.Name);
    if ( controlPropertyName == null )
    {
        return false;
    }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;controlProperty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetType&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;GetProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controlPropertyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myBindingFlags&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;controlProperty&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;BoundPropertyStrategy&lt;/span&gt; &lt;span class="n"&gt;strategy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BoundPropertyStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controlProperty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ConstructorInfo&lt;/span&gt; &lt;span class="k"&gt;constructor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FieldType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetConstructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PropertyStorageStrategy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="n"&gt;propertyField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;strategy&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;propertyField&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The first part of the method just makes sure that the control we've found has a name that matches the first part of the property. Then we look for a property on the control that completes the name. Once those hurdles are past, the magic happens:&lt;/p&gt;
&lt;ol start="15"&gt;
  &lt;li&gt;create a new BoundProperty to proxy the control's property value&lt;/li&gt;
  &lt;li&gt;take the property field type and find the constructor that takes a PropertyStorageStrategy&lt;/li&gt;
  &lt;li&gt;make a new property object, passing in our BoundProperty&lt;/li&gt;
  &lt;li&gt;set the property object onto the ViewModel&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;How's it work?&lt;/h2&gt;

&lt;p&gt;Overall, I think okay. Here's a sample of the ViewModel code.
&lt;pre&gt;&lt;code class="csharp"&gt;public StringProperty TitleText;
public BoolProperty FindEnabled;
public ListProperty BookListItems;&lt;/p&gt;
&lt;p&gt;public void TitleTextChanged(object sender, EventArgs e)
{
    string newText = TitleText.Value;
    FindEnabled.Value = (newText != null &amp;amp; newText.Length &amp;gt; 0);
}&lt;/p&gt;
&lt;p&gt;public void FindClick(object sender, EventArgs e)
{
    ICollection books = bookDepository.Find(TitleText.Value);
    IList bookListItems = BookListItems.Value;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;bookListItems.Clear();&lt;/span&gt;
&lt;span class="err"&gt;foreach ( string book in books )&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    bookListItems.Add(book);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The client developer has to remember to use the funny property types,
but this isn't that much harder than, say &lt;code&gt;Func&lt;/code&gt;. At least the names
make some sense.  The &lt;code&gt;.Value&lt;/code&gt; could get a little old, but I prefer
having it on both the get and the set even over just on the set. I
like having the strong-typing built in to the type, rather than
forcing the client developer to do the conversion in a property.&lt;/p&gt;
&lt;p&gt;On the downside, additional property types will have to be added to
the framework by hand, but that shouldn't come up too often. Also, the
storage strategy for the properties is maybe a little complicated, but
at least clients of the framework never have to deal with it
directly. The observant among you will probably criticize the strategy
because so far there's no use for it. Bear with me. Next time I'll
show you how the strategy adds value.&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="Frameworks"></category><category term="MVVM"></category></entry><entry><title>AutoTest.Net updated - now (and then) notices broken builds</title><link href="https://blairconrad.com/2010/11/14/autotest.net-updated-now-and-then-notices-broken-builds/" rel="alternate"></link><published>2010-11-14T00:00:00-05:00</published><updated>2010-11-14T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-11-14:/2010/11/14/autotest.net-updated-now-and-then-notices-broken-builds/</id><summary type="html">&lt;p&gt;I received a useful comment on &lt;a href="https://blairconrad.com/2011/07/29/hasty-impressions-dotcover-1.1/"&gt;Friday's post about AutoTest.Net&lt;/a&gt;. In the wee hours of Saturday, &lt;a href="http://codebetter.com/blogs/gregyoung/"&gt;Greg Young&lt;/a&gt;, wrote to say&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It should detect broken builds without any problem. We have been running it daily for about 1.5 months.&lt;br&gt;
Perhaps you could grab me via email and reproduce …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;I received a useful comment on &lt;a href="https://blairconrad.com/2011/07/29/hasty-impressions-dotcover-1.1/"&gt;Friday's post about AutoTest.Net&lt;/a&gt;. In the wee hours of Saturday, &lt;a href="http://codebetter.com/blogs/gregyoung/"&gt;Greg Young&lt;/a&gt;, wrote to say&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It should detect broken builds without any problem. We have been running it daily for about 1.5 months.&lt;br&gt;
Perhaps you could grab me via email and reproduce it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, I wasn't going to pass up that offer. Off to GMail!&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;7:15&lt;/td&gt;&lt;td&gt;I grabbed him&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;7:20&lt;/td&gt;&lt;td&gt;he was making specific requests for additional information, the output of test runs through the console runner, and the like. &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8:00&lt;/td&gt;&lt;td&gt;he had dived into the code to verify that things were working as they should, and asked for a sample project that exhibited the bug.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8:20&lt;/td&gt;&lt;td&gt;I sent the code&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8:31&lt;/td&gt;&lt;td&gt;I e-mailed that &lt;i&gt;I'd accidentally sent a project that complied&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8:34&lt;/td&gt;&lt;td&gt;Greg reproduced the problem&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8:54&lt;/td&gt;&lt;td&gt;he sent me a replacement .zip file&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;9:04&lt;/td&gt;&lt;td&gt;it worked!&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;As soon as I broke the compilation, the monitor lit up, showing me which project failed and where:&lt;/p&gt;
&lt;pre&gt;
[Info] 'AutoTest.Console.ConsoleApplication' Preparing build(s) and test run(s)
[Info] 'AutoTest.Console.ConsoleApplication' Error: D:\bconrad\Documents\Source\BlogExamples\2010-11-autotest\BookFinder\BookFinder.Core\BookListViewModel.cs(50,17) CS1002: ; expected [D:\bconrad\Documents\Source\BlogExamples\2010-11-autotest\BookFinder\BookFinder.Core\BookFinder.Core.csproj]
[Info] 'AutoTest.Console.ConsoleApplication' Ran 1 build(s) (0 succeeded, 1 failed) and 0 test(s) (0 passed, 0 failed, 0 ignored)
&lt;/pre&gt;

&lt;p&gt;It turns out that the bug had already been fixed on trunk version of the code, but for some reason hadn't been built into the Windows installer. Turnaround time: 1 hour 49 minutes from my initial e-mail, and that included:
&lt;ul&gt;
&lt;li&gt;me drifting off to other tasks between e-mails, increasing delays&lt;/li&gt;
&lt;li&gt;a session of trying to work around GMail hating the zip file I tried to send&lt;/li&gt;
&lt;li&gt;a delay imposed by my having sent a bad test project&lt;/li&gt;
&lt;/ul&gt;
I'm sure those things added a good half hour to the required time.&lt;/p&gt;
&lt;p&gt;Then he spent another 40 minutes on a non-existent problem that I reported. I'd left an older AutoTest.Net WinForms monitor running during the debugging, so when things finally settled down, I got a pair of toasts from Growl - one reporting build failures, and one reporting successful builds when there weren't any.
When I discovered that, Greg was already installing a new Growl for Windows to try it out. And he was very gracious about my error and his wasted time.&lt;/p&gt;
&lt;p&gt;I'm hardly the first to point it out, but this is one of the great things about open software. It's great getting that kind of service so quickly. And on a weekend no less.&lt;/p&gt;
&lt;h2&gt;Will this encourage me to use AutoTest.Net&lt;/h2&gt;

&lt;p&gt;Sure. My primary complaint with it has been resolved. 
Moreover, I'd be even more inclined to see what comes of Mighty Moose, now that I see the dedication of the developers behind it.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="AutoTest.Net"></category><category term="Testing"></category></entry><entry><title>Hasty impressions: Continuous testing using AutoTest.NET</title><link href="https://blairconrad.com/2010/11/12/hasty-impressions-continuous-testing-using-autotest.net/" rel="alternate"></link><published>2010-11-12T00:00:00-05:00</published><updated>2010-11-12T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-11-12:/2010/11/12/hasty-impressions-continuous-testing-using-autotest.net/</id><summary type="html">&lt;p&gt;&lt;a href="http://abdullin.com/journal/2010/11/11/mighty-moose-smart-continuous-unit-tests-for-net-and-mono.html"&gt;Rinat Abdullin recently posted about Mighty Moose and AutoTest.NET&lt;/a&gt;, two projects for continuous testing in the .NET/Mono space. My interest was immediately piqued, as I'm a huge fan of continuous testing. I've been using &lt;a href="http://codespeak.net/py/dist/test/"&gt;py.test&lt;/a&gt; to run my Python unit tests for years now, almost solely because …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://abdullin.com/journal/2010/11/11/mighty-moose-smart-continuous-unit-tests-for-net-and-mono.html"&gt;Rinat Abdullin recently posted about Mighty Moose and AutoTest.NET&lt;/a&gt;, two projects for continuous testing in the .NET/Mono space. My interest was immediately piqued, as I'm a huge fan of continuous testing. I've been using &lt;a href="http://codespeak.net/py/dist/test/"&gt;py.test&lt;/a&gt; to run my Python unit tests for years now, almost solely because &lt;a href="http://codespeak.net/py/dist/test/features.html#looping-on-the-failing-test-set"&gt;it offers this feature&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm taking a look at &lt;a href="https://github.com/acken/AutoTest.Net"&gt;AutoTest.Net&lt;/a&gt; first. Mostly because it's free. If I'm going to use something at home, it won't be for-pay, and the Day Job has been notoriously slow at shelling out for developer tools.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: there was a bug that had been fixed on trunk, but not in the installer that I used. &lt;a href="https://blairconrad.com/2010/11/14/autotest.net-updated-now-and-then-notices-broken-builds/"&gt;AutoTest.Net is better at detecting broken builds&lt;/a&gt; than I report below. &lt;/p&gt;
&lt;h2&gt;Setting up AutoTest.NET&lt;/h2&gt;

&lt;p&gt;Download and installation were straightforward. I opted to use the Windows installer package, &lt;a href="https://github.com/downloads/acken/AutoTest.Net/AutoTest.Net-v1.0.1beta%20(Windows%20Installer).zip"&gt;AutoTest.Net-v1.0.1beta (Windows Installer).zip&lt;/a&gt;. I just unzipped, ran the MSI, let it install both VS&amp;nbsp;2008 and VS&amp;nbsp;2010 Add-Ins (the other components are required, it seems), and that was that.&lt;/p&gt;
&lt;p&gt;Then I cracked open the configuration file (at &lt;code&gt;c:\Program Files\AutoTest.Net\AutoTest.config&lt;/code&gt;). I just changed two entries:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BuildExecutable&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NUnitTestRunner&lt;/code&gt;&lt;/li&gt; &lt;br&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;That's it. Well, for the basic setup.&lt;/p&gt;
&lt;h2&gt;Running the WinForms monitor&lt;/h2&gt;

&lt;p&gt;I opened a command prompt to the root of a small project and ran the WinForms monitor, telling it to look for changes in the current directory.
&lt;pre&gt;&lt;code class="bat"&gt;&amp;amp; 'C:\Program Files\AutoTest.Net\AutoTest.WinForms.exe' .&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The application started, presenting me with a rather frightening window&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/autotestwinform.png"&gt;&lt;img src="https://blairconrad.com/images/autotestwinform.png" alt="AutoTestWinForm" title="([^"]+)" width="596" height="231" class="aligncenter size-full wp-image-767" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I mean, it makes sense. I have neither built nor run yet, so what did I expect? Still, I was taken aback by the plainness of it. Only temporarily daunted, I then hit the tiny unlabelled button in the northeast corner and got a new window. This was less scary.&lt;/p&gt;
&lt;div class="images"&gt;&lt;a href="https://blairconrad.com/images/autotest-winforms-messages.png"&gt;&lt;img src="https://blairconrad.com/images/autotest-winforms-messages.png" alt="autotest winforms messages" title="autotest winforms messages" width="455" height="212" class="aligncenter size-full wp-image-782" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Everything seemed to be in order. I &lt;i&gt;hadn't&lt;/i&gt; specified MS Test or XUnit runners, nor a code editor. It says it's watching my files. So let's test it.&lt;/p&gt;
&lt;h2&gt;Mucking with the source&lt;/h2&gt;

&lt;p&gt;It's supposed to watch my source changes and Do The Right Thing. Let's see about that.&lt;/p&gt;
&lt;h3&gt;A benign modification to one test file&lt;/h3&gt;

&lt;p&gt;I changed the text in one of my test files. No functionality was changed - it was purely cosmetic. AutoTest.Net noticed, rebuilt the solution, and ran the tests! Pretty slick. Things moved quickly, but here's what I saw from the application:&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/innocuos-test-change-building.png"&gt;&lt;img src="https://blairconrad.com/images/innocuos-test-change-building.png" alt="innocuous test change building" title="innocuous test change building" width="538" height="231" class="aligncenter size-full wp-image-788" /&gt;&lt;/a&gt;
&lt;a href="https://blairconrad.com/images/innocuos-test-change-testing-done.png"&gt;&lt;img src="https://blairconrad.com/images/innocuos-test-change-testing-done.png" alt="innocuous test change testing done" title="innocuous test change testing done" width="538" height="231" class="aligncenter size-full wp-image-787" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;h3&gt;A benign modification to one "core" file&lt;/h3&gt;

&lt;p&gt;Next I changed the text in one of the core files - this file is part of a project that's referenced by the BookFinder GUI project, and the test project. Again, this was a cosmetic change only, just to see what AutoTest.NET would do.
It did what it should - built the three projects and ran the tests. See?&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/innocuous-core-change-testing-done.png"&gt;&lt;img src="https://blairconrad.com/images/innocuous-core-change-testing-done.png" alt="innocuous core change testing done" title="innocuous core change testing done" width="538" height="231" class="aligncenter size-full wp-image-790" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;h3&gt;A core change that breaks a test&lt;/h3&gt;

&lt;p&gt;So, now I'll modify the core code in a way that breaks a test.
It picks up the change, builds, tests, and does a really nice job of showing me the failure. I see the test that failed, and when I click it, am presented with the stack trace, including hyperlink to the source. &lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/breaking-test-change-after-test.png"&gt;&lt;img src="https://blairconrad.com/images/breaking-test-change-after-test.png" alt="breaking test change after test" title="([^"]+)" width="602" height="335" class="aligncenter size-full wp-image-794" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Unfortunately, clicking the hyperlink didn't go so well:&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/breaking-test-change-edit-source.png"&gt;&lt;img src="https://blairconrad.com/images/breaking-test-change-edit-source.png" alt="breaking test change edit source" title="([^"]+)" width="603" height="373" class="aligncenter size-full wp-image-793" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;That was a little disappointing. On the brighter side, hitting "Continue" did continue, with no seeming ill-effects.&lt;/p&gt;
&lt;h3&gt;Redemption&lt;/h3&gt;

&lt;p&gt;Confession time. I hadn't checked the &lt;code&gt;CodeEditor&lt;/code&gt; section of the configuration file. As it turns out, it had a slightly different path to my devenv than the correct one. I fixed up the path and tried again. This time, clicking on the hyperlink opened devenv at the right spot. &lt;/p&gt;
&lt;p&gt;So the problems was &lt;i&gt;ultimately&lt;/i&gt; my fault, but I can't help but wish for more graceful behaviour - how about a "I couldn't find your editor" dialogue? Ah, well. The product's young. Polish will no doubt come.&lt;/p&gt;
&lt;p&gt;I repaired the code that broke the tests, and AutoTest.Net was happy again after rebuilding and rerunning the tests.&lt;/p&gt;
&lt;h3&gt;Syntax Error&lt;/h3&gt;

&lt;p&gt;For my last test, I decided to actually break the compile. This was kind of disappointing. It claimed to run the 3 builds and the tests, and said that everything passed. I'm not sure why this would be - I was really hoping for an indication that the compilation failed, but nope. Everything was rainbows and puppies. &lt;strong&gt;Spurious rainbows and puppies.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;The VS Add-In&lt;/h2&gt;

&lt;p&gt;There's an add-in. You can activate it under the "Tools" menu. It looks and behaves like the WinForms app.&lt;/p&gt;
&lt;h2&gt;The Console Monitor&lt;/h2&gt;

&lt;p&gt;I am used to running py.test in the console, so I thought I'd check out AutoTest's console monitor next. I started it up, made a benign change, and then made a test-breaking change. Here's what I saw:&lt;/p&gt;
&lt;pre&gt;
[Info] 'Default' Starting up AutoTester
[Info] 'AutoTest.Console.ConsoleApplication' Starting AutoTest.Net and watching "." and all subdirectories.
[Warn] 'AutoTest.Console.ConsoleApplication' XUnit test runner not specified. XUnit tests will not be run.
[Info] 'AutoTest.Console.ConsoleApplication' Tracker type: file change tracking
[Warn] 'AutoTest.Console.ConsoleApplication' MSTest test runner not specified. MSTest tests will not be run.
[Info] 'AutoTest.Console.ConsoleApplication'
[Info] 'AutoTest.Console.ConsoleApplication' Preparing build(s) and test run(s)
[Info] 'AutoTest.Console.ConsoleApplication' Ran 3 build(s) (3 succeeded, 0 failed) and 2 test(s) (2 passed, 0 failed, 0 ignored)
[Info] 'AutoTest.Console.ConsoleApplication'
[Info] 'AutoTest.Console.ConsoleApplication' Preparing build(s) and test run(s)
[Info] 'AutoTest.Console.ConsoleApplication' Ran 3 build(s) (3 succeeded, 0 failed) and 2 test(s) (1 passed, 1 failed, 0 ignored)
[Info] 'AutoTest.Console.ConsoleApplication' Test(s) failed for assembly BookFinder.Tests.dll
[Info] 'AutoTest.Console.ConsoleApplication'     Failed -&gt; BookFinder.Tests.BookListViewModelTests.FindClick_WithTitleG_FindsEndersGame:
[Info] 'AutoTest.Console.ConsoleApplication'
&lt;/pre&gt;

&lt;p&gt;Not bad, but I have no stack trace for the failed test. Just the name. I'm a little sad to lose  functionality relative the WinForms runner. I know I wouldn't be able to click on source code lines, but still.&lt;/p&gt;
&lt;h2&gt;Gravy - Hooking up Growl&lt;/h2&gt;

&lt;p&gt;Undeterred by the disappointing performance in the Syntax Error test, I soldiered on. I use Growl for Windows for notifications, and I was keen to see the integration. I went back to the configuration file and input the &lt;code&gt;growlnotify&lt;/code&gt; path. While I was there, I set &lt;code&gt;notify_on_run_started&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; (after all, I know when I hit "save"), and &lt;code&gt;notify_on_run_completed&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. Then I fixed my compile error and saved the file.
In addition to the usual changes to the output window, I saw some happy toast:&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/autotest-growl.png"&gt;&lt;img src="https://blairconrad.com/images/autotest-growl.png" alt="autotest growl" title="([^"]+)" width="249" height="83" class="aligncenter size-full wp-image-798" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Honestly, with a GUI or text-based component around, I'm not sure how much benefit this will be, but I guess I can minimize the main window and so long as tests keep passing, I can get some feedback. Still it's kind of fun.&lt;/p&gt;
&lt;h2&gt;Impressions&lt;/h2&gt;

&lt;p&gt;I really like the idea of this tool. I love the idea of watching my code and continuously running the tests. The first steps are very good - I like the clickonable line numbers to locate my errors, and I think the Growl support is cute, but probably more of a toy than an actual useful feature. &lt;/p&gt;
&lt;h3&gt;Will I Use It?&lt;/h3&gt;

&lt;p&gt;Not now, and probably never at the Day Job. The inability to detect broken builds is pretty disappointing.
Also, at work, I have &lt;a href="http://www.jetbrains.com/resharper/features/unit_testing.html"&gt;ReSharper to integrate my unit tests&lt;/a&gt;. I've bound "rerun the previous test set" to a key sequence, so it's just as easy for me to trigger as it is to save a file.&lt;/p&gt;
&lt;p&gt;At home? Maybe. If AutoTest.Net starts noticing when builds fail, then I probably will use it when I'm away from ReSharper and working in .NET. &lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="AutoTest.Net"></category><category term="HastyImpressions"></category><category term="Testing"></category></entry><entry><title>Growing an MVVM Framework in 2003, part II—Properties</title><link href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/" rel="alternate"></link><published>2010-11-10T00:00:00-05:00</published><updated>2010-11-10T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-11-10:/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/</id><summary type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;

&lt;p&gt;This is second post in a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* Part II&amp;mdash;Properties
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III &amp;mdash;Properties Redux
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-10-mvvm-.net1.1/BookFinder"&gt;Google Code …&lt;/a&gt;&lt;/a&gt;&lt;/div&gt;</summary><content type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;

&lt;p&gt;This is second post in a series on my experiences starting to grow an MVVM Framework in .NET 1.1.&lt;/p&gt;

* &lt;a href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/"&gt;Part I&amp;mdash;Event Handlers&lt;/a&gt;
* Part II&amp;mdash;Properties
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III &amp;mdash;Properties Redux
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-10-mvvm-.net1.1/BookFinder"&gt;Google Code repository&lt;/a&gt;.

&lt;/div&gt;

&lt;p&gt;Last time, I introduced a tiny Windows Forms application and described my efforts to make a small MVVM framework for it. At the end of that post, we'd seen one way to use convention to bind View events to ViewModel event handlers.&lt;/p&gt;
&lt;p&gt;Today I'll talk about properties. It's all very well to have a click on the "Find" button trigger the FindClick method on the ViewModel, but it's useless unless we know &lt;em&gt;what to look for&lt;/em&gt;. I needed a way to pass the &lt;code&gt;Title.Text&lt;/code&gt; value to the ViewModel so it could use it for the search.
 Then the FindClick method I showed last time would work:
&lt;pre&gt;&lt;code class="csharp"&gt;public void FindClick(object sender, EventArgs e)
{
    ICollection books = bookDepository.Find(TitleText);
    BookListItems.Clear();
    foreach ( string book in books )
    {
        BookListItems.Add(book);
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;A Failed Attempt&lt;/h2&gt;

&lt;p&gt;First I tried using Windows Forms binding, with lamentable results. I wish I'd saved the intermediate steps, as I was probably doing something wrong and could've solicited help. Still, whether it was due to a lack of experience on my part, or a flaw in the system, the bindings just wouldn't work. I could bind bools and strings, but lists were right out. &lt;/p&gt;
&lt;h2&gt;A Proxy for Properties&lt;/h2&gt;

&lt;p&gt;I decided to rely on the storage objects that came with the View elements. This meant the ViewModel needed some way to proxy the properties on the View. Then a get or a set on the ViewModel object would flow right through, reading or writing the View's values.
Here's what I came up with:
&lt;pre&gt;&lt;code class="csharp"&gt;public class BoundProperty: Property
{
    private object obj;
    private PropertyInfo propertyInfo;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;BoundProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PropertyInfo&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propertyInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;propertyInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="n"&gt;propertyInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/code&gt;&lt;/pre&gt;
Ignore the &lt;code&gt;Property&lt;/code&gt; base class for a bit. An instances &lt;code&gt;p&lt;/code&gt; of type &lt;code&gt;BoundProperty&lt;/code&gt; can be used to get and set values on the proxied object &lt;code&gt;obj&lt;/code&gt; like so:
&lt;pre&gt;&lt;code class="csharp"&gt;p.Value = valueA;
object valueB = p.Value;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Not incredibly thrilling, but one can work with it. Using the &lt;code&gt;.Value&lt;/code&gt; in order to access the value was a little cumbersome, so I added a little syntactic sugar in the Property base class:
&lt;pre&gt;&lt;code class="csharp"&gt;public abstract class Property
{
    public abstract object Value { get; set; }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Property&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="n"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Property&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IList&lt;/span&gt; &lt;span class="n"&gt;AsList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;I really like the implicit operator functionality, which I'd never used before. I wish it could be used with interfaces, though. There's probably a good reason why it can't, but nothing comes to mind. Anyhow, I had to go another route for IList&amp;mdash;the somewhat uninspiring &lt;code&gt;AsList&lt;/code&gt; method. At this point, I was really missing generics.&lt;/p&gt;
&lt;p&gt;Still, it's nicer to be able to write
&lt;pre&gt;&lt;code class="csharp"&gt;string myString = p1;
IList myList = p2.AsList();&lt;/code&gt;&lt;/pre&gt;
instead of 
&lt;pre&gt;&lt;code class="csharp"&gt;string myString = (string) p1.Value;
IList myList = (IList) p2.Value;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h2&gt;Hooking up the Properties&lt;/h2&gt;

&lt;p&gt;This is pretty much the same as hooking up the events like the last time. All we have to do is define a field (yes, a field) of type Property in the ViewModel:
&lt;pre&gt;&lt;code class="csharp"&gt;private Property titleText;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;The ViewModelBase loops over all the Property fields and looks for View controls that have matching property names:
&lt;pre&gt;&lt;code class="csharp"&gt;foreach ( FieldInfo field in PropertyFields() )
{
    FindPropertyToBindTo(allControls, field);
}&lt;/p&gt;
&lt;p&gt;private void FindPropertyToBindTo(ArrayList allControls, FieldInfo field)
{
    foreach ( Control control in allControls )
    {
        if ( BindFieldToControl(control, field) ) { return; }
    }
}&lt;/p&gt;
&lt;p&gt;private bool BindFieldToControl(Control control, FieldInfo field)
{
    string controlPropertyName = ControlAttributeName(control, field);
    if ( controlPropertyName == null ) { return false; }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;PropertyInfo controlProperty = control.GetType().GetProperty(controlPropertyName, myBindingFlags);&lt;/span&gt;
&lt;span class="err"&gt;if ( controlProperty != null )&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    field.SetValue(this, new BoundProperty(control, controlProperty));&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;return true;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Technically that's it, but the rest of the ViewModel's code is a little cleaner if we &lt;a href="http://www.refactoring.com/catalog/selfEncapsulateField.html"&gt;self encapsulate the field&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;public string TitleText
{
    get { return titleText; }
    set { titleText.Value = value; }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Remarks&lt;/h2&gt;

&lt;p&gt;Once the infrastructure was in place, I really started enjoying developing the application. It was very liberating to add a new event handler just by writing a method with the right name and signature. And even adding access to a new property wasn't so bad&amp;mdash;writing the three lines of code to segregate the conversions and &lt;code&gt;.Value&lt;/code&gt;s was worth it to keep the event handler bodies nice and clean.&lt;/p&gt;
&lt;p&gt;Next time, we'll see how the design affected the form of the application's unit tests.&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="Frameworks"></category><category term="MVVM"></category></entry><entry><title>An unanticipated benefit of using the Chrome Extension Gallery</title><link href="https://blairconrad.com/2010/11/06/an-unanticipated-benefit-of-using-the-chrome-extension-gallery/" rel="alternate"></link><published>2010-11-06T00:00:00-04:00</published><updated>2010-11-06T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-11-06:/2010/11/06/an-unanticipated-benefit-of-using-the-chrome-extension-gallery/</id><summary type="html">&lt;p&gt;I've written 3 Google Chrome Extensions. The first two were for use at the Day Job, so I initially hosted them on an internal server. Eventually I moved them out to the &lt;a href="https://chrome.google.com/extensions"&gt;Chrome Extension Gallery&lt;/a&gt;. There are a few benefits to doing this over self-hosting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;better publicity - as it's the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I've written 3 Google Chrome Extensions. The first two were for use at the Day Job, so I initially hosted them on an internal server. Eventually I moved them out to the &lt;a href="https://chrome.google.com/extensions"&gt;Chrome Extension Gallery&lt;/a&gt;. There are a few benefits to doing this over self-hosting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;better publicity - as it's the prime location for extensions, people will go here looking for them, and they may find your extension&lt;/li&gt;
&lt;li&gt;Google maintains the site, so uptime's pretty good&lt;/li&gt;
&lt;li&gt;the extension gallery maintains the &lt;a href="http://code.google.com/chrome/extensions/autoupdate.html#H2-2"&gt;update manifest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two benefits aren't a big deal for the Day Job extensions. We've a team to keep the servers up, and internal advertising channels. Mostly I enjoyed being freed of the monotony of generating new update manifests.&lt;/p&gt;
&lt;h2&gt;A bonus benefit&lt;/h2&gt;

&lt;p&gt;Last night a new benefit reached out and figuratively grabbed me by the lapels and shook me. I got mail from Google Extensions. They wanted to warn me about a problem with my extension. Sort of. Here it is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From: &lt;b&gt;Google Extensions&lt;/b&gt;&lt;br&gt;
To:   &lt;b&gt;Google Extensions&lt;/b&gt;&lt;br&gt;
Subject:  &lt;b&gt;Important: Your extension is broken for all Chrome users - Here's how to fix it&lt;/b&gt;  &lt;/p&gt;
&lt;p&gt;Hello,  &lt;/p&gt;
&lt;p&gt;You are receiving this mail because you are the owner of an extension
on chrome.google.com/extensions that was broken by a recent update to
Chrome. This affects ALL users of Chrome, so it is something you
should fix as soon as possible.&lt;/p&gt;
&lt;p&gt;Fortunately, the fix is very simple.&lt;/p&gt;
&lt;p&gt;In earlier versions of Chrome, the following syntax was supported:&lt;/p&gt;
&lt;p&gt;&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;script src="example.js"&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;In current versions, this is no longer legal and must be changed to:
&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;script src="example.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
All you have to do is replace any instances of this pattern in your
extension and re-upload, and it should work again.&lt;/p&gt;
&lt;p&gt;We try very hard to avoid ever making breaking changes to the
extension system, but in this case we did not notice it until the
release had already been shipped. Since this is affecting users right
now, we thought you'd appreciate details on what happened, and how to
fix it yourself immediately.&lt;/p&gt;
&lt;p&gt;Thanks,&lt;/p&gt;
&lt;p&gt;-- The Chrome extensions team&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There's a new version of Chrome. It has a flaw, or at least a regression - the old syntax for including  a script isn't supported. I'm a little disappointed that that change went in, but I'll get over it.&lt;/p&gt;
&lt;p&gt;The point is, once a bug was discovered, Google scanned all the extensions, identified those that were affected by the bug, and alerted the owners. I appreciate that they took this step. It's much better than just letting us sit around, waiting for users to tell us that our extension is broken. &lt;/p&gt;
&lt;p&gt;I wish at the Day Job we had this kind of ability. As things are, when a problem is discovered at a customer's site, we don't have an automated way of investigating their installation to see if their data will be problematic, or if the product wizards they've written are going to cause a problem. We sometimes obtain copies of sites' databases and configuration settings to diagnose a pernicious bug or to evaluate whether a proposed upgrade will be harmful. Unfortunately these instances are infrequent and are always a manual process.&lt;/p&gt;
&lt;h2&gt;At the risk of seeming ungrateful&lt;/h2&gt;

&lt;p&gt;I appreciate the notification, and will get right on the update so my user isn't affected. However, if I had my druthers, it would have been nice to have been told
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;which&lt;/i&gt; extensions are affected - Google've already looked at all the extension. They know which ones I need to change. Save me the trouble of grepping. Of course, this would necessitate customized e-mails, rather than an all-purpose message.&lt;/li&gt;
&lt;li&gt;which versions of Chrome were affected (I mean something more specific than "current versions")&lt;/li&gt;
&lt;li&gt;whether this bug is fixed, or if it's going to be fixed in the future. I'm left not knowing if this is a temporary aberration, or if I need to use the &lt;code&gt;&lt;script&gt;&lt;/script&gt;&lt;/code&gt; syntax forever&lt;/li&gt;&lt;/p&gt;</content><category term="Development"></category><category term="ChromeExtensions"></category><category term="Development"></category></entry><entry><title>Growing an MVVM Framework in 2003, part I—Event Handlers</title><link href="https://blairconrad.com/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/" rel="alternate"></link><published>2010-10-29T00:00:00-04:00</published><updated>2010-10-29T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-10-29:/2010/10/29/growing-an-mvvm-framework-in-2003-part-i-event-handlers/</id><summary type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;

This is one post in a series on my experiences starting to grow an MVVM Framework in .NET 1.1.

* Part I&amp;mdash;Event Handlers
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II&amp;mdash;Properties&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III &amp;mdash;Properties Redux
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-10-mvvm-.net1.1/BookFinder"&gt;Google Code …&lt;/a&gt;&lt;/a&gt;&lt;/div&gt;</summary><content type="html">&lt;div style="padding-left:.5em;padding-right:.5em;margin-left:2em;margin-right:2em;border:1px solid #EEE;background-color:#F8F8F8;"&gt;

This is one post in a series on my experiences starting to grow an MVVM Framework in .NET 1.1.

* Part I&amp;mdash;Event Handlers
* &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Part II&amp;mdash;Properties&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2010/11/21/growing-an-mvvm-framework-in-2003-part-iii-properties-redux/"&gt;Part III &amp;mdash;Properties Redux
* &lt;a href="https://blairconrad.com/2010/11/30/growing-an-mvvm-framework-in-2003-part-iv-unit-tests/"&gt;Part IV&amp;mdash;Unit Tests&lt;/a&gt;
* &lt;a href="https://blairconrad.com/2011/02/15/growing-an-mvvm-framework-in-2003-part-v-reflections-and-regrets/"&gt;Part V&amp;mdash;Reflections and Regrets&lt;/a&gt;

Full source code can be found in my &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-10-mvvm-.net1.1/BookFinder"&gt;Google Code repository&lt;/a&gt;.

&lt;/div&gt;

&lt;p&gt;At the Day Job I usually work on web services, but I recently had the opportunity to write a customer-facing tool that had a GUI.&lt;/p&gt;
&lt;p&gt;Previously, I &lt;a href="https://blairconrad.com/2010/04/02/watch-even-if-youre-not-building-an-mvvm-app/"&gt;expressed my excitement over the Rob Eisenberg  "Build Your Own MVVM framework" talk&lt;/a&gt;. Ever since, I've been dying to try my hand at an MVVM application. I wanted to create an application that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;had testable logic, even in the GUI layer,&lt;/li&gt;
&lt;li&gt;had no "codebehind" in the view, and&lt;/li&gt;
&lt;li&gt;shunted the tedious wiring up of events and handlers into helpers (or a "framework")&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, the application was intended to work at our established customers' sites, so I couldn't depend on WPF, or even .NET 2.0&amp;mdash;it's 1.1 all the way.&lt;/p&gt;
&lt;h2&gt;The Goal&lt;/h2&gt;

&lt;p&gt;I'll demonstrate with a simpler app than the one from work, but will cover the the relevant concepts. For the purpose of this post, I'll be writing a book-finding app. The user will be able to enter a substring to use to search a database; the matching entries will be displayed in a ListBox and when one of them is selected, some notes will be displayed in a TextBox.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blairconrad.com/images/bookfindermockup.png"&gt;&lt;img class="aligncenter size-full wp-image-595" title="bookfindermockup" src="https://blairconrad.com/images/bookfindermockup.png" alt="BookFinder Mockup" width="480" height="337" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I didn't want to have to riddle my ViewModel with &lt;code&gt;+=&lt;/code&gt;s just to be able to react to button presses and item selections from the view. I wanted to write something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;public void FindClick(object sender, EventArgs e)
{
    ICollection books = bookDepository.Find(TitleText);
    BookListItems.Clear();
    foreach ( string book in books )
    {
        BookListItems.Add(book);
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and have the method run when the &lt;code&gt;Click&lt;/code&gt; event on the &lt;code&gt;Find&lt;/code&gt; button was raised. The method should use the value of the &lt;code&gt;Text&lt;/code&gt; property of the &lt;code&gt;Title&lt;/code&gt; TextBox to find a list of books and put them in the &lt;code&gt;Items&lt;/code&gt; collection on the &lt;code&gt;BookList&lt;/code&gt; ListBox.&lt;/p&gt;
&lt;h2&gt;Wiring up Event Handlers&lt;/h2&gt;

&lt;p&gt;I created a ViewModelBase class to handle all the infrastructure, so the BookListViewModel code could focus on app-related functions. The first thing &lt;code&gt;ViewModelBase.BindToView&lt;/code&gt; does is seek out event handlers to bind to on the supplied View (which can be any Controller object):&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp"&gt;ArrayList allControls = AllControlsDescendingFrom(View);
foreach ( MethodInfo handler in EventHandlers() )
{
    FindEventToListenTo(allControls, handler);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AllControlsDescendingFrom&lt;/code&gt; recursively looks through all the controls rooted at the View and returns them as a flat list. &lt;code&gt;EventHandlers&lt;/code&gt; uses reflection to locate public methods on the ViewModel that have event-like signatures:
&lt;pre&gt;&lt;code class="csharp"&gt;private IEnumerable EventHandlers()
{
    ArrayList eventHandlers = new ArrayList();
    foreach ( MethodInfo method in this.GetType().GetMethods(BindingFlags.Instance | BindingFlags.Public) )
    {
        if ( isEventHandler(method) )
        {
            eventHandlers.Add(method);
        }
    }
    return eventHandlers;
}&lt;/p&gt;
&lt;p&gt;private bool isEventHandler(MethodInfo info)
{
    ParameterInfo[] parameters = info.GetParameters();
    return
        (info.ReturnType == typeof (void) &amp;amp;&amp;amp;
         parameters.Length == 2 &amp;amp;&amp;amp;
         parameters[0].ParameterType == typeof(object) &amp;amp;&amp;amp;
         (typeof(EventArgs)).IsAssignableFrom(parameters[1].ParameterType));
}&lt;/code&gt;&lt;/pre&gt;
Note the last line. I'd originally just checked that the second parameter &lt;em&gt;was of type &lt;code&gt;EventArgs&lt;/code&gt;&lt;/em&gt;. This worked for many event types, like the Click event on a Button and the SelectedIndexChanged event on a ListBox, but failed to match others, such as a TextBox's KeyPress event:
&lt;pre&gt;&lt;code class="csharp"&gt;public delegate void KeyPressEventHandler(object sender, KeyPressEventArgs e)&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FindEventToListenTo&lt;/code&gt; looks through the allControls list. If there's a control with name &lt;em&gt;Controlname&lt;/em&gt; and an event &lt;em&gt;Eventname&lt;/em&gt;, it will bind to a handler named &lt;em&gt;ControlnameEventname&lt;/em&gt;. For example method SearchClick would be hooked up to the Click event on a control called Search.&lt;/p&gt;
&lt;pre&gt;&lt;code class="csharp linenos=table"&gt;private void FindEventToListenTo(ArrayList allControls, MethodInfo handler)
{
    foreach ( Control control in allControls )
    {
        if ( ListenToEvent(control, handler) )
        {
            return;
        }
    }
}

private bool ListenToEvent(Control control, MethodInfo method)
{
    string eventName = ControlAttributeName(control, method);
    if ( eventName == null )
    {
        return false;
    }

    EventInfo eventInfo = control.GetType().GetEvent(eventName, BindingFlags.Instance | BindingFlags.Public);
    if ( eventInfo == null )
    {
        return false;
    }

    eventInfo.GetAddMethod().Invoke(control, new object[]
                  {
                    Delegate.CreateDelegate(eventInfo.EventHandlerType, this, method.Name)
                  });
    return true;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty straightforward, with two exceptions. Creating the delegate to wrap the ViewModel method was a little tricky&amp;mdash;I had to reference the specific &lt;code&gt;EventHandlerType&lt;/code&gt; that matched the event. Similarly to the EventArgs problem above, I'd originally tried to create an  &lt;code&gt;EventHandler&lt;/code&gt;, which failed for certain events.&lt;/p&gt;
&lt;p&gt;The last piece is the &lt;code&gt;ControlAttributeName&lt;/code&gt; method, which builds the desired attribute (in this case an event) name from a control and the ViewModel member that we want to bind to. The method assumes that the name of the ViewModel member (the handler) will start with the name of the control. If there's a match, it returns the rest of the member name. Otherwise, null. 
The name comparison ignores case, which wasn't necessary to hook up method handlers, but proved to be useful when wiring up properties.
&lt;pre&gt;&lt;code class="csharp"&gt;private string ControlAttributeName(Control control, MemberInfo viewModelMember)
{
    if ( viewModelMember.Name.ToLower().StartsWith(control.Name.ToLower()) )
    {
        return viewModelMember.Name.Substring(control.Name.Length);
    }
    return null;
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
After wiring the event handlers, the ViewModelBase binds to the View's interesting properties. &lt;a href="https://blairconrad.com/2010/11/10/growing-an-mvvm-framework-in-2003-part-ii-properties/"&gt;Details to follow&lt;/a&gt;.&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="Frameworks"></category><category term="MVVM"></category></entry><entry><title>Animating Google Chrome Extension Page Action Icons</title><link href="https://blairconrad.com/2010/08/08/animating-google-chrome-extension-page-action-icons/" rel="alternate"></link><published>2010-08-08T00:00:00-04:00</published><updated>2010-08-08T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-08-08:/2010/08/08/animating-google-chrome-extension-page-action-icons/</id><summary type="html">&lt;p&gt;I'm enjoying using (and working on) Library Lookup&lt;/a&gt;, but I'm not entirely satisfied with the Page Action icons that pop up when searching, or when a book is found, or not found. In particular, I wanted a small animation while the search was ongoing, something like this: &lt;img src="https://blairconrad.com/images/animated_search.gif" alt="animated_search" title="([^"]+)" width="12" height="16" class="alignnone size-full wp-image-565" /&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, the animated …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm enjoying using (and working on) Library Lookup&lt;/a&gt;, but I'm not entirely satisfied with the Page Action icons that pop up when searching, or when a book is found, or not found. In particular, I wanted a small animation while the search was ongoing, something like this: &lt;img src="https://blairconrad.com/images/animated_search.gif" alt="animated_search" title="([^"]+)" width="12" height="16" class="alignnone size-full wp-image-565" /&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, the animated GIF didn't work - Google Chrome Extensions don't support them.&lt;/p&gt;
&lt;p&gt;Briefly deterred, I regrouped and tried a different tack - something I like to call &lt;em&gt;A Bunch o' PNGs and Some Javascript&lt;/em&gt;. First, I got myself three PNGs to display (okay, that's not entirely true - they're what I made the GIF from to begin with)
&lt;ul&gt;
&lt;li style="list-style-image:url('{static}/images/searching_eye_right_16.png');"&gt;searching_eyes_right.png&lt;/li&gt;
&lt;li style="list-style-image:url('{static}/images/searching_eye_down_16.png');"&gt;searching_eyes_down.png&lt;/li&gt;
&lt;li style="list-style-image:url('{static}/images/searching_eye_left_16.png');"&gt;searching_eyes_left.png&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Next, I needed a way to switch between the frames. I put the image names in an array, initialized an index, and wrote a small function that uses &lt;a href="https://developer.mozilla.org/en/window.setTimeout"&gt;window.setTimeout&lt;/a&gt; to switch to a new icon every 0.3 seconds.
&lt;pre&gt;&lt;code class="javascript"&gt;var searching_images = ['searching_eyes_down.png',
                        'searching_eyes_right.png',
                        'searching_eyes_down.png',
                        'searching_eyes_left.png'];&lt;/p&gt;
&lt;p&gt;var image_index = 0;&lt;/p&gt;
&lt;p&gt;var keep_switching_icon = true;
function rotateIcon()
{             &lt;br&gt;
   if ( keep_switching_icon )
   {
      chrome.pageAction.setIcon({tabId: sender.tab.id, path: searching_images[image_index]});
      image_index = (image_index + 1) % searching_images.length;
      window.setTimeout(rotateIcon, 300);
   }
}&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;Then I start the rotation just before hitting the web server to see if the book's available and stop it when a result is found. Flipping the &lt;code&gt;keep_switching_icon&lt;/code&gt; flag as soon as the search completes ensures that the animating thread doesn't overwrite a "found" or "not found" icon.&lt;/p&gt;
&lt;pre&gt;&lt;code class="javascript"&gt;window.setTimeout(rotateIcon, 300);

var xhr = new XMLHttpRequest();
xhr.open("GET", searchurl, true);
xhr.onreadystatechange = function() 
{
    if (xhr.readyState == 4) 
    {
       keep_switching_icon = false;
       if ( xhr.status != 200 )
       {
            chrome.pageAction.setIcon({tabId: sender.tab.id, path: 'my_book_error_19.png'});
            // other error handling
       }
      // process found and not found cases
};
xhr.send();&lt;/code&gt;&lt;/pre&gt;</content><category term="Development"></category><category term="AnimatedGIFs"></category><category term="ChromeExtensions"></category><category term="Development"></category><category term="JavaScript"></category><category term="setTimeout"></category></entry><entry><title>Library Lookup - find books in your library</title><link href="https://blairconrad.com/2010/07/25/library-lookup-find-books-in-your-library/" rel="alternate"></link><published>2010-07-25T00:00:00-04:00</published><updated>2010-07-25T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-07-25:/2010/07/25/library-lookup-find-books-in-your-library/</id><summary type="html">&lt;p&gt;I'm an avid reader, but not an avid collector of objects, so I prefer to get books from the library. As you might imagine, I was initially thrilled to discover &lt;a href="http://jonudell.net/udell/2006-01-30-further-adventures-in-lightweight-service-composition.html" /&gt;the greasemonkey user script&lt;/a&gt; version  of &lt;a href="http://jonudell.net/LibraryLookup.html"&gt;Jon Udell's LibraryLookup bookmarklet&lt;/a&gt;. The ability to visit web pages about books and be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm an avid reader, but not an avid collector of objects, so I prefer to get books from the library. As you might imagine, I was initially thrilled to discover &lt;a href="http://jonudell.net/udell/2006-01-30-further-adventures-in-lightweight-service-composition.html" /&gt;the greasemonkey user script&lt;/a&gt; version  of &lt;a href="http://jonudell.net/LibraryLookup.html"&gt;Jon Udell's LibraryLookup bookmarklet&lt;/a&gt;. The ability to visit web pages about books and be told whether the books are in one's library is just incredibly convenient.&lt;/p&gt;
&lt;p&gt;After a while, I wanted more - I wanted the script to work on more pages, and I wanted it to tell me if the book was in &lt;i&gt;any&lt;/i&gt; of the three libraries that are available to me. So I reworked the script, modularizing it so it was easy to plug in additional libraries and source web pages. The resulting &lt;a href="http://blairconrad.googlecode.com/svn/trunk/greasemonkey/XisbnLibraryLookupWpl.user.js"&gt;XISBN Library Lookup script&lt;/a&gt; has served me well for years.&lt;/p&gt;
&lt;p&gt;Recently, though, I've been using &lt;a href="http://www.google.com/chrome/"&gt;Google Chrome&lt;/a&gt; as my browser, and the user script (for whatever reason) doesn't work with Chrome's greasemonkey-to-extension translator. So, I've been "libary lookupless", and keenly felt the lack. &lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://chrome.google.com/extensions/detail/lopekoojcojbmfpkbncnpihmjbbkdgdk"&gt;&lt;img src="https://blairconrad.com/images/icon_128.png" border="0" alt="LibraryLookup icon" title="LibraryLookup" width="128" height="128" class="alignright size-full wp-image-571" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I figured this was an excellent opportunity to learn how to write Chrome extensions, and it was not too difficult.  The first incarnation of the new
&lt;a href="https://chrome.google.com/extensions/detail/lopekoojcojbmfpkbncnpihmjbbkdgdk"&gt;Library Lookup Chrome Extension&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;is available in the extension gallery. It's in its infancy, but it supports the these libraries:
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.wpl.ca/"&gt;Waterloo Public Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kpl.org/"&gt;Kitchener Public Library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rwl.library.on.ca/"&gt;Region of Waterloo Library&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;And it will start looking up libraries when you browse to a book's page at:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;any site that has the ISBN in the URL&lt;/b&gt;, including (but not limited to)
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="http://www.amazon.com/"&gt;Amazon.com&lt;/a&gt; (and country-specific variants),&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.chapters.indigo.ca/"&gt;Chapters/Indigo&lt;/a&gt;, and&lt;/li&gt;
    &lt;li&gt;&lt;a href="http://www.powells.com/"&gt;Powell's Books&lt;/a&gt;,&lt;/li&gt;
  &lt;/ul&gt;
  &lt;li&gt;&lt;a href="http://www.goodreads.com/"&gt;Goodreads&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.allconsuming.net" /&gt;All Consuming&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.librarything.com"&gt;LibraryThing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Try it now! Install the extension, visit &lt;a href="http://www.amazon.ca/Time-Travelers-Wife-Audrey-Niffenegger/dp/0676976336"&gt;a book page&lt;/a&gt;, and (if it's in the libraries) click on the handy "book found" page icon in the URL bar to see where your book is:&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/found_tttw.png"&gt;&lt;img src="https://blairconrad.com/images/found_tttw.png?w=300" alt="Library Lookup finds The Time Traveler&amp;#039;s Wife" title="found_tttw" width="300" height="127" class="aligncenter size-medium wp-image-528" /&gt;&lt;/a&gt;
&lt;/div&gt;</content><category term="Miscellany"></category><category term="LibraryLookup"></category></entry><entry><title>libraryhippo.com lives</title><link href="https://blairconrad.com/2010/07/13/libraryhippo.com-lives/" rel="alternate"></link><published>2010-07-13T00:00:00-04:00</published><updated>2010-07-13T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-07-13:/2010/07/13/libraryhippo.com-lives/</id><summary type="html">&lt;p&gt;For a while now, I've been dithering over getting LibraryHippo its own domain name. I hadn't, mostly because I'm a little lazy and cheap and afraid of the domain registration process.
Yesterday at the Day Job, a co-worker (whose name just might be an anagram of &lt;b&gt;Yen Waster&lt;/b&gt;), on learning …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a while now, I've been dithering over getting LibraryHippo its own domain name. I hadn't, mostly because I'm a little lazy and cheap and afraid of the domain registration process.
Yesterday at the Day Job, a co-worker (whose name just might be an anagram of &lt;b&gt;Yen Waster&lt;/b&gt;), on learning that libraryhippo.com was available, plunked a $10 bill on my desk and insisted that I buy the domain. I called him foolish and tried to return the money, but he was adamant.&lt;/p&gt;
&lt;p&gt;So, after an hour's work last night, and as a result of Mr. Waster's generosity, I invite you to check out the majesty of&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.libraryhippo.com"&gt;www.libraryhippo.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="Miscellany"></category><category term="LibraryHippo"></category><category term="Profligateness"></category></entry><entry><title>Using XSL to arbitrarily order strings - lessons from Professor Layton</title><link href="https://blairconrad.com/2010/07/02/using-xsl-to-arbitrarily-order-strings-lessons-from-professor-layton/" rel="alternate"></link><published>2010-07-02T00:00:00-04:00</published><updated>2010-07-02T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-07-02:/2010/07/02/using-xsl-to-arbitrarily-order-strings-lessons-from-professor-layton/</id><summary type="html">&lt;p&gt;At the Day Job,  I usually work on a middleware component that contains a component that monitors the state of the system. A "health check", if you will. The component can be monitored automatically so notifications can be triggered on error conditions, or it can be used by a human …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the Day Job,  I usually work on a middleware component that contains a component that monitors the state of the system. A "health check", if you will. The component can be monitored automatically so notifications can be triggered on error conditions, or it can be used by a human. In the latter case, the user sees a list of tests performed on the system, sorted first by test outcome and then by test name. To help the user identify problems, any errors encountered are pushed to the top of the results page. Here's a sample:&lt;/p&gt;
&lt;table border="1" style="border:1px solid black;border-collapse:collapse;"&gt;
&lt;tr style="background:#DDDDDD;"&gt;&lt;th&gt;Result&lt;/th&gt;&lt;th&gt;Test&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Nacelle Polarization&lt;/td&gt;&lt;td&gt;unpolarized&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;Dilithium Crystals&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;Jefferies tube&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;Warp Coils&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The actual report is an HTML page built from XML using an XSL transform - the main health check page queries various subcomponents that provide XML document sections. The sections are gathered and the XSLT sorts the results according to severity.&lt;/p&gt;
&lt;p&gt;The XSLT sorts the entries alphabetically by result string, using this XSL:
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;xsl:apply-templates select="//Operation"&amp;gt;
    &amp;lt;xsl:sort order="ascending" select="Result" /&amp;gt;
    &amp;lt;xsl:sort order="ascending" select="Test" /&amp;gt;
&amp;lt;/xsl:apply-templates&amp;gt;&lt;/code&gt;&lt;/pre&gt;
Up 'til now, that worked great, but recently we had a need to add a third status - "Warning". The new report looked like this:&lt;/p&gt;
&lt;table border="1" style="border:1px solid black;border-collapse:collapse;"&gt;
&lt;tr style="background:#DDDDDD;"&gt;&lt;th&gt;Result&lt;/th&gt;&lt;th&gt;Test&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Nacelle Polarization&lt;/td&gt;&lt;td&gt;unpolarized&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;Dilithium Crystals&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;Warp Coils&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Warning&lt;/td&gt;&lt;td&gt;Jefferies tube&lt;/td&gt;&lt;td&gt;partly blocked&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;It would be better for Warning to be grouped between Error and OK. Unfortunately, it wasn't obvious how to do this. A few Google searches later, I'd found &lt;a href="http://www.oxygenxml.com/archives/xsl-list/200603/msg00506.html"&gt;a post by Nick Fitzsimons that described his solution to the problem&lt;/a&gt;. After trying his approach, I was struck by a feeling of deja vu: I'd seen this, and recently, but where?&lt;/p&gt;
&lt;h2&gt;Professor Layton to the Rescue&lt;/h2&gt;

&lt;p&gt;Then it hit me. It's a classic puzzle. I'm sure it's appeared in many places, but I recently saw it in the game &lt;a href="http://professorlaytonds.com/"&gt;Professor Layton and the Diabolical Box&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Fake Coins puzzle asks
&lt;blockquote&gt;
There are 10 coins in each of the five bags below. One of these bags is filled with fake coins that are lighter than the real ones. A real coin weighs 10 units, but a false coin is one unit lighter. If you're  using a scale that can register up to 200 units, what is the fewest number of times you could use the scale to find the one bag filled with fake coins?
&lt;/blockquote&gt;&lt;/p&gt;
&lt;div class="images"&gt;
&lt;a href="https://blairconrad.com/images/fake_coins.png"&gt;&lt;img src="https://blairconrad.com/images/fake_coins.png" alt="fake coins puzzle" title="fake coins puzzle" width="256" height="192" class="aligncenter size-full wp-image-494" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;I'm going to spoil the puzzle, so if you want to figure it out yourself, stop reading now.&lt;/p&gt;
&lt;p&gt;The answer is "one". The interesting part is the approach: 
take 1 coin from bag 1, 2 coins from bag 2, and so on. Weigh them. There's a total of 15 coins, so if they were all genuine, the weight would be 150 units, but we know that each counterfeit coin is one unit less. So,
&lt;ul&gt;
&lt;li&gt;if bag 1 contains the fakes, the total weight will be 150 - 1 = 149&lt;/li&gt;
&lt;li&gt;if bag 2 contains the fakes, the total weight will be 150 - 2 = 148&lt;/li&gt;
&lt;li&gt;if bag 3 contains the fakes, the total weight will be 150 - 3 = 147&lt;/li&gt;
&lt;li&gt;if bag 4 contains the fakes, the total weight will be 150 - 4 = 146&lt;/li&gt;
&lt;li&gt;if bag 5 contains the fakes, the total weight will be 150 - 5 = 145&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;It's a nice trick - coins from each bag contribute either 10 or 9 units - the weight difference between a good and a bad coin is 1, so we magnify that constant difference by different amounts to produce a single value that identifies which group the fake(s) come from.&lt;/p&gt;
&lt;h2&gt;From coins to result severity&lt;/h2&gt;

&lt;p&gt;The puzzle's fun, but what's the connection with the string ordering? The &lt;a href="http://www.w3.org/TR/xslt#sorting"&gt;XSLT sort function&lt;/a&gt; operates on a single sort key generated from the input nodes, kind of like the single value (the weight) generated from a set of coins in the puzzle. &lt;/p&gt;
&lt;p&gt;It's still not clear how to generate a "weight" for the strings. Like in the coin puzzle, we want to sum up a series of values that are mostly the same, but that differ for a single result severity. We're helped by the fact that the &lt;a href="http://www.w3.org/TR/xpath/#function-number"&gt;number function&lt;/a&gt; converts Boolean &lt;code&gt;true&lt;/code&gt; values to 1 and &lt;code&gt;false&lt;/code&gt; to 0. If we compare each result severity in the source XML to "Error", "Warning", and "OK" in turn, exactly one of these will give a true (1) response, and the rest will be false (0). &lt;/p&gt;
&lt;p&gt;So, like the coin puzzle, where all weights are the same except for the counterfeits, we have a situation where all comparisons give the same value except for the true one. If we treat the sorting groups&amp;mdash;Error, Warning, and OK&amp;mdash;like the bags of coins, we can see how to rank the results. Multiplying the 0s and 1s by a factor that gives the preferred sort order produces a sum that acts as the perfect sort key:
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;xsl:apply-templates select="//Operation"&amp;gt;
    &amp;lt;xsl:sort data-type="number" order="ascending"
        select="(number(Result='Error') * 1)
              + (number(Result='Warning') * 2)
              + (number(Result='OK') * 3)" /&amp;gt;
    &amp;lt;xsl:sort order="ascending" select="Result" /&amp;gt;
&amp;lt;/xsl:apply-templates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a result severity of &lt;b&gt;Error&lt;/b&gt; maps to 1 &amp;times; 1 + 0 &amp;times; 2 + 0 &amp;times; 3 = &lt;b&gt;1&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;a result severity of &lt;b&gt;Warning&lt;/b&gt; maps to 0 &amp;times; 1 + 1 &amp;times; 2 + 0 &amp;times; 3 = &lt;b&gt;2&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;a result severity of &lt;b&gt;OK&lt;/b&gt; maps to  0 &amp;times; 1 + 0 &amp;times; 2 + 1 &amp;times; 3 = &lt;b&gt;3&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The select code is a little long, and not obvious when starting from an empty slate, but it has some nice features:
&lt;ul&gt;
&lt;li&gt;extending the sort for new result severities is straightforward - just add a term with the appropriate multiplier&lt;/li&gt;
&lt;li&gt;if we introduce a new severity without adding it to the sort, it sorts to the top - probably the best possible default action&lt;/li&gt;
&lt;li&gt;most importantly, it works. We now get a good health check result:&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;table border="1" style="border:1px solid black;border-collapse:collapse;"&gt;
&lt;tr style="background:#DDDDDD;"&gt;&lt;th&gt;Result&lt;/th&gt;&lt;th&gt;Test&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Error&lt;/td&gt;&lt;td&gt;Nacelle Polarization&lt;/td&gt;&lt;td&gt;unpolarized&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Warning&lt;/td&gt;&lt;td&gt;Jefferies tube&lt;/td&gt;&lt;td&gt;partly blocked&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;Dilithium Crystals&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;OK&lt;/td&gt;&lt;td&gt;Warp Coils&lt;/td&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;</content><category term="Development"></category><category term="Development"></category><category term="Sorting"></category><category term="XSLT"></category></entry><entry><title>Auto-deploying TypeMock Isolator Without Trashing the Installation</title><link href="https://blairconrad.com/2010/06/06/auto-deploying-typemock-isolator-without-trashing-the-installation/" rel="alternate"></link><published>2010-06-06T00:00:00-04:00</published><updated>2010-06-06T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-06-06:/2010/06/06/auto-deploying-typemock-isolator-without-trashing-the-installation/</id><summary type="html">&lt;p&gt;At the Day Job, we use &lt;a href="http://site.typemock.com/typemock-isolator-product"&gt;TypeMock Isolator&lt;/a&gt; as the isolation framework for the client portion of our flagship product. Historically we'd used version 3, but recently I had the opportunity to upgrade the code and build system to use the 2010 (or "version 6") edition.&lt;/p&gt;

&lt;h4&gt;Backward Compatibility&lt;/h4&gt;

&lt;p&gt;I was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the Day Job, we use &lt;a href="http://site.typemock.com/typemock-isolator-product"&gt;TypeMock Isolator&lt;/a&gt; as the isolation framework for the client portion of our flagship product. Historically we'd used version 3, but recently I had the opportunity to upgrade the code and build system to use the 2010 (or "version 6") edition.&lt;/p&gt;

&lt;h4&gt;Backward Compatibility&lt;/h4&gt;

&lt;p&gt;I was very pleased to see that no code changes were &lt;i&gt;required&lt;/i&gt; with the upgrade. Sure, we'd like to start using the new &lt;a href="http://www.typemock.com/Docs/UserGuide/"&gt;Arrange-Act-Assert API&lt;/a&gt;, and to trade in the method name strings for the type-safe lambda expressions, but I didn't want to have to run back and convert everything today. And I didn't. Typemock Isolator appears to be backward compatible (at least as far as the feature set we use goes).&lt;/p&gt;

&lt;h4&gt;Auto-Deployment&lt;/h4&gt;

&lt;p&gt;In fact, the whole exercise of moving up to  2010 would've been over in almost no time were it not for one thing&amp;mdash;we need to auto-deploy Isolator. The reasons are several:
&lt;ul&gt;
&lt;li&gt;we have many dozen people working on the product, spread across four teams and three offices all over the world, so coordinating the installation is tricky&lt;/li&gt;
&lt;li&gt;some people have a need to occasionally build the product, but don't actively develop it - imposing an install on them seems rude&lt;/li&gt;
&lt;li&gt;some of our developers actively oppose unit testing, and I didn't want to give them any more ammunition than I had to&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'd had a home-grown auto-deploy solution working with Isolator 3, but it was a little clunky and some of the details of the Isolator install had changed, so it wasn't really up to auto-deploying 6. Fortunately, I found a &lt;a href="http://blog.typemock.com/2010/01/auto-deploy-typemock-isolator_25.html"&gt;Typemock Insider blog post about auto-deploying&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We use &lt;a href="http://ant.apache.org/"&gt;Apache Ant&lt;/a&gt; for our builds, but it was no trouble to shell out to an &lt;a href="http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx"&gt;MSBuild&lt;/a&gt; task to auto-deploy Isolator:&lt;/p&gt;
&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TypeMockLocation&amp;gt;path\to\TypeMock\Isolator\files&amp;lt;/TypeMockLocation&amp;gt;
    &amp;lt;NUNIT&amp;gt;path\to\nunit-console.exe&amp;lt;/NUNIT&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;  &lt;/p&gt;
&lt;p&gt;&amp;lt;Import Project="$(TypeMockLocation)\TypeMock.MSBuild.Tasks"/&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;Target Name="RegisterTypeMock"&amp;gt;
    &amp;lt;TypeMockRegister Company="MyCompany" License="XXX-XXX" AutoDeploy="true"/&amp;gt; 
    &amp;lt;TypeMockStart/&amp;gt;
    &amp;lt;Exec ContinueOnError="false" Command="$(NUNIT) $(TestAssembly)"/&amp;gt;
    &amp;lt;TypeMockStop Undeploy="true"/&amp;gt;
  &amp;lt;/Target&amp;gt;
 &amp;lt;/Project&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4&gt;Build Server Licenses&lt;/h4&gt;

&lt;p&gt;This worked really well - I was testing the tests on my local machine, watching Isolator auto-deploy and auto-undeploy. Everything was great, until I realized: we have two licenses&amp;mdash;one for developers, and one for build servers. It only seemed right to use the appropriate one depending on whether we were building on a developer's machine or a build server. Fortunately, all our build servers set a specific environment variable, so it was a simple matter to have MSBuild pick the correct one.&lt;/p&gt;

&lt;h4&gt;Undeploying Isolator Mangles the Installed Instance&lt;/h4&gt;

&lt;p&gt;Even though we're providing a mechanism for auto-deploying Isolator, some developers will prefer to install it in order to use the Visual Studio AddIn to aid debugging. I'd heard that undoing the auto-deployment could wreak havoc with the installed version of Typemock Isolator, and that it's sometime necessary to repair the installed instance. A little testing, with the help of a coworker, showed this to be the case. Worse, it appeared that the auto-deploy/undeploy broke his ability to run the product in the IDE - as soon as the process started, it would end, with a "CLR error 80004005". Disabling the Isolator AddIn made the error go away.&lt;/p&gt;

&lt;p&gt;So it looked like we'd need to figure out how not to break installed Isolator instances while still supplying auto-deployment when it's needed. Searching found nothing promising, so I resorted to Registry spelunking. Unfortunately, the installed Isolator and auto-deployed Isolator make very similar Registry entries - there was nothing that I felt confident basing "Is Isolator installed?" on. After poking around and coming up short, I fell back to using the filesystem. By default, Isolator is installed in &lt;code&gt;%ProgramFiles%\TypeMock\Isolator\6.0&lt;/code&gt;, so I decided to use that as the determinant. I'd feel dirty doing this for code destined for a customer's site, but I can live with telling our own developers that if they choose to install Isolator, they should install it in the default location or face the consequences.&lt;/p&gt;

&lt;p&gt;Still, if anyone comes up with a more reliable way to determine if Isolator is installed, please post it in the comments.&lt;/p&gt;

&lt;h4&gt;Putting it all Together&lt;/h4&gt;

&lt;p&gt;Here's the MSBuild file I ended up with. It uses the correct license based on machine type, and only auto-deploys/undeploys when Isolator isn't installed - existing installations are left alone.&lt;/p&gt;

&lt;pre&gt;&lt;code class="xml"&gt;&amp;lt;Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;TypeMockLocation&amp;gt;path\to\TypeMock\Isolator\files&amp;lt;/TypeMockLocation&amp;gt;
    &amp;lt;NUNIT&amp;gt;path\to\nunit-console.exe&amp;lt;/NUNIT&amp;gt;

    &amp;lt;!-- Used to detect TypeMock installs. --&amp;gt;
    &amp;lt;UsualTypeMockInstallDir&amp;gt;$(ProgramFiles)\TypeMock\Isolator\6.0&amp;lt;/UsualTypeMockInstallDir&amp;gt;

    &amp;lt;!-- 
         Only deploy Typemock if it's not already in the usual install dir.

         If developers install Typemock, they should install it in the
         default location in order to help the build system decide
         whether or not we need to auto-deploy (since auto-deploy and
         undeploy can corrupt the TypeMock VisusalStudio Add-In, and
         interfere with the ability to run programs in the IDE.
      --&amp;gt;
    &amp;lt;DeployTypeMock&amp;gt;false&amp;lt;/DeployTypeMock&amp;gt;
    &amp;lt;DeployTypeMock Condition="!Exists('$(UsualTypeMockInstallDir)')"&amp;gt;true&amp;lt;/DeployTypeMock&amp;gt;

    &amp;lt;License&amp;gt;XXX-XXX&amp;lt;/License&amp;gt;
    &amp;lt;License Condition="'$(BuildServer)' != ''"&amp;gt;YYY-YYY&amp;lt;/License&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
  &amp;lt;Import Project="$(TypeMockLocation)\TypeMock.MSBuild.Tasks"/&amp;gt;
  &amp;lt;Target Name="RegisterTypeMock"&amp;gt;
    &amp;lt;TypeMockRegister Company="MyCompany" License="$(License)" AutoDeploy="$(DeployTypeMock)"/&amp;gt; 
    &amp;lt;TypeMockStart/&amp;gt;
    &amp;lt;Exec ContinueOnError="false" Command="$(NUNIT) $(TestAssembly)" /&amp;gt;
    &amp;lt;TypeMockStop Undeploy="$(DeployTypeMock)"/&amp;gt;
  &amp;lt;/Target&amp;gt;
&amp;lt;/Project&amp;gt;&lt;/code&gt;&lt;/pre&gt;</content><category term="Development"></category><category term="Isolator"></category><category term="MSBuild"></category><category term="Testing"></category><category term="TypeMock"></category></entry><entry><title>When Fields are Initialized, or "Lies Reflector Told Me"</title><link href="https://blairconrad.com/2010/05/22/when-fields-are-initialized-or-lies-reflector-told-me/" rel="alternate"></link><published>2010-05-22T00:00:00-04:00</published><updated>2010-05-22T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-05-22:/2010/05/22/when-fields-are-initialized-or-lies-reflector-told-me/</id><summary type="html">&lt;p&gt;The other day a coworker came to me with a Tricky Language Question. He and another chap had just finished working through a bug that had arisen due to a misunderstanding of C# constructor and field initialization order. The question?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a derived class, when does field initialization occur, relative …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;The other day a coworker came to me with a Tricky Language Question. He and another chap had just finished working through a bug that had arisen due to a misunderstanding of C# constructor and field initialization order. The question?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a derived class, when does field initialization occur, relative the derived and base constructor code?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Specifically, what does this output?&lt;/p&gt;

&lt;pre&gt;&lt;code class="csharp"&gt;class Print
{
    public Print(string message)
    {
        Console.Out.WriteLine(message);
    }
}

class Base
{
    public Print baseField = new Print(&amp;quot;Base Field&amp;quot;);
    public Base()
    {
        new Print(&amp;quot;Base Constructor&amp;quot;);
    }
}

class Derived: Base
{
    public Print derivedField = new Print(&amp;quot;Derived Field&amp;quot;);
    public Derived()
    {
        new Print(&amp;quot;Derived Constructor&amp;quot;);
    }
}
class Program
{
    static void Main()
    {
        new Derived();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don't often give much thought to the "field vs. base class constructor" thing, but I knew that the Base constructor would be called before the Derived constructor, and I'd seen disassembled code in &lt;a href="http://www.red-gate.com/products/reflector/"&gt;Reflector&lt;/a&gt; that showed field initialization as if it were the first code executed in a  constructor. My guess was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base Field&lt;/li&gt;
&lt;li&gt;Base Constructor&lt;/li&gt;
&lt;li&gt;Derived Field&lt;/li&gt;
&lt;li&gt;Derived Constructor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;"Not so," said my coworker. The actual order is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Derived Field&lt;/li&gt;
&lt;li&gt;Base Field&lt;/li&gt;
&lt;li&gt;Base Constructor&lt;/li&gt;
&lt;li&gt;Derived Constructor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason for this is given in &lt;a href="http://www.ecma-international.org/publications/standards/Ecma-334.htm"&gt;C# Language Specification&lt;/a&gt; section 17.10.3, &lt;i&gt;Constructor execution&lt;/i&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Variable initializers are transformed into assignment statements, and these assignment statements are executed before the invocation of the base class instance constructor. This ordering ensures that all instance fields are initialized by their variable initializers before any statements that have access to that instance are executed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;"What's the problem here?" you may be wondering - the Base code doesn't know anything about the Derived fields, so why go out of our way to make sure the field initializers are called before the Derived constructor?&lt;/p&gt;

&lt;h2&gt;Vitual methods&lt;/h2&gt;

&lt;p&gt;Virtual methods are the problem. If a virtual method is defined in Base and overridden in Derived, the overridden method may reference the new fields added to Derived. If the virtual method is called from the Base constructor, then we need those fields to be initialized &lt;i&gt;before&lt;/i&gt; the constructor is called. Initializing fields even before calling base class constructors ensures that this is so.&lt;/p&gt;

&lt;p&gt;Or does it? What if the field I'm accessing in a overridden method in the derived class doesn't have a field initializer, that method is called from the base constructor, and the field value is set in the derived constructor? In this case, the field won't be initialized before the method is called - it will still have the default value for its type.&lt;/p&gt;

&lt;p&gt;So how to do we safely call virtual methods in constructors? We don't. You can't guarantee what code is going to go into a derived class's virtual method, so you never know what's going to happen.&lt;/p&gt;

&lt;h2&gt;Back to Reflector&lt;/h2&gt;

&lt;p&gt;Remember a few paragraphs ago when I said that Reflector told me that field initialization acted like it was an assignment statement at the beginning of a constructor? Well, I did, and I wanted to see whether I was misremembering, so I compiled my sample code and threw the assembly into Reflector. Here's what I saw:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blairconrad.com/images/derived_class_constructor.png"&gt;&lt;img src="https://blairconrad.com/images/derived_class_constructor.png" alt="Derived Class Constructor" title="Derived Class Constructor" width="248" height="75" class="size-full wp-image-440" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I felt somewhat vindicated - this matched my memory. For a lark, I took this code (and the matching code Reflector showed me for the Base class), compiled it, ran it, and got:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Base Field&lt;/li&gt;
&lt;li&gt;Base Constructor&lt;/li&gt;
&lt;li&gt;Derived Field&lt;/li&gt;
&lt;li&gt;Derived Constructor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more I thought about this, though, the worse I felt. How could Reflector let me down like this? Isn't it just looking at the IL and translating into C#? I poked around a little more, and instead of just double-clicking on the Derived constructor, I right-clicked on the Derived class node in the navigation tree and picked &lt;b&gt;Disassemble&lt;/b&gt;. Lo and behold:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blairconrad.com/images/derived_class_whole.png"&gt;&lt;img src="https://blairconrad.com/images/derived_class_whole.png" alt="Disassembled Derived Class" title="Disassembled Derived Class" width="294" height="154" class="size-full wp-image-441" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, Reflector does know what's going on&amp;mdash;you just have to ask nice. To recap,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you know which Reflector action to choose,&lt;/li&gt;
&lt;li&gt;you remember about field initializers running before even base class constructors, and&lt;/li&gt;
&lt;li&gt;you keep careful track of virtual methods called from constructors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reflector can tell you what's going on in your code. Forget any of those things, and you're lost.&lt;/p&gt;</content><category term="Development"></category><category term=".NET"></category><category term="C#"></category><category term="Development"></category><category term="Reflector"></category></entry><entry><title>Quickly make editable diagrams with yUML</title><link href="https://blairconrad.com/2010/05/01/quickly-make-editable-diagrams-with-yuml/" rel="alternate"></link><published>2010-05-01T00:00:00-04:00</published><updated>2010-05-01T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-05-01:/2010/05/01/quickly-make-editable-diagrams-with-yuml/</id><summary type="html">&lt;p&gt;I'm always on the lookout for convenient tools for creating diagrams that can be used for software development. &lt;a href="http://www.balsamiq.com/"&gt;Balsamiq&lt;/a&gt; is my tool of choice for UI mockups - it's great for whipping up stylized interfaces in very little time.&lt;/p&gt;
&lt;p&gt;Balsamiq does a great job of simplifying mockup creation, since it takes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm always on the lookout for convenient tools for creating diagrams that can be used for software development. &lt;a href="http://www.balsamiq.com/"&gt;Balsamiq&lt;/a&gt; is my tool of choice for UI mockups - it's great for whipping up stylized interfaces in very little time.&lt;/p&gt;
&lt;p&gt;Balsamiq does a great job of simplifying mockup creation, since it takes a lot of choices away from the user - you don't have the ability to change fonts or line thicknesses or colours. It really lets you focus on the aspects of the interface that matter when you're just getting started - the types and relative positions of the screen elements.&lt;/p&gt;
&lt;p&gt;Recently I discovered &lt;a href="http://yuml.me/"&gt;yUML&lt;/a&gt; - an online tool for creating class diagrams, activity diagrams, and use case diagrams. It's quite simple and produces attractive results. The best part is that you just specify the relationship between components - you don't have to position them yourself.&lt;/p&gt;
&lt;p&gt;Using an example from the site, you can create a diagram that shows that:
&lt;ul&gt;
    &lt;li&gt;a single customer aggregates several orders,each of which&lt;/li&gt;
    &lt;li&gt;uses 0 or 1 PaymentMethods, and&lt;/li&gt;
    &lt;li&gt;is composed of some number of LineItems&lt;/li&gt;
&lt;/ul&gt;
by entering this code:&lt;/p&gt;
&lt;pre&gt;
[Customer]+1-&amp;gt;*[Order]
[Order]++1-items &amp;gt;*[LineItem]
[Order]-0..1&amp;gt;[PaymentMethod]
&lt;/pre&gt;

&lt;p&gt;And out pops this diagram:&lt;/p&gt;
&lt;div class="images"&gt;
  &lt;img class="aligncenter size-full wp-image-414" title="yUML Order Example" src="https://blairconrad.com/images/yuml_order_example.png" alt="yUML Order Class Diagram" width="605" height="152" /&gt;
&lt;/div&gt;

&lt;p&gt;Over the years, I've become accustomed to using WYSIWYG tools to create written documents and images, but I often miss text-based tools. They:
&lt;ul&gt;
    &lt;li&gt;give consistent, repeatable results,&lt;/li&gt;
    &lt;li&gt;allow easy diffing between versions, and&lt;/li&gt;
    &lt;li&gt;don't encourage time-wasting as we fiddle to adjust every single pixel or line break&lt;/li&gt;
&lt;/ul&gt;
so I was really happy to find yUML - even though the syntax takes a little getting used to, it makes it easy to generate diagrams with a minimum of fuss.&lt;/p&gt;
&lt;p&gt;One wrinkle I've had using tools like Balsamiq and yUML is going back to modify diagrams after I've saved them off as a PNG. The last time I posted a Balsamiq PNG, I resorted to &lt;a href="https://blairconrad.com/2010/02/07/using-subversion-to-evangelize-powershell/#getting_started"&gt;embedding the text that represented the diagram in the post comments&lt;/a&gt;. Actually, don't bother clicking that link - I'm sure I had the source saved in the post as an HTML comment, but I don't see it there, not even in edit mode.&lt;/p&gt;
&lt;p&gt;I've unwittingly demonstrated a point I was trying to make - many of these design tools don't allow you to save the "source" of the diagram, and it could be lost. This isn't a disaster for simple diagrams like the one above, but it could be very inconvenient for larger ones. Another problem is that typing out the code, pasting it into the conversion tool (in yUML's case a web page), and converting it and saving the result can become tedious as you make many adjustments.&lt;/p&gt;
&lt;p&gt;To address some of these inconveniences, I created a tiny Python script that accepts a class diagram description, hits the yUML website to create an image from it, and saves the image to disk, embedding the diagram "source code" in the PNG's &lt;a href="http://www.w3.org/TR/PNG/#11iTXt"&gt;iTXt chunk&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import urllib
import urllib2

import png

def add_yuml_to_png(yuml, in_stream, out_stream):
    signature = png.read_signature(in_stream)
    out_stream.write(signature)

    for chunk in png.all_chunks(in_stream):
        if chunk.chunk_type == 'IEND':
            break
        chunk.write(out_stream)

    itxt_chunk = png.iTXtChunk.create('yuml', yuml)
    itxt_chunk.write(out_stream)

    # write the IEND chunk
    chunk.write(out_stream)

def create(yuml, output_filename):
    baseUrl = 'http://yuml.me/diagram/scruffy/class/'
    url = baseUrl + urllib.quote(yuml)

    original_png = urllib2.urlopen(url)
    output_file = file(output_filename, 'wb')

    add_yuml_to_png(yuml, original_png, output_file)

    output_file.close()

if __name__ == '__main__':
    import sys
    sys.exit(create(*sys.argv[1:3]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;png&lt;/code&gt; module is a very rudimentary PNG handling module that I wrote just for this script. There are ready-made Python PNG modules out there, but I thought they'd be too heavy to pull in for this, and that it'd be fun to write the PNG-handling code. It was.&lt;/p&gt;
&lt;p&gt;Later on, when you want to adjust the diagram, we can the following command on the PNG:&lt;/p&gt;
&lt;pre&gt;
read_yuml_from_png.py yuml_order_example.png
[Customer]+1-&amp;gt;*[Order], [Order]++1-items&amp;gt;*[LineItem], [Order]-0..1&amp;gt;[PaymentMethod]
&lt;/pre&gt;

&lt;p&gt;And here's read_yuml_from_png.py:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import png

def read(pngFilename):
    yuml = '&amp;lt;&amp;lt;no yuml found&amp;gt;&amp;gt;'
    pngFile = file(pngFilename, 'rb')
    png.read_signature(pngFile)
    for chunk in png.all_chunks(pngFile):
        if chunk.chunk_type == 'iTXt':
            chunk = png.iTXtChunk(chunk)
            if chunk.keyword == 'yuml':
                yuml = chunk.text
                break
    pngFile.close()
    return yuml

if __name__ == '__main__':
    import sys
    sys.exit(read(sys.argv[1]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and out pops the original class diagram description.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;png&lt;/strong&gt; module is kind of long to paste here, but you can get all of the source for this post from &lt;a href="http://code.google.com/p/blairconrad/source/browse/#svn/trunk/BlogExamples/2010-05-yuml-embed-text%3Fstate%3Dclosed"&gt;my Google code project&lt;/a&gt; (&lt;a href="https://blairconrad.googlecode.com/svn/trunk/BlogExamples/2010-05-yuml-embed-text"&gt;direct link to source&lt;/a&gt;).&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="PNG"></category><category term="yUML"></category></entry><entry><title>Watch, even if you're not building an MVVM App</title><link href="https://blairconrad.com/2010/04/02/watch-even-if-youre-not-building-an-mvvm-app/" rel="alternate"></link><published>2010-04-02T00:00:00-04:00</published><updated>2010-04-02T00:00:00-04:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-04-02:/2010/04/02/watch-even-if-youre-not-building-an-mvvm-app/</id><summary type="html">&lt;p&gt;I'm about two weeks behind the wave, but this week I found the time to watch Rob Eisenberg's Mix 10 &lt;a href="http://live.visitmix.com/MIX10/Sessions/EX15"&gt;Build your own MVVM Framework talk&lt;/a&gt; (who says having the flu is all bad?).&lt;/p&gt;
&lt;p&gt;It's well worth the hour and twenty minutes. If you haven't yet, grab a tea, fire …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm about two weeks behind the wave, but this week I found the time to watch Rob Eisenberg's Mix 10 &lt;a href="http://live.visitmix.com/MIX10/Sessions/EX15"&gt;Build your own MVVM Framework talk&lt;/a&gt; (who says having the flu is all bad?).&lt;/p&gt;
&lt;p&gt;It's well worth the hour and twenty minutes. If you haven't yet, grab a tea, fire up the video, and sit back. Seriously, I can't describe how much I enjoyed it. My impressions, in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The warning about needing MVVM experience may be overstated - I've never worked with MVVM (or GUIs, really), and only had it described to me by The Guy in the Next Cubicle, and I felt like I followed along well enough. If you know what the &lt;a href="http://en.wikipedia.org/wiki/Model_View_ViewModel"&gt;M, the V, and the VM&lt;/a&gt; are, that may be all you need.&lt;/li&gt;
&lt;li&gt;Having computers perform repetitive tasks for humans is cool - we should try more of that.&lt;/li&gt;
&lt;li&gt;Even if you don't care about MVVM or GUI programming, the section about using .NET IEnumerables to implement &lt;a href="http://en.wikipedia.org/wiki/Coroutine"&gt;Coroutines&lt;/a&gt; (starting at around minute 48) is worth the price of admission - this looks like an extremely powerful technique to (among other things) remove some of the complexity of performing aynchronous calls. I'm going to keep an eye out for places that this could help me.&lt;/li&gt;
&lt;li&gt;I really liked the message that Mr. Eisenberg kept hitting - the mini-framework is (just?) a way of crystalizing existing conventions and making them work for you. This is a very powerful point - presumably you have conventions that you and your coworkers follow, so why not try to get more out of them? Perhaps incongruously, this reminds me a little of the strongest argument in favour of using whitespace for flow control in Python - in many languages (say C), we use braces to tell the compiler where a block begins and ends, and whitespace to tell the humans - why not use one mechanism for both? The mini framework does a similar thing - when we name classes SearchView and SearchViewModel, we do it so the programmers know how the classes are related, so why require an additional statement or constructor parameter or whatever to link them up? If the framework understands the convention, it can do the work for you.&lt;/li&gt;
&lt;li&gt;The live presentation certainly helped to understand things - it was much easier for me to follow this than to try to understand &lt;a href="http://ayende.com/Blog/archive/2009/12/20/effectus-fatten-your-infrastructure.aspx"&gt;Effectus&lt;/a&gt; from text and source, not to denigrate Ayende Rahien's efforts.&lt;/li&gt;
&lt;li&gt;Another point I enjoyed - the framework is there to make 90% of the cases easier. If it turns out that something needs to be a little different because it's no performing well enough or something, you can do that too.&lt;/li&gt;
&lt;li&gt;Somewhat tied to the previous point, but I can't remember if it was mentioned - having a framework implement your conventions not only saves you work, but it can strengthen your conventions. If the easiest thing to do to get something to work is to follow a set of conventions, then people will follow the conventions - in addition to everything else, the framework can serve as a reminder to experienced developers and a teaching aid to the tyros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing I'd like to see sometime, and this would likely be better-suited to a short book or long paper, would be the evolution of an application from frameworkless to frameworkful. Mr. Eisenberg kept stressing how the framework grew out of existing conventions in the Game Library application. I'd really like to see a case study - at what point is a convention recognized and the decision made to formalize it? Did everything happen at once, at the beginning ("we'll call our classes BlahView and BlahViewModel, so we'll need a ViewModelToViewHookerUpper"), or as development progressed ("this is the fifth button I've created that's called Save and calls the Save method on the ViewModel - why can't the computer know that's what I want?")?&lt;/p&gt;
&lt;p&gt;Anyhow, don't just listen to me. Watch for yourself.&lt;/p&gt;
&lt;p&gt;Now I'm off to resist poring over the Day Job source code so see how we can fatten up our framework layer...&lt;/p&gt;</content><category term="Development"></category><category term="Coroutines"></category><category term="Development"></category><category term="Frameworks"></category><category term="MVVM"></category></entry><entry><title>IE binds to id attributes, or “How I learned to love var”</title><link href="https://blairconrad.com/2010/03/07/ie-binds-to-id-attributes-or-how-i-learned-to-love-var/" rel="alternate"></link><published>2010-03-07T00:00:00-05:00</published><updated>2010-03-07T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-03-07:/2010/03/07/ie-binds-to-id-attributes-or-how-i-learned-to-love-var/</id><summary type="html">&lt;p&gt;I recently converted the &lt;a href="http://code.google.com/p/libraryhippo/"&gt;LibraryHippo&lt;/a&gt; “Family Status” page to use AJAX to fetch individual card statuses, instead of having the server aggregate all the statuses and send the complete summary back to the user. It was fairly straightforward, with one notable exception – Internet Explorer. &lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://blairconrad.com/images/working_ajax.png"&gt;&lt;img title="AJAX LibraryHippo" height="191" width="244" alt="AJAX LibraryHippo" src="https://blairconrad.com/images/working_ajax_thumb.png" align="right" border="0" /&gt;&lt;/a&gt;When using Firefox or Chrome, as …&lt;/p&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently converted the &lt;a href="http://code.google.com/p/libraryhippo/"&gt;LibraryHippo&lt;/a&gt; “Family Status” page to use AJAX to fetch individual card statuses, instead of having the server aggregate all the statuses and send the complete summary back to the user. It was fairly straightforward, with one notable exception – Internet Explorer. &lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;a href="https://blairconrad.com/images/working_ajax.png"&gt;&lt;img title="AJAX LibraryHippo" height="191" width="244" alt="AJAX LibraryHippo" src="https://blairconrad.com/images/working_ajax_thumb.png" align="right" border="0" /&gt;&lt;/a&gt;When using Firefox or Chrome, as soon as the page loaded, the user would see a list of cards that LibraryHippo was checking, complete with &lt;a href="http://en.wikipedia.org/wiki/Throbber"&gt;throbbers&lt;/a&gt;. As results came in, the matching progress line would disappear and other tables would fill in, holding the results – books that have to go back, holds ready for pickup, etc. I don't mind admitting that I was a little proud of my first foray into AJAXy web programming.&lt;/p&gt; 
&lt;p&gt;The morning after I finished the update, a co-worker signed up. Unlike everyone else I knew, she used Internet Explorer. She hit the summary page and everything stalled. The progress list was populated, the throbbers were throbbing, and… that’s it. They just kept going. Oh, and a little indicator woke up in the status bar, saying that there was an error on the page: “&lt;strong&gt;Object doesn’t support this property or method&lt;/strong&gt;”. The reported line numbers didn’t match my source file, but via judicious application of &lt;code&gt;alerts()&lt;/code&gt;s, I was able to isolate the problem to a callback that’s executed on a successful card check to update a span that holds a row count:&lt;/p&gt;
&lt;pre&gt;&lt;code class="javascript"&gt;function refresh_table_count(table_selector)
{&lt;br&gt;
    count = $(table_selector + ' tbody tr').length;
    $(table_selector + ' thead #count').html(count);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;That seemed pretty innocuous, and not dissimilar from code that I had elsewhere in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; block. Quick web searches revealed nothing, so I resorted to cutting and renaming bits until I could see what was going on. I was down to an HTML body with a single table definition, and the function above. The error persisted. Suspicious, I renamed the &lt;code&gt;count&lt;/code&gt; variable to &lt;code&gt;c&lt;/code&gt;, and the problem disappeared.&lt;/p&gt;

&lt;p&gt;At this point, I was convinced that IE’s Javascript interpreter reserved the &lt;code&gt;count&lt;/code&gt; keyword for itself. I made this claim to a friend, who was skeptical. Eager to show him, I whipped up a quick example, and… it worked. There were no problems with the word &lt;code&gt;count&lt;/code&gt;. I was stymied again, but not for long: my sample HTML file didn’t include an element with a &amp;quot;count&amp;quot; id. Once I added the count id, the sample broke.&lt;/p&gt;

&lt;p&gt;It turns out that &lt;a title="Rick Strahl - Internet Explorer Global Variable Blow ups" href="http://www.west-wind.com/weblog/posts/677442.aspx"&gt;IE is actually creating a global object that matches the item’s ID!&lt;/a&gt; As Rick Strahl explains, the problem is a little worse than that, because the assignment on line 3 above should’ve overwritten the variable reference, but there’s “some whacky scoping going on”. &lt;/p&gt;

&lt;p&gt;Workarounds:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;do away with the temporary variable (possible in this case) &lt;/li&gt;

  &lt;li&gt;rename the temporary variable (always possible, but lame) &lt;/li&gt;

  &lt;li&gt;use more specific &lt;code&gt;id&lt;/code&gt; attribute values (probably a good idea in any case) &lt;/li&gt;

  &lt;li&gt;&lt;a href="http://www.w3schools.com/js/js_variables.asp"&gt;use the &lt;code&gt;var&lt;/code&gt; statement to declare all variables&lt;/a&gt; – this is safest and probably the easiest to remember:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;function refresh_table_count(table_selector)
{
    var count = $(table_selector + ' tbody tr').length;
    $(table_selector + ' thead #count').html(count);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now everything is working on the new page, and I've every confidence that &lt;code&gt;var&lt;/code&gt; will help keep it so.</content><category term="Development"></category><category term="Ajax"></category><category term="Development"></category><category term="IE"></category><category term="JavaScript"></category><category term="LibraryHippo"></category></entry><entry><title>Automated Testing using App Engine Service APIs (and a Memcaching Memoizer)</title><link href="https://blairconrad.com/2010/02/20/automated-testing-using-app-engine-service-apis-and-a-memcaching-memoizer/" rel="alternate"></link><published>2010-02-20T00:00:00-05:00</published><updated>2010-02-20T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-02-20:/2010/02/20/automated-testing-using-app-engine-service-apis-and-a-memcaching-memoizer/</id><summary type="html">&lt;p&gt;I'm a fan of Test-driven development, and automated testing in general. As such, I’ve been trying ensure that the &lt;a href="http://code.google.com/p/libraryhippo/"&gt;LibraryHippo&lt;/a&gt; code has an adequate set of automated tests before deploying new versions.&lt;/p&gt;
&lt;h2&gt;Importing Google App Engine Modules&lt;/h2&gt;

&lt;p&gt;Unfortunately, testing code that relies on the &lt;a title="Google App Engine" href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; SDK is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a fan of Test-driven development, and automated testing in general. As such, I’ve been trying ensure that the &lt;a href="http://code.google.com/p/libraryhippo/"&gt;LibraryHippo&lt;/a&gt; code has an adequate set of automated tests before deploying new versions.&lt;/p&gt;
&lt;h2&gt;Importing Google App Engine Modules&lt;/h2&gt;

&lt;p&gt;Unfortunately, testing code that relies on the &lt;a title="Google App Engine" href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; SDK is a little tricky, as I found when working with one of the LibraryHippo entities. There’s an entity called a Card, which extends &lt;code&gt;db.Model&lt;/code&gt; and represents a user's library card.&lt;/p&gt;
&lt;p&gt;The Card definition is not entirely unlike this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;class Card(db.Model):
    family = db.ReferenceProperty(Family)
    number = db.StringProperty()
    name = db.StringProperty()
    pin = db.StringProperty()
    library = db.ReferenceProperty(Library)

    def pin_is_valid(self):
        return self.pin != ''
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, testing this class isn't as straightforward as one would hope. Suppose I have this test file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;from card import Card

def test_card_blank_pin_is_invalid():
    c = Card()
    c.pin = ''
    assert not c.pin_is_valid()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It fails miserably, spewing out a string of import errors. Here's the tidied-up stack: &lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;&gt;  from card import Card
&gt;  from google.appengine.ext import db
&gt;  from google.appengine.api import datastore
&gt;  from google.appengine.datastore import datastore_index
&gt;  from google.appengine.api import validation
&gt;  import yaml
E ImportError: No module named yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not so good. Fortunately, it’s not that hard to find out what needs to be done in order to make the imports work:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import sys
import dev_appserver
sys.path = dev_appserver.EXTRA_PATHS + sys.path

from card import Card

def test_card_blank_pin_is_invalid():
    c = Card()
    c.pin = ''
    assert not c.pin_is_valid()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now Python can find all the imports it needs. For a while this was good enough, since I wasn’t testing any code that hit the datastore or actually used any of the app Engine Service APIs.&lt;/p&gt;
&lt;h2&gt;Running the App Engine Service APIs&lt;/h2&gt;

&lt;p&gt;However, I recently found a need to use &lt;a href="http://code.google.com/appengine/docs/python/memcache/"&gt;Memcache&lt;/a&gt; to store partially-calculated results and decided (like everyone else) to write a memoizing decorator to do the job. There’s enough logic in my memoizer that I felt it needed an automated test. I tried this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import sys
import dev_appserver
sys.path = dev_appserver.EXTRA_PATHS + sys.path

from google.appengine.api import memcache
from gael.memcache import *

def test_memoize_formats_string_key_using_kwargs():
    values = [1, 2]
    @memoize('hippo %(animal)s zebra', 100)
    def pop_it(animal):
        return values.pop()

    result = pop_it(animal='rabbit')
    assert 2 == result

    cached_value = memcache.get('hippo rabbit zebra')
    assert 2 == cached_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(&lt;code&gt;gael&lt;/code&gt; is Google App Engine Library – my extension/utility package - as it grows and I gain experience, I may spin it out of LibraryHippo to be its own project.) Again, it failed miserably. Here’s a cleaned-up version of the failure:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;&gt;  result = pop_it(animal='rabbit')
&gt;  cached_result = google.appengine.api.memcache.get(key_value)
&gt;  self._make_sync_call('memcache', 'Get', request, response)
&gt;  return apiproxy.MakeSyncCall(service, call, request, response)
&gt;  assert stub, 'No api proxy found for service "%s"' % service
E AssertionError: No api proxy found for service "memcache";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was puzzling. All the imports were in place, so why the failure? This time the answer was a little harder to find, but tenacious searching paid off, and I stumbled on a Google Group post&amp;#160; called &lt;a href="http://groups.google.com/group/google-appengine-python/browse_thread/thread/435b20de9b1e5cc4?fwc=1&amp;pli=1"&gt;Unit tests / google apis without running the dev app server&lt;/a&gt;. The author had actually done the work to figure out what initialization code had to be run in order to get have the Service APIs work. The solution relied on hard-coded paths to the App Engine imports, but it was obvious how to combine it with the path manipulation I used earlier to produce this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import sys

from dev_appserver import EXTRA_PATHS
sys.path = EXTRA_PATHS + sys.path 

from google.appengine.tools import dev_appserver
from google.appengine.tools.dev_appserver_main import ParseArguments
args, option_dict = ParseArguments(sys.argv) # Otherwise the option_dict isn't populated.
dev_appserver.SetupStubs('local', **option_dict)

from google.appengine.api import memcache
from gael.memcache import *

def test_memoize_formats_string_key_using_kwargs():
    values = [1, 2]
    @memoize('hippo %(animal)s zebra', 100)
    def pop_it(animal):
        return values.pop()

    result = pop_it(animal='rabbit')
    assert 2 == result

    cached_value = memcache.get('hippo rabbit zebra')
    assert 2 == cached_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s an awful lot of boilerplate here, so I tried to clean up the module, moving the App Engine setup into a new module in gael:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import sys

def add_appsever_import_paths():
    from dev_appserver import EXTRA_PATHS
    sys.path = EXTRA_PATHS + sys.path 

def initialize_service_apis():
    from google.appengine.tools import dev_appserver

    from google.appengine.tools.dev_appserver_main import ParseArguments
    args, option_dict = ParseArguments(sys.argv) # Otherwise the option_dict isn't populated.
    dev_appserver.SetupStubs('local', **option_dict)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the top of the test file becomes&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;import gael.testing
gael.testing.add_appsever_import_paths()
gael.testing.initialize_service_apis()

from google.appengine.api import memcache
from gael.memcache import *

def test_memoize_formats_string_key_using_kwargs():
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The Decorator&lt;/h2&gt;

&lt;p&gt;In case anyone’s curious, here’s the &lt;strong&gt;memoize&lt;/strong&gt; decorator I was testing. I needed something flexible, so it takes a &lt;strong&gt;key&lt;/strong&gt; argument that can either be a format string or a callable. I’ve never cared for positional format arguments – not in Python, C#, Java, nor C/C++ – so both the format string and the callable use the &lt;strong&gt;**kwargs &lt;/strong&gt;to construct the key. I’d prefer to use &lt;a href="http://docs.python.org/library/stdtypes.html#str.format"&gt;str.format&lt;/a&gt; instead of the &lt;code&gt;%&lt;/code&gt; operator, but not until App Engine moves to Python 2.6+&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;def memoize(key, seconds_to_keep=600):
    def decorator(func):
        def wrapper(*args, **kwargs):
            if callable(key):
                key_value = key(args, kwargs)
            else:
                key_value = key % kwargs

            cached_result = google.appengine.api.memcache.get(key_value)
            if cached_result is not None:
                logging.debug('found ' + key_value)
                return cached_result
            logging.info('calling func to get '  + key_value)
            result = func(*args, **kwargs)
            google.appengine.api.memcache.set(key_value, result, seconds_to_keep)
            return result
        return wrapper
    return decorator
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Faking out Memcache - Unit Testing the Decorator&lt;/h2&gt;

&lt;p&gt;The astute among you are probably thinking that I could’ve saved myself a lot of trouble if I’d just faked out memcache and unit tested the decorator instead of trying to hook everything up for an integration test. That’s true, but at first I couldn’t figure out how to do that cleanly, and it was my first foray into memcache, so I didn’t mind working with the service directly.&lt;/p&gt;
&lt;p&gt;Still, the unit testing approach would be better, so I looked at my decorator and rebuilt it to use a class rather than a function. It’s my first time doing this, and it’ll probably not be the last – I really like the separation between initialization and execution that the &lt;code&gt;__init__&lt;/code&gt;/&lt;code&gt;__call__&lt;/code&gt; methods give me; I think it makes things a lot easier to read.&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;def memoize(key, seconds_to_keep=600):
    class memoize():
        def __init__(self, func):
            self.key = key
            self.seconds_to_keep=600
            self.func = func
            self.cache=google.appengine.api.memcache

        def __call__(self, *args, **kwargs):
            if callable(self.key):
                key_value = self.key(args, kwargs)
            else:
                key_value = self.key % kwargs

            cached_result = self.cache.get(key_value)
            if cached_result is not None:
                logging.debug('found ' + key_value)
                return cached_result
            logging.info('calling func to get '  + key_value)
            result = self.func(*args, **kwargs)

            self.cache.set(key_value, result, self.seconds_to_keep)
            return result

    return memoize
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the test can inject its own caching mechanism to override &lt;code&gt;self.cache&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;class MyCache:
    def __init__(self):
        self.cache = {}

    def get(self, key):
        return self.cache.get(key, None)

    def set(self, key, value, *args):
        self.cache[key] = value

def test_memoize_formats_string_key_using_kwargs():
    values = [1, 2]
    @memoize('hippo %(animal)s zebra', 100)
    def pop_it(animal):
        return values.pop()

    cache = MyCache()
    pop_it.cache = cache
    result = pop_it(animal='rabbit')
    assert 2 == result

    cached_value = cache.get('hippo rabbit zebra')
    assert 2 == cached_value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it. Now I have a unit-tested implementation of my memoizer and two new helpers in my extension library.&lt;/p&gt;</content><category term="Development"></category><category term="AppEngine"></category><category term="Decorators"></category><category term="Gael"></category><category term="LibraryHippo"></category><category term="Memcache"></category><category term="Python"></category><category term="Testing"></category></entry><entry><title>A first look at Appstats - where's my time spent?</title><link href="https://blairconrad.com/2010/02/12/a-first-look-at-appstats-wheres-my-time-spent/" rel="alternate"></link><published>2010-02-12T00:00:00-05:00</published><updated>2010-02-12T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-02-12:/2010/02/12/a-first-look-at-appstats-wheres-my-time-spent/</id><summary type="html">&lt;p&gt;After hearing about the release of Google's App Engine SDK 1.3.1, I rushed out to try the new &lt;a href="http://code.google.com/appengine/docs/python/tools/appstats.html"&gt;Appstats Event Recorder&lt;/a&gt; to help profile LibraryHippo. I didn't expect great things, as I'm generally happy with the performance, with one notable exception, but I was curious about the tool …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After hearing about the release of Google's App Engine SDK 1.3.1, I rushed out to try the new &lt;a href="http://code.google.com/appengine/docs/python/tools/appstats.html"&gt;Appstats Event Recorder&lt;/a&gt; to help profile LibraryHippo. I didn't expect great things, as I'm generally happy with the performance, with one notable exception, but I was curious about the tool.&lt;/p&gt;
&lt;p&gt;App Engine Fan has posted &lt;a href="http://blog.appenginefan.com/2010/02/art-of-unobtrusive-tools.html"&gt;a great introduction&lt;/a&gt; of  some of the features that make Appstats a useful and powerful tool - it's very easy to hook up, and seems to add very little overhead. In addition, it has very rich configuration options - one can omit classes of calls, fold calls together, select the amount of information retained about each call, and specify how many such records are retained (in what amounts to a circular buffer).&lt;/p&gt;
&lt;p&gt;I didn't use (or need) any particularly advanced configuration, so I just &lt;a href="http://code.google.com/p/libraryhippo/issues/detail?id=47"&gt;installed the Event Recorder&lt;/a&gt; and let it go.&lt;/p&gt;
&lt;p&gt;Here's what I saw:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blairconrad.com/images/no_rwl.png" alt="Appstats result for checking one family with just Waterloo and Kitchener accounts" title="checking one family, Waterloo and Kitchener libraries" width="746" height="425" class="size-full wp-image-322" /&gt;&lt;/p&gt;
&lt;p&gt;I don't have an in-depth analysis, but here are some impressions: 
&lt;ul&gt;
&lt;li&gt;it's pretty&lt;/li&gt;
&lt;li&gt;the information is presented very well - with only minimal reading, I can see that LibraryHippo made a handful of datastore queries, as well as a series of urlfetch.Fetch calls for each library card it checked&lt;/li&gt;
&lt;li&gt;I can get a quick view of what's taking what proportion of the time - for example, the fetches easily dominate&lt;/li&gt;
&lt;li&gt;total time (about 2.3 seconds) is easy to find, as well as the amount taken by the underlying API - 73 milliseconds&lt;/li&gt;
&lt;li&gt;there's something else that's going on - 1056 ms for cpu + api - nearly half the elapsed time. I'm not sure what that means exactly&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;So far, no big surprises - I knew that most of the time was taken up by queries to the library web pages, but it's very cool to see it this way, and to see how much time is taken up going to the Datastore (not much). There's room for improvement, but 2.3 seconds is more than acceptable for this family - one of LibraryHippo's heaviest users.&lt;/p&gt;
&lt;p&gt;Two things did stand out, though. First, in the first group of urlfetch.Fetches, &lt;strong&gt;there are gaps&lt;/strong&gt; between the fourth, fifth, and sixth calls (the ones that take 128 ms, 91ms, and 52ms) and the pattern repeats (with smaller gaps) in the second batches. This is where the retrieved records are processed and transformed into a normalized representation before rendering. The total time taken is a small, but I didn't expect to see &lt;i&gt;anything&lt;/i&gt;. &lt;/p&gt;
&lt;p&gt;Second, there's a datastore_v3.Get call before each card is checked. This is &lt;strong&gt;not an explicit call&lt;/strong&gt; that LibraryHippo makes, so I clicked on the line in the graph and got a detailed view of what was going on:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blairconrad.com/images/implicit_get.png" alt="Detail of implicit datastore_v3.get call" title="Detail of implicit get" width="751" height="407" class="size-full wp-image-328" /&gt;&lt;/p&gt;
&lt;p&gt;It looks like the call is coming from the &lt;code&gt;create&lt;/code&gt; method on line 8 of the all_libraries.py file. Curious, I click on that line and lo and behold, &lt;strong&gt;I get a view of the source&lt;/strong&gt;. This is very cool.&lt;/p&gt;
&lt;pre&gt;
&lt;span id="n1"&gt;   1: #!/usr/bin/env python
&lt;/span&gt;&lt;span id="n2"&gt;   2: 
&lt;/span&gt;&lt;span id="n3"&gt;   3: import sys
&lt;/span&gt;&lt;span id="n4"&gt;   4: 
&lt;/span&gt;&lt;span id="n5"&gt;   5: modules = {}
&lt;/span&gt;&lt;span id="n6"&gt;   6: 
&lt;/span&gt;&lt;span id="n7"&gt;   7: def create(card, fetcher):
&lt;/span&gt;&lt;span id="n8" style="background-color:yellow;"&gt;   8:     id = card.library.type
&lt;/span&gt;&lt;span id="n9"&gt;   9:     if not modules.has_key(id):
&lt;/span&gt;&lt;span id="n10"&gt;  10:         modules[id] = __import__(id)
&lt;/span&gt;&lt;span id="n11"&gt;  11:     return modules[id].LibraryAccount(card, fetcher)
&lt;/span&gt;&lt;span id="n12"&gt;  12: 
&lt;/span&gt;&lt;span id="n13"&gt;  13: def main(args=None):
&lt;/span&gt;&lt;span id="n14"&gt;  14:     if args == None:
&lt;/span&gt;&lt;span id="n15"&gt;  15:         args = sys.argv[1:]
&lt;/span&gt;&lt;span id="n16"&gt;  16:     return 0&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;Correlating the detail view and the source code, we see that &lt;code&gt;create&lt;/code&gt; is handed a card parameter that has an as-yet-unresolved &lt;code&gt;library&lt;/code&gt; instance. Accessing the library attribute on the card must complete what was a lazy load initiated when I loaded the Family entity - the cards come from the Family.card_set member.&lt;/p&gt;
&lt;p&gt;Ordinarily, I might start investigating the gaps and the implicit gets, but I know there's a much greater threat to LibraryHippo usability, which I confirm by checking out the record for another family's notification:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blairconrad.com/images/with_rwl.png" alt="Appstats results of checking one family, with a Region of Waterloo Account" title="checking one family, with a Region of Waterloo Account" width="757" height="665" class="size-full wp-image-321" /&gt;&lt;/p&gt;
&lt;p&gt;Here's where the presentation really packs a wallop - there's clearly a qualitative difference here. And what a difference - instead of 2.5 seconds on the horizontal axis, it's 25 seconds, and most of the fetches are compressed to nigh-invisibility.&lt;/p&gt;
&lt;p&gt;There are two differences between this family's accounts and the first family's: they have an extra Kitchener Library card that the first family didn't, and they have a Region of Waterloo Library card. It's the RWL card that makes the difference: you can see it being checked in the last batch of urlfetch.Fetches. 
The 4 Waterloo and Kitchener library card checks are completely done after 3154ms, but the Region of Waterloo checking goes on for a further 21 seconds - for one library, and it's not an aberration - the library web site is &lt;i&gt;slow&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;This post is already long enough, so I'll use an upcoming one to talk about what this slowness means for LibraryHippo and how I've tried to keep it from destroying the user experience.&lt;/p&gt;</content><category term="Development"></category><category term="AppEngine"></category><category term="Appstats"></category><category term="Development"></category><category term="LibraryHippo"></category><category term="Python"></category></entry><entry><title>Waiting pays off again - Google App Engine gets Datastore retries</title><link href="https://blairconrad.com/2010/02/10/waiting-pays-off-again-google-app-engine-gets-datastore-retries/" rel="alternate"></link><published>2010-02-10T00:00:00-05:00</published><updated>2010-02-10T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-02-10:/2010/02/10/waiting-pays-off-again-google-app-engine-gets-datastore-retries/</id><summary type="html">&lt;p&gt;Sometimes when we wait a little, the universe provides for us. Last year, I was holding off taking LibraryHippo live because it's almost useless without daily notifications. At the time, Google App Engine had no scheduled tasks. I'd just resigned myself to soliciting users and setting up a cron job …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes when we wait a little, the universe provides for us. Last year, I was holding off taking LibraryHippo live because it's almost useless without daily notifications. At the time, Google App Engine had no scheduled tasks. I'd just resigned myself to soliciting users and setting up a cron job on one of my own computers to trigger the notifications, or use some other kind of hackery. Right after I made this decision, the Google App Engine team announced that Scheduled Tasks were available. Well, it's happened again.&lt;/p&gt;

&lt;p&gt;I really enjoy working on the Google App Engine framework, but one of the more frustrating aspects (lately) has been the timeouts I get when reading from the Datastore. I've recently taken some steps that will reduce the impact on users, but was on the verge of implementing an automatic Datastore retry mechanism.
Fortunately, it looks like I may not have to, with the &lt;a href="http://googleappengine.blogspot.com/2010/02/app-engine-sdk-131-including-major.html"&gt;arrival of App Engine SDK 1.3.1&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"App Engine now automatically retries all datastore calls (with the exception of transaction commits) when your applications encounters a datastore error caused by being unable to reach Bigtable. Datastore retries automatically builds in what many of you have been doing in your code already, and our tests have shown it drastically reduces the number of errors your application experiences (by up to 3-4x error reduction for puts, 10-30x for gets)."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are other Datastore improvements, including Datastore Query Cursors, and unlimited result set size for queries (previously the maximum was 1000). Also &lt;a href="http://code.google.com/appengine/docs/python/tools/appstats.html"&gt;instrumentation&lt;/a&gt; for the Python version of the SDK, and unit tests for Java.&lt;/p&gt;
&lt;p&gt;I'm keen to try out the Python instrumentation, but I'm pretty sure I already know where my bottleneck is...&lt;/p&gt;</content><category term="Development"></category><category term="AppEngine"></category><category term="Development"></category></entry><entry><title>Using Subversion to Evangelize PowerShell</title><link href="https://blairconrad.com/2010/02/07/using-subversion-to-evangelize-powershell/" rel="alternate"></link><published>2010-02-07T00:00:00-05:00</published><updated>2010-02-07T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-02-07:/2010/02/07/using-subversion-to-evangelize-powershell/</id><summary type="html">&lt;p&gt;I've never been really comfortable with the Windows Command prompt - whenever I can, I grab &lt;a href="http://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; to give myself a more familiar (and powerful) command-line environment. I really appreciate the tools included with the Unix command shells, as well as the easy composability of the utilities that come with Unix …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've never been really comfortable with the Windows Command prompt - whenever I can, I grab &lt;a href="http://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; to give myself a more familiar (and powerful) command-line environment. I really appreciate the tools included with the Unix command shells, as well as the easy composability of the utilities that come with Unix.&lt;/p&gt;
&lt;p&gt;Unsurprisingly, I was immediately attracted to &lt;a href="http://blogs.msdn.com/powershell/default.aspx"&gt;PowerShell&lt;/a&gt; - a powerful replacement shell for Windows, with .NET integration, a Unix-like pipeline that works on objects rather than strings, and has plenty of built-in cmdlets. I installed it and tried to work. There were familiar commands (many of the Unix and Windows command names are aliased to their PowerShell equivalents), and these both helped and hindered - it was easy to find a command, but the options were slightly off, so the commands my fingers knew produced errors or unexpected results. Eventually I fell off the wagon, reverting to cmd.exe. Over the next year or so, I would return to PowerShell, only to stop using it again.&lt;/p&gt;
&lt;p&gt;A few months ago, I was talking to the Guy in the Next Cubicle. He was also interested in PowerShell. We talked a little about the few scripts (neither of us had written new cmdlets) we'd made, and shared them. Having someone to talk to about PowerShell sparked something, and gave me the impetus to change my shortcuts to start PowerShell instead of cmd.exe. Unfortunately, sharing our scripts was awkward - usually via e-mail or instant messaging. In addition, as we improved our scripts, adding some to perform common tasks, we found the answers to some questions when people came for help was, "Well, if you had this PowerShell script, you'd just...", with no convenient way to get them the scripts.&lt;/p&gt;
&lt;p&gt;Finally we decided to do something about it, and initiated a plan to help share our setup among our coworkers. We wanted a system that:
&lt;ul&gt;
        &lt;li&gt;was easy to adopt,&lt;/li&gt;
    &lt;li&gt;made it easy to get and share scripts, and&lt;/li&gt;
    &lt;li&gt;was customizable - so people could have different prompts, for example&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Inspired by &lt;a href="http://kitenet.net/~joey/svnhome/"&gt;Joey Hess's &lt;i&gt;keeping your life in svn&lt;/i&gt;&lt;/a&gt;, we tried putting the whole profile directory under Subversion control. It was an easy choice, since everyone at the Day Job is already using Subversion to wrangle our source code.&lt;/p&gt;
&lt;h4 id="getting_started"&gt;Getting Started&lt;/h4&gt;

&lt;p&gt;Getting started with the profile is almost as easy as running
&lt;pre&gt;&lt;code class="bat"&gt;cd %USERPROFILE%\My Documents
svn checkout http://svn.dayjob.com/path/to/PowerShellProfile/trunk WindowsPowerShell
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;After this, the user will have a directory inside their My Documents directory that looks something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://blairconrad.com/images/powershellprofile2.png" alt="profile directory skeleton" title="PowerShellProfile" width="268" height="408" class="size-full wp-image-225" /&gt;&lt;/p&gt;
&lt;p&gt;It's not quite usable, though. By default PowerShell doesn't allow scripts to be run, so the new profile will be of no benefit to users. To ease their pain, the profile directory contains a &lt;b&gt;setup_powershell.bat&lt;/b&gt; which runs 
&lt;pre&gt;&lt;code class="bat"&gt;powershell -Command "Set-ExecutionPolicy RemoteSigned"
&lt;/code&gt;&lt;/pre&gt;
After running setup_powershell.bat, all a user has to do is start PowerShell and they will benefit from the new profile.&lt;/p&gt;
&lt;h4 id="windowspowershell"&gt;Inside the WindowsPowerShell Directory&lt;/h4&gt;

&lt;p&gt;The first item of note inside the WindowsPowerShellDirectory is the &lt;b&gt;Includes&lt;/b&gt; directory, which is populated with &lt;code&gt;.ps1&lt;/code&gt; files. Each &lt;code&gt;.ps1&lt;/code&gt; file contains functions to be loaded into memory and made available for the user's session. 
At startup, each of these .ps1 files are each dot-sourced (using the &lt;a href="https://blairconrad.com/2010/01/29/expand-your-scope-you-can-dot-source-more-than-just-files/"&gt;dot-source from a function trick I talked about last time&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Next, the &lt;b&gt;Scripts&lt;/b&gt; directory, which is added to the user's &lt;b&gt;$env:PATH&lt;/b&gt;. Each of the .ps1 files in the directory contains a standalone script that a user might choose to execute as they work. We have a number of Day&amp;nbsp;Job-specific scripts as well as some Subversion helpers and two meta-scripts, designed to make it easier to work with the PowerShell profile.&lt;/p&gt;
&lt;p&gt;Since new users won't be familiar with all the scripts in the profile, and because new scripts might be added at any time, we include a script to provide a quick synopsis of the available scripts: &lt;b&gt;Get-ProfileHelp&lt;/b&gt;. It scans the &lt;code&gt;Scripts&lt;/code&gt; directory, printing out, in an easy-to-read table,  the Synopsis from the top of each script.
&lt;pre&gt;&lt;code class="powershell"&gt;#&amp;lt;#&lt;/p&gt;
&lt;h1&gt;.Synopsis&lt;/h1&gt;
&lt;h1&gt;Get help for the PowerShellProfile scripts&lt;/h1&gt;
&lt;h2&gt;&amp;gt;&lt;/h2&gt;
&lt;p&gt;Get-ScriptDirectory | Get-ChildItem -include "&lt;em&gt;.ps1" -recurse
 | ForEach-Object {
    $name = $&lt;em&gt;.Name; $name = $name.Remove($name.Length-4)
    $synopsis = ""
    $content = (Get-Content $&lt;/em&gt;.PSPath)
    for ($i = 0; $i -le ($content.length - 1); $i += 1)
    {
       if ( $content[$i] -like '&lt;/em&gt;.Synopsis*' )
       {
           $synopsis = $content[$i+1].Substring(1).Trim()
           break
       }
    }
    $o = New-Object Object
    $o | Add-Member NoteProperty Name $name
    $o | Add-Member NoteProperty Synopsis $synopsis
    $o
} | Format-Table -AutoSize
&lt;/code&gt;&lt;/pre&gt;
The &lt;code&gt;Get-ScriptDirectory&lt;/code&gt; function just finds the location of the currently executing script. We'll see it later. Running the script gives output like this:&lt;/p&gt;
&lt;pre&gt;
Name                     Synopsis
----                     --------
Copy-Branch              Copy an SVN branch, and optionally switch to the new branch
Get-ProfileHelp          Get help for the PowerShellProfile scripts
Get-SslCertificate       Load and display an SSL Certificate from a host
Import-ResharperSettings Import Resharper 4.5 settings from a file
Merge-Branch             Merge SVN commits back into the current working directory
Switch-Branch            Switch to a new SVN branch
Update-Profile           Get the latest version of the PowerShell profile from SVN
&lt;/pre&gt;

&lt;p&gt;Rather than forcing users to navigate to the profile directory and run an &lt;code&gt;svn&lt;/code&gt; command, the &lt;b&gt;Update-Profile.ps1&lt;/b&gt; script will automatically update the profile source:
&lt;pre&gt;&lt;code class="powershell"&gt;#&amp;lt;#&lt;/p&gt;
&lt;h1&gt;.SYNOPSIS&lt;/h1&gt;
&lt;h1&gt;Get the latest version of the PowerShell profile from SVN&lt;/h1&gt;
&lt;h2&gt;&amp;gt;&lt;/h2&gt;
&lt;p&gt;svn update (Split-Path $profile)
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;
&lt;h4 id="user_profile_directories"&gt;User Profile Directories&lt;/h4&gt;

&lt;p&gt;In addition to the &lt;code&gt;Includes&lt;/code&gt; and &lt;code&gt;Scripts&lt;/code&gt; directories, each user of the PowerShell profile can have their own directory full of customizations. The name of the directory is taken from the &lt;b&gt;$env:USERNAME&lt;/b&gt; variable. On startup, if the directory exists, any &lt;code&gt;Include&lt;/code&gt; and &lt;code&gt;Scripts&lt;/code&gt; directories are processed - being dot-sourced or added to the path, respectively. This allows users to have their own personal scripts and functions. In addition, the &lt;b&gt;profile.ps1&lt;/b&gt; from the directory is dot-sourced.&lt;/p&gt;
&lt;p&gt;If a user runs PowerShell and doesn't already have a profile directory, a welcome message is printed to the screen, explaining basic usage of the profile. Then a profile directory is created and populated with an empty &lt;code&gt;profile.ps1&lt;/code&gt; to get the user started and to keep them from being welcomed again.&lt;/p&gt;
&lt;p&gt;Some users choose to commit their personal profile directories to the repository, and some don't - there's no requirement either way. If someone chose, they could even use an &lt;code&gt;svn:externals&lt;/code&gt; on the &lt;code&gt;WindowsPowerShell&lt;/code&gt; directory and host their personal directory in another part of the repository or even a different repository.&lt;/p&gt;
&lt;h4 id="putting_it_all_together"&gt;Putting it All Together&lt;/h4&gt;

&lt;p&gt;Finally we see the &lt;b&gt;Microsoft.PowerShell_profile.ps1&lt;/b&gt; file that orchestrates all this:
&lt;pre&gt;&lt;code class="powershell"&gt;# Will turn on extra output to help debug profile-loading.&lt;/p&gt;
&lt;h1&gt;Don't check in as "true"&lt;/h1&gt;
&lt;p&gt;$verbose = $false&lt;/p&gt;
&lt;h1&gt;A convenience function to get the directory the current script lives in&lt;/h1&gt;
&lt;h1&gt;- useful for importing from relative paths&lt;/h1&gt;
&lt;p&gt;function Get-ScriptDirectory
{
  $Invocation = (Get-Variable MyInvocation -Scope 1).Value
  Split-Path $Invocation.MyCommand.Path
}&lt;/p&gt;
&lt;p&gt;function Include-ProfileDirectory([string] $directory)
{
    # Load every file in the Includes subdirectory -
    # hopefully they can be loaded in any order.
    # The Includes directory should contain files that define functions and 
    # filters to be executed later, but not scripts that need to do
    # something when the file is sourced.
    if ( Test-Path ($directory + '\Includes') )
    {
        Get-ChildItem -Path:($directory + '\Includes') -Filter:*.ps1 | ForEach-Object {
            if ( $verbose )
            {
                Write-Output ("importing " + $&lt;em&gt;.PSPath)
            }
            . $&lt;/em&gt;.PSPath
        }
    }&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;# The Scripts directory should contain PowerShell scripts that someone&lt;/span&gt;
&lt;span class="err"&gt;# might want to be executed, so we&amp;#39;ll add it to our path.&lt;/span&gt;
&lt;span class="err"&gt;if ( Test-Path &amp;quot;$directory\Scripts&amp;quot; )&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    $env:PATH = &amp;quot;$($env:PATH);$directory\Scripts&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;h1&gt;dot-source the Include-ProfileDirectory function. If we run it&lt;/h1&gt;
&lt;h1&gt;directly,  all the included functions will be scoped inside the&lt;/h1&gt;
&lt;h1&gt;Include-ProfileDirectory command, and inaccessible to the user.&lt;/h1&gt;
&lt;p&gt;. Include-ProfileDirectory(Get-ScriptDirectory)&lt;/p&gt;
&lt;h1&gt;Look for user-specfic customizations. If they're there, load them.&lt;/h1&gt;
&lt;p&gt;$userProfileDir = ((Get-ScriptDirectory) + '\' + $env:USERNAME)
if ( Test-Path $userProfileDir )
{
    if ( $verbose )
    {
        Write-Output "including $userProfileDir"
    }
    . Include-ProfileDirectory($userProfileDir)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$userProfile = ($userProfileDir + &amp;#39;\profile.ps1&amp;#39;)&lt;/span&gt;
&lt;span class="err"&gt;if ( Test-Path $userProfile )&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    . $userProfile&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
else
{
    Write-Host -foregroundColor yellow -backgroundColor darkblue @"&lt;/p&gt;
&lt;p&gt;Welcome to the DayJob PowerShell Profile.  It looks like this is your
first time here, so I'll create a new profile for you. This profile
will be called&lt;/p&gt;
&lt;p&gt;$userProfile&lt;/p&gt;
&lt;p&gt;If you want to customize your PowerShell experience, you can edit this
file. Eventually you may want to modify files in the containing directories,
but keep in mind that those changes will affect other users.&lt;/p&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
&lt;p&gt;"@&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;New-Item -path  $userProfile -itemType &amp;quot;file&amp;quot; -Force &amp;gt; Out-Null&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="PowerShell"></category><category term="Subversion"></category></entry><entry><title>expand your scope - you can dot-source more than just files</title><link href="https://blairconrad.com/2010/01/29/expand-your-scope-you-can-dot-source-more-than-just-files/" rel="alternate"></link><published>2010-01-29T00:00:00-05:00</published><updated>2010-01-29T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-01-29:/2010/01/29/expand-your-scope-you-can-dot-source-more-than-just-files/</id><summary type="html">&lt;p&gt;I'm working on a  &lt;a href="../../../02/07/using-subversion-to-evangelize-powershell/"&gt;small project&lt;/a&gt; that will require me to dot-source some PowerShell files in order to load their functions, aliases, and variables and make them available in a session. Actually, I have to do a little more than dot-source each file, but I'll keep the example simple to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm working on a  &lt;a href="../../../02/07/using-subversion-to-evangelize-powershell/"&gt;small project&lt;/a&gt; that will require me to dot-source some PowerShell files in order to load their functions, aliases, and variables and make them available in a session. Actually, I have to do a little more than dot-source each file, but I'll keep the example simple to illustrate the wrinkle I ran into.&lt;/p&gt;
&lt;p&gt;Suppose I have this file, &lt;b&gt;file-to-load.ps1&lt;/b&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="powershell"&gt;Function Get-MyName
{
    Write-Output "Blair Conrad"
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I dot-source it from the console, and everything's great:&lt;/p&gt;
&lt;pre&gt;&lt;code class="powershell"&gt;PS&gt; . .\file-to-load.ps1
PS&gt; Get-MyName
Blair Conrad&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because I'll be doing this over and over, and I want to manipulate the &lt;code&gt;.ps1&lt;/code&gt; files a little more, I decide to wrap the dot-sourcing in a function, and call it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="powershell"&gt;Function Load-File([string] $filename)
{
    . $filename
}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="powershell"&gt;PS&gt; Load-File('.\file-to-load.ps1')
PS&gt; Get-MyName
The term 'Get-MyName' is not recognized as the name of a cmdlet, function,
script file, or operable program. Check the spelling of the name, or if
a path was included, verify that the path is correct and try again.
At line:1 char:11
+ Get-MyName &amp;lt;&amp;lt;&amp;lt;&amp;lt;
    + CategoryInfo          : ObjectNotFound: (Get-MyName:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not good. The &lt;code&gt;Get-MyName&lt;/code&gt; function is loaded inside the scope of the &lt;code&gt;Load-File&lt;/code&gt; function. It's only available as long as I'm inside &lt;code&gt;Load-File&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I thought about modifying all the script files that were to be loaded, scoping each contained function, alias, and variable as &lt;code&gt;global&lt;/code&gt;, but that would be a pain, and I'm not going to be the only one writing these files. Eventually, I came upon it: dot-source the &lt;code&gt;Load-File&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class="powershell"&gt;PS&gt; . Load-File('.\file-to-load.ps1')
PS&gt; Get-MyName
Blair Conrad
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I'll admit I don't quite understand &lt;em&gt;why&lt;/em&gt; it works, but for now, I'm content to know that it does.&lt;/p&gt;</content><category term="Development"></category><category term="Development"></category><category term="PowerShell"></category></entry><entry><title>Brandon Sanderson - Good author and class act</title><link href="https://blairconrad.com/2010/01/24/brandon-sanderson-good-author-and-class-act/" rel="alternate"></link><published>2010-01-24T00:00:00-05:00</published><updated>2010-01-24T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-01-24:/2010/01/24/brandon-sanderson-good-author-and-class-act/</id><summary type="html">&lt;p&gt;I won't talk about every book I read here - that's what &lt;a href="http://www.goodreads.com/hippopottoman"&gt;Goodreads&lt;/a&gt; is for. However, every once in a while something exceptional's bound to come up, and I'll be compelled to mention it here. This is one such thing.
Anyone who's talked to me this year will have heard how …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I won't talk about every book I read here - that's what &lt;a href="http://www.goodreads.com/hippopottoman"&gt;Goodreads&lt;/a&gt; is for. However, every once in a while something exceptional's bound to come up, and I'll be compelled to mention it here. This is one such thing.
Anyone who's talked to me this year will have heard how much I enjoyed Brandon Sanderson's &lt;a href="http://www.brandonsanderson.com/portal/Mistborn-Trilogy"&gt;Mistborn Trilogy&lt;/a&gt;. Individually, they're very good books, but as a whole, they're exceptional - the planning Mr. Sanderson put into the books ties them together to provide a tight, compelling read, the likes of which I rarely see. Anyhow, before Christmas, Mr. Sanderson &lt;a href="http://www.brandonsanderson.com/blog/848/Give-the-Gift-of-Mistborn-for-Ten-Days-Only-%28Also-Posters%29"&gt;offered the Gift of Mistborn for 10 days&lt;/a&gt; - buy 7 signed, hard cover, first edition &lt;i&gt;Mistborn: The Final Empire&lt;/i&gt; for $70US, plus shipping. I thought this was a tremendous deal and convinced a coworker to go in on it with me.&lt;/p&gt;
&lt;p&gt;A few days after I ordered, I received an e-mail saying that Mr. Sanderson had accidentally signed and personalized the entire trilogy for me, so he'd be sending me those as well. And sure enough they arrived just after Christmas, looking absolutely beautiful.&lt;/p&gt;
&lt;p&gt;This was a very generous thing to do. He could've said, "Ooops, I ruined those copies," and sold them at a discount or ground them up and burnt them to heat his house. Instead, he poured more of his own money into shipping the books to Canada, just to make me happy.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;</content><category term="Miscellany"></category><category term="Books"></category></entry><entry><title>Acronyms of the Day: VOMIT and BARF</title><link href="https://blairconrad.com/2010/01/19/acronyms-of-the-day-vomit-and-barf/" rel="alternate"></link><published>2010-01-19T00:00:00-05:00</published><updated>2010-01-19T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-01-19:/2010/01/19/acronyms-of-the-day-vomit-and-barf/</id><summary type="html">&lt;p&gt;I was listening to &lt;a href="http://www.cbc.ca/ideas/podcast.html"&gt;CBC's Ideas Podcast&lt;/a&gt; today, specifically to &lt;i&gt;You Are "Pre-Diseased", Part 2&lt;/i&gt; (which aired on 18 January and is available for download until mid-February, in case you want to listen) when I heard a new acronym that's relevant to my Day Job.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;V&lt;/b&gt;ictim &lt;b&gt;O&lt;/b&gt;f &lt;b&gt;M …&lt;/b&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was listening to &lt;a href="http://www.cbc.ca/ideas/podcast.html"&gt;CBC's Ideas Podcast&lt;/a&gt; today, specifically to &lt;i&gt;You Are "Pre-Diseased", Part 2&lt;/i&gt; (which aired on 18 January and is available for download until mid-February, in case you want to listen) when I heard a new acronym that's relevant to my Day Job.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;V&lt;/b&gt;ictim &lt;b&gt;O&lt;/b&gt;f &lt;b&gt;M&lt;/b&gt;edical &lt;b&gt;I&lt;/b&gt;maging &lt;b&gt;T&lt;/b&gt;echnology refers to patients who are operated on after an abnormality is detected in an imaging procedure, but nothing is found during the operation.&lt;/p&gt;

&lt;p&gt;Closely related is &lt;b&gt;B&lt;/b&gt;rainlessly &lt;b&gt;A&lt;/b&gt;pplying &lt;b&gt;R&lt;/b&gt;adiological &lt;b&gt;F&lt;/b&gt;indings - treating the result of an imaging study, not the patient and her symptoms.&lt;/p&gt;

&lt;p&gt;I don't mean to make light of the plight of patients who undergo operations or treatments when they're not warranted, but I thought the acronyms themselves are good for a chuckle. &lt;a href="http://ctsurgcomplications.wikia.com/wiki/VOMIT:_victim_of_medical_%28or_modern%29_imaging_%28or_investigational%29_technology"&gt;Read more.&lt;/a&gt;&lt;/p&gt;</content><category term="Miscellany"></category><category term="diversions"></category><category term="words"></category></entry><entry><title>Cookies, Redirects, and Transcripts - Supercharging urlfetch</title><link href="https://blairconrad.com/2010/01/17/cookies-redirects-and-transcripts-supercharging-urlfetch/" rel="alternate"></link><published>2010-01-17T00:00:00-05:00</published><updated>2010-01-17T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-01-17:/2010/01/17/cookies-redirects-and-transcripts-supercharging-urlfetch/</id><summary type="html">&lt;p&gt;&lt;a href="http://libraryhippo.appspot.com/"&gt;LibraryHippo&lt;/a&gt;'s main function is fetching current library account status for patrons. Since I have no special relationship with any of the libraries involved, LibraryHippo &lt;a href="http://en.wikipedia.org/wiki/Web_scraping"&gt;web scrapes&lt;/a&gt; the libraries' web interfaces.&lt;/p&gt;

&lt;p&gt;The library websites issue cookies and redirects, so I needed to do something to augment the &lt;a href="http://code.google.com/appengine/docs/python/urlfetch/"&gt;URL Fetch Python …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://libraryhippo.appspot.com/"&gt;LibraryHippo&lt;/a&gt;'s main function is fetching current library account status for patrons. Since I have no special relationship with any of the libraries involved, LibraryHippo &lt;a href="http://en.wikipedia.org/wiki/Web_scraping"&gt;web scrapes&lt;/a&gt; the libraries' web interfaces.&lt;/p&gt;

&lt;p&gt;The library websites issue cookies and redirects, so I needed to do something to augment the &lt;a href="http://code.google.com/appengine/docs/python/urlfetch/"&gt;URL Fetch Python API&lt;/a&gt;. 
I wrote a utility class that worked with the urllib2 interface, but that didn't allow me to set the `deadline` argument, and I wanted to increase its value to 10 seconds. I resigned myself to wiring up a version that used urlfetch, when I found  &lt;a href="http://everydayscripting.blogspot.com/2009/08/google-app-engine-cookie-handling-with.html"&gt;Scott Hillman's URLOpener&lt;/a&gt;, which uses &lt;a href="http://docs.python.org/library/cookielib.html"&gt;cookielib&lt;/a&gt; to follow redirects and handle any cookies met along the way.&lt;/p&gt;

&lt;p&gt;URLOpener looked like it would work for me, with a few tweaks - it didn't support relative URLs in redirects, it doesn't allow one to specify headers in requests, and it lacked one feature that I really wanted - a &lt;em&gt;transcript&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id="why_a_transcript"&gt;Why a transcript?&lt;/h4&gt;

&lt;p&gt;The libraries don't provide a spec for their output, so I built the web scraper by trial and error, sometimes putting books on hold or taking them out just to get test data. Every once in a while something comes up that I haven't coded for and the application breaks. In these cases, I can't rely on the problem being reproducible, since the patron could've returned (or picked up) the item whose record was troublesome or some other library state might've changed. I need to know what the web site looked like when the problem occurred, and since the ultimate cause might be several pages back, I need a history.&lt;/p&gt;

&lt;p&gt;I started adding a transcript feature to the URLOpener - recording every request and response including headers. As I worked, I worried about two things:
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;fetch&lt;/code&gt; logic was becoming convoluted, and&lt;/li&gt;&lt;/li&gt;
&lt;li&gt;the approach was inflexible - what if later I didn't want to follow redirects, or to keep a transcript?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="decorators_to_the_rescue"&gt;Decorators to the rescue&lt;/h4&gt;

&lt;p&gt;I decided to separate each bit of functionality - following redirects, tracking cookies, and keeping a transcript - into its own &lt;a href="http://en.wikipedia.org/wiki/Decorator_pattern"&gt;decorator&lt;/a&gt;, to be applied as needed. First  I teased out the code that followed redirects, with my change to allow relative URLs:&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;class RedirectFollower():
    def __init__(self, fetcher):
        self.fetcher = fetcher

    def __call__(self, url, payload=None, method='GET', headers={},
                 allow_truncated=False, follow_redirects=False, deadline=None):
        while True:
            response = self.fetcher(url, payload, method, headers,
                                    allow_truncated, False, deadline)
            new_url = response.headers.get('location')
            if new_url:
                # Join the URLs in case the new location is relative
                url = urlparse.urljoin(url, new_url)

                # Next request should be a get, payload needed
                method = 'GET'
                payload = None
            else:
                break

        return response&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, the cookie-handling code was easy to put in its own class:&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;class CookieHandler():
    def __init__(self, fetcher):
        self.fetcher = fetcher
        self.cookie_jar = Cookie.SimpleCookie()

    def __call__(self, url, payload=None, method='GET', headers={},
                 allow_truncated=False, follow_redirects=True, deadline=None):
            headers['Cookie'] = self._make_cookie_header()
            response = self.fetcher(url, payload, method, headers,
                                    allow_truncated, follow_redirects, deadline)
            self.cookie_jar.load(response.headers.get('set-cookie', ''))
            return response

    def _make_cookie_header(self):
        cookieHeader = ""
        for value in self.cookie_jar.values():
            cookieHeader += "%s=%s; " % (value.key, value.value)
        return cookieHeader&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I had the `URLOpener` functionality back, just by creating an object like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;fetch = RedirectFollower(CookieHandler(urlfetch.fetch))&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="implementing_transcripts"&gt;Implementing transcripts&lt;/h4&gt;

&lt;p&gt;I still needed one more decorator - the transcriber.&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;class Transcriber():
    def __init__(self, fetcher):
        self.fetcher = fetcher
        self. transactions = []

    def __call__(self, url, payload=None, method='GET', headers={},
                 allow_truncated=False, follow_redirects=True, deadline=None):
        self.transactions.append(Transcriber._Request(vars()))
        response = self.fetcher(url, payload, method, headers,
                                    allow_truncated, follow_redirects, deadline)
        self.transactions.append(Transcriber._Response(response))
        return response

    class _Request:
        def __init__(self, values):
            self.values = dict((key, values[key])
                               for key in ('url', 'method', 'payload', 'headers'))
            self.values['time'] = datetime.datetime.now()

        def __str__(self):
            return '''Request at %(time)s:
  url = %(url)s
  method = %(method)s
  payload = %(payload)s
  headers = %(headers)s''' % self.values

    class _Response:
        def __init__(self, values):
            self.values = dict(status_code=values.status_code,
                               headers=values.headers,
                               content=values.content,
                               time=datetime.datetime.now())

        def __str__(self):
            return '''Response at %(time)s:
  status_code = %(status_code)d
  headers = %(headers)s
  content = %(content)s''' % self.values&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To record all my transactions, all I have to do is wrap my fetcher one more time. When something goes wrong, I can examine the whole chain of calls and have a better shot at fixing the scraper.&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;fetch = Transcriber(RedirectFollower(CookieHandler(urlfetch.fetch)))
response = fetch(patron_account_url)
try:
    process(response)
except:
    logging.error('error checking account for ' + patron, exc_info=True)
    for action in fetch.transactions:
            logging.debug(action)&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="extra_fine_logging_without_rewriting_fetch"&gt;Extra-fine logging without rewriting fetch&lt;/h4&gt;

&lt;p&gt;The exercise of transforming &lt;code&gt;URLOpener&lt;/code&gt; into a series of decorators may seem like just that, an exercise that doesn't provide real value, but provides a powerful debugging tool for your other decorators. By moving the &lt;code&gt;Transcriber&lt;/code&gt; to the inside of the chain of decorators, you can see each fetch that's made due to a redirect, and which cookies are set when:&lt;/p&gt;
&lt;pre&gt;&lt;code class="python"&gt;fetch = RedirectFollower(CookieHandler(Transcriber(urlfetch.fetch)))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only trick is that the `Transcriber.transactions` attribute isn't available from the outermost decorator. This is easily solved by extracting a base class and having it delegate to the wrapped item.&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;class _BaseWrapper:
    def __init__(self, fetcher):
        self.fetcher = fetcher

    def __getattr__(self, name):
        return getattr(self.fetcher, name)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the other decorators extend `_BaseWrapper`, either losing their `__init__` or having them modified. For example, `CookieHandler` becomes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;class CookieHandler(_BaseWrapper):
    def __init__(self, fetcher):
        _BaseWrapper.__init__(self, fetcher)
        self.cookie_jar = Cookie.SimpleCookie()
...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then the following code works, and helped me diagnose a small bug I'd originally had in my `RedirectFollower`. As a bonus, if I ever need to get at `CookieHandler.cookie_jar`, it's right there too.&lt;/p&gt;

&lt;pre&gt;&lt;code class="python"&gt;fetch = RedirectFollower(CookieHandler(Transcriber(urlfetch.fetch)))
fetch(patron_account_url)
for action in fetch.transactions:
    logging.debug(action)&lt;/code&gt;&lt;/pre&gt;</content><category term="Development"></category><category term="AppEngine"></category><category term="Development"></category><category term="LibraryHippo"></category><category term="Python"></category></entry><entry><title>New Year's Python Meme</title><link href="https://blairconrad.com/2010/01/09/new-years-python-meme/" rel="alternate"></link><published>2010-01-09T00:00:00-05:00</published><updated>2010-01-09T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-01-09:/2010/01/09/new-years-python-meme/</id><summary type="html">&lt;p&gt;It's a little late, but I'm participating in &lt;a href="http://tarekziade.wordpress.com/2009/12/28/new-years-python-meme/"&gt;Tarek Ziadé's Python Meme&lt;/a&gt; (&lt;a href="http://www.mechanicalcat.net/richard/log/Python/New_Year_s_Python_meme"&gt;via Richard Jones&lt;/a&gt;):
&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;What’s the coolest Python application, framework or library you have discovered in 2009?&lt;/strong&gt;
              &lt;p&gt;&lt;a href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt;. I'd known of it before, but hadn't tried it until early this year when I started to &lt;a href="/2010/01/08/meet-libraryhippo/"&gt;work …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's a little late, but I'm participating in &lt;a href="http://tarekziade.wordpress.com/2009/12/28/new-years-python-meme/"&gt;Tarek Ziadé's Python Meme&lt;/a&gt; (&lt;a href="http://www.mechanicalcat.net/richard/log/Python/New_Year_s_Python_meme"&gt;via Richard Jones&lt;/a&gt;):
&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;What’s the coolest Python application, framework or library you have discovered in 2009?&lt;/strong&gt;
              &lt;p&gt;&lt;a href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt;. I'd known of it before, but hadn't tried it until early this year when I started to &lt;a href="/2010/01/08/meet-libraryhippo/"&gt;work on LibraryHippo&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;What new programming technique did you learn in 2009?&lt;/strong&gt;
              &lt;p&gt;I'm not sure if this counts as a technique, but I recently found (and found a use for) Jean-Paul S. Boodhoo's &lt;a href="http://blog.jpboodhoo.com/TheStaticGatewayPattern.aspx"&gt;Static Gateway Pattern&lt;/a&gt;. At the Day Job, we have a lot of hard-coded dependencies and reliance on well-known static methods for authorization. The Static Gateway Pattern made it easy to provide an injectable implementation without rewriting the whole application. I expect it to continue to be useful, at least until we take the time to introduce a full  &lt;a href="http://en.wikipedia.org/wiki/Inversion_of_Control"&gt;Inversion of Control&lt;/a&gt; container.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;What’s the name of the open source project you contributed the most in 2009? What did you do?&lt;/strong&gt;
              &lt;p&gt;I didn't, really. Unless you count LibraryHippo. I've an interest in working on &lt;a href="http://code.google.com/p/noda-time/"&gt;Noda Time&lt;/a&gt;, but I haven't managed to yet.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;What was the Python blog or website you read the most in 2009?&lt;/strong&gt;
              &lt;p&gt;&lt;a href="http://wordaligned.org/"&gt;Word Aligned&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;What are the three top things you want to learn in 2010?&lt;/strong&gt;
              &lt;ul&gt;
                  &lt;li&gt;more &lt;a href="http://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx"&gt;PowerShell&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;.NET Framework 4.0, and whatever I've missed since 1.1...&lt;/li&gt;
                  &lt;li&gt;&lt;a href="http://api.jquery.com/category/ajax/"&gt;jQuery Ajax&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;</content><category term="Miscellany"></category><category term="Development"></category><category term="Meme"></category><category term="Python"></category></entry><entry><title>Meet LibraryHippo</title><link href="https://blairconrad.com/2010/01/08/meet-libraryhippo/" rel="alternate"></link><published>2010-01-08T00:00:00-05:00</published><updated>2010-01-08T00:00:00-05:00</updated><author><name></name></author><id>tag:blairconrad.com,2010-01-08:/2010/01/08/meet-libraryhippo/</id><summary type="html">&lt;p&gt;I enjoy &lt;a href="http://www.goodreads.com/user/show/1066544"&gt;reading&lt;/a&gt; and using my local libraries. My wife and I have four library cards between us - one each for the &lt;a href="http://www.wpl.ca/"&gt;Waterloo Public Library&lt;/a&gt;, one for the &lt;a href="http://kpl.org/"&gt;Kitchener Public Library&lt;/a&gt;, and one for the &lt;a href="http://www.regionofwaterloo.canlib.ca/"&gt;Region of Waterloo Library&lt;/a&gt;. Using our cards, we were able to find all kinds of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I enjoy &lt;a href="http://www.goodreads.com/user/show/1066544"&gt;reading&lt;/a&gt; and using my local libraries. My wife and I have four library cards between us - one each for the &lt;a href="http://www.wpl.ca/"&gt;Waterloo Public Library&lt;/a&gt;, one for the &lt;a href="http://kpl.org/"&gt;Kitchener Public Library&lt;/a&gt;, and one for the &lt;a href="http://www.regionofwaterloo.canlib.ca/"&gt;Region of Waterloo Library&lt;/a&gt;. Using our cards, we were able to find all kinds of books to read and DVDs to watch, but organizing our borrowing was a little annoying, since:
&lt;ul&gt;
    &lt;li&gt;we had to log into four different library accounts to get an overview of our current borrowings and holds,&lt;/li&gt;
    &lt;li&gt;each  account had a long, hard-to-remember ID, and&lt;/li&gt;
    &lt;li&gt;the library would send e-mail when items were overdue, not in time to take them back.&lt;/li&gt;
&lt;/ul&gt;
I'd been using &lt;a href="http://www.libraryelf.com/"&gt;Library Elf&lt;/a&gt; to manage our cards, but they'd recently moved to a for-pay model, so I combined a sense of frugality with the desire to build something using a new technology and created &lt;a href="http://libraryhippo.appspot.com/"&gt;LibraryHippo&lt;/a&gt;, a &lt;a href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt;-powered web application that takes care of my library cards.&lt;/p&gt;
&lt;p&gt;&lt;a title="Visit LibraryHippo" href="http://libraryhippo.appspot.com/"&gt;&lt;img title="LibraryHippo logo" src="https://blairconrad.com/images/libraryhippo-logo.png" alt="LibraryHippo logo" width="161" height="115" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LibraryHippo:
&lt;ul&gt;
    &lt;li&gt;manages multiple cards per family&lt;/li&gt;
    &lt;li&gt;shows a comprehensive overview of a family's current library status&lt;/li&gt;
    &lt;li&gt;sends e-mail every morning if
&lt;ul&gt;
    &lt;li&gt;a family has items that are nearly due&lt;/li&gt;
    &lt;li&gt;there are items ready to be picked up, or&lt;/li&gt;
    &lt;li&gt;there's a problem checking an account&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
Feel free to check out the &lt;a href="http://code.google.com/p/libraryhippo/"&gt;project, hosted on Google Code.&lt;/a&gt; A fair number of my future posts will talk about the adventures I've had implementing and improving LibraryHippo.&lt;/p&gt;</content><category term="Development"></category><category term="LibraryHippo"></category></entry></feed>